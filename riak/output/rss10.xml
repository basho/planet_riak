<?xml version="1.0"?>
<rdf:RDF
	xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:foaf="http://xmlns.com/foaf/0.1/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns="http://purl.org/rss/1.0/"
>
<channel rdf:about="http://planetriak.org">
	<title>Planet Riak</title>
	<link>http://planetriak.org</link>
	<description>Planet Riak - http://planetriak.org</description>

	<items>
		<rdf:Seq>
			<rdf:li rdf:resource="http://recap.basho.com/2011/11/02/Riak-Recap-for-October-31-November-1" />
			<rdf:li rdf:resource="http://recap.basho.com/2011/10/31/Riak-Recap-for-October-28-30" />
			<rdf:li rdf:resource="http://recap.basho.com/2011/10/28/Riak-Recap-for-October-21-27" />
			<rdf:li rdf:resource="http://recap.basho.com/2011/10/21/Riak-Recap-for-October-19-20" />
			<rdf:li rdf:resource="http://www.themarkphillips.com//2011/10/19/Quick-Survey-For-Open-Source-Developers" />
			<rdf:li rdf:resource="http://recap.basho.com/2011/10/19/Riak-Recap-for-October-16-17" />
			<rdf:li rdf:resource="http://recap.basho.com/2011/10/17/Riak-Recap-for-Oct-12-16" />
			<rdf:li rdf:resource="http://recap.basho.com/2011/10/12/Riak-Recap-for-October-10-11" />
			<rdf:li rdf:resource="http://recap.basho.com/2011/10/10/Riak-Recap-for-October-5-9" />
			<rdf:li rdf:resource="tag:basho.com,2011-10-05:/blog/technical/2011/10/05/Remembering-Steve-Jobs/" />
			<rdf:li rdf:resource="http://recap.basho.com/2011/10/05/Riak-Recap-For-October-3-4" />
			<rdf:li rdf:resource="http://recap.basho.com/2011/10/03/Riak-Recap-for-September-28-October-02" />
			<rdf:li rdf:resource="tag:basho.com,2011-09-30:/blog/technical/2011/09/30/Riak-1-dot-0-is-Official/" />
			<rdf:li rdf:resource="http://recap.basho.com/2011/09/28/Riak-Recap-for-September-26-27" />
			<rdf:li rdf:resource="http://recap.basho.com/2011/09/26/Riak-Recap-September-23-25" />
			<rdf:li rdf:resource="http://recap.basho.com/2011/09/23/Riak-Recap-for-September-19-22" />
			<rdf:li rdf:resource="tag:basho.com,2011-09-19:/blog/technical/2011/09/19/Riak-Pipe-The-New-Map-Reduce-Power/" />
			<rdf:li rdf:resource="http://recap.basho.com/2011/09/19/Riak-Recap-for-September-16-18" />
			<rdf:li rdf:resource="http://recap.basho.com/2011/09/16/Riak-Recap-for-September-14-15" />
			<rdf:li rdf:resource="tag:basho.com,2011-09-14:/blog/technical/2011/09/14/Secondary-Indexes-in-Riak/" />
			<rdf:li rdf:resource="http://recap.basho.com/2011/09/14/Riak-Recap-for-September-12-13" />
			<rdf:li rdf:resource="http://recap.basho.com/2011/09/12/Riak-Recap-for-September-9-11" />
			<rdf:li rdf:resource="http://recap.basho.com/2011/09/09/Riak-Recap-for-September-07-08" />
			<rdf:li rdf:resource="tag:basho.com,2011-09-09:/blog/technical/2011/09/09/Riak-Cluster-Membership-Overview/" />
			<rdf:li rdf:resource="http://recap.basho.com/2011/09/07/Riak-Recap-for-September-3-6" />
			<rdf:li rdf:resource="http://recap.basho.com/2011/09/02/Riak-Recap-for-Sept-1-2" />
			<rdf:li rdf:resource="http://recap.basho.com/2011/09/01/Riak-Recap-for-August-29-31" />
			<rdf:li rdf:resource="http://recap.basho.com/2011/08/29/Riak-Recap-For-August-26-28" />
			<rdf:li rdf:resource="http://recap.basho.com/2011/08/26/Riak-Recap-for-August-22-25" />
			<rdf:li rdf:resource="http://recap.basho.com/2011/08/22/Riak-Recap-For-August-19-21" />
			<rdf:li rdf:resource="http://recap.basho.com/2011/08/19/Riak-Recap-for-August-17-18" />
			<rdf:li rdf:resource="http://www.themarkphillips.com//2011/08/09/A-Cost-Benefit-Analysis-of-the-Ruby-Hackathon" />
			<rdf:li rdf:resource="http://buffered.io/posts/corrugatediron-update-v0-1-1" />
			<rdf:li rdf:resource="http://buffered.io/posts/introducing-corrugatediron" />
			<rdf:li rdf:resource="http://seancribbs.com/tech/2011/07/14/ripple-hackathon---day-3/" />
			<rdf:li rdf:resource="http://seancribbs.com/tech/2011/07/13/ripple-hackathon---day-2/" />
			<rdf:li rdf:resource="http://seancribbs.com/tech/2011/07/12/ripple-hackathon---day-1/" />
			<rdf:li rdf:resource="http://www.themarkphillips.com//2011/06/27/Building-and-Maintaining-Internal-Community-And-Culture" />
			<rdf:li rdf:resource="http://www.themarkphillips.com//2011/05/18/Two-Anecdotes-About-Community-From-JSConf-and-NodeConf" />
			<rdf:li rdf:resource="http://www.themarkphillips.com//2011/03/31/A-Few-Suggestions-For-GitHub" />
			<rdf:li rdf:resource="http://seancribbs.com/tech/2011/03/08/how-ripple-uses-fibers/" />
			<rdf:li rdf:resource="http://buffered.io/2011/02/25/go-with-your-instinct/" />
			<rdf:li rdf:resource="http://buffered.io/2011/02/15/now-powered-by-blogofile/" />
			<rdf:li rdf:resource="http://www.themarkphillips.com//2011/02/03/Why-Do-People-Watch-Code-Survey-Results-Edition" />
			<rdf:li rdf:resource="http://www.themarkphillips.com//2011/01/20/Why-Do-People-Watch-Code" />
			<rdf:li rdf:resource="http://seancribbs.com/tech/2011/01/01/happy-birthday-ripple/" />
			<rdf:li rdf:resource="http://www.themarkphillips.com//2010/12/08/Whats-Missing-in-the-NoSQL-Space" />
			<rdf:li rdf:resource="http://buffered.io/2010/11/26/issue-with-google-reader/" />
			<rdf:li rdf:resource="http://buffered.io/2010/10/13/webmachine-erlydtl-and-riak-part-3/" />
			<rdf:li rdf:resource="http://buffered.io/2010/10/06/asp-net-mvc-2-random-sign-offs-and-tempdata-loss/" />
			<rdf:li rdf:resource="http://www.themarkphillips.com//2010/09/23/Using-Open-Source-to-Promote-Sustainable-Farming" />
			<rdf:li rdf:resource="http://buffered.io/2010/09/12/webmachine-erlydtl-and-riak-part-2/" />
			<rdf:li rdf:resource="http://buffered.io/2010/09/01/webmachine-erlydtl-and-riak-part-1/" />
			<rdf:li rdf:resource="http://seancribbs.com/tech/2010/08/31/ripple-0-8-is-full-of-good-stuff/" />
			<rdf:li rdf:resource="http://www.themarkphillips.com//2010/08/20/What-I-Learned-from-Organizing-the-First-Riak-Meetup" />
			<rdf:li rdf:resource="http://www.themarkphillips.com//2010/07/17/Why-I-Write-the-Riak-Recap-Every-Day" />
			<rdf:li rdf:resource="http://www.themarkphillips.com//2010/07/01/Big-Table-in-the-house-of-Balmer" />
			<rdf:li rdf:resource="http://buffered.io/2010/06/25/bfpg-june-meetup/" />
			<rdf:li rdf:resource="http://seancribbs.com/tech/2010/04/14/slides-from-boston-rb-introducing-riak-and-ripple/" />
			<rdf:li rdf:resource="http://seancribbs.com/tech/2010/02/10/introducing-ripple-0-5-you-got-your-riak-in-my-ruby/" />
		</rdf:Seq>
	</items>
</channel>

<item rdf:about="http://recap.basho.com/2011/11/02/Riak-Recap-for-October-31-November-1">
	<title>Riak Recap Blog: Riak Recap for October 31 - November 1</title>
	<link>http://recap.basho.com/2011/11/02/Riak-Recap-for-October-31-November-1</link>
	<content:encoded>&lt;p&gt;&lt;em&gt;Posted on November 1&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Evening, Morning, Afternoon, to All -&lt;/p&gt;
&lt;p&gt;Huge Recap for today: new code, new docs, talks, jobs, and more.&lt;/p&gt;
&lt;p&gt;Enjoy,&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://recap.basho.com/feed/twitter.com/pharkmillups&quot;&gt;Mark&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Riak Recap for October 31 &amp;#8211; November 1&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Clint Shryock has a new project on GitHub called &amp;#8220;sinatra-riak,&amp;#8221; a data-browser of sorts that runs as a Sinatra app.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;https://github.com/ctshryock/sinatra-riak&quot;&gt;Code here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;We merged another sizable contribution from Greg Stein to the Python Client. Thanks, Greg!&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;https://github.com/basho/riak-python-client/commit/bc6fe90da9880f3092fe45f56ae4d144e62ac0da&quot;&gt;Code here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Ian Plosker put together a great piece of documentation about when to use MapReduce, Search, and Secondary Indexes in Riak.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://wiki.basho.com/MapReduce-Search-2i-Comparison.html&quot;&gt;Check it out here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;We have new feature request up on features.basho.com.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://features.basho.com/entries/20625356-tighten-security-of-default-packaging&quot;&gt;Read here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Q: Why does using strace against Riak show a large amount futex?&lt;br /&gt;
   A: &lt;a href=&quot;https://help.basho.com/entries/20644138-why-does-using-strace-against-riak-show-a-large-amount-futex&quot;&gt;Here on the Knowledge Base&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;The team at Bump Technologies gave a great presentation last night about how and why they are using Riak and Haskell. Will Moss and the team were kind enough to pass along the slides.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;https://docs.google.com/presentation/d/1ZnMZtTYKSeO7eBDwqov2B4Qk8xfY1-9UqiBzzlkKTrY/edit#slide=id.g1041ad0_0_0&quot;&gt;Viewable here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Riak (Search) 1.0 has some new admin commands and we finally got around to adding then to the wiki.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://bit.ly/uVQVFe&quot;&gt;Riak&lt;/a&gt;&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://bit.ly/vpnK9o&quot;&gt;Search&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;The video from Russell Brown&amp;#8217;s &amp;#8220;Handling Conflicts in an Eventually Consistent System&amp;#8221; talk is online.&lt;br /&gt;
&amp;#8594; Pour yourself a 16yo Lagavulin (Russell&amp;#8217;s favorite) and enjoy &lt;a href=&quot;http://skillsmatter.com/podcast/nosql/russell-on-riak&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;Julio Capote is working on a &amp;#8220;disk backed, fast k/v cache&amp;#8221; powered by Webmachine and Bitcask.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;https://github.com/capotej/nolimit&quot;&gt;Code here&lt;/a&gt; &lt;br /&gt;
&amp;#8594; Also, I heard a rumor that his library was named after No Limit Records, you should probably &lt;a href=&quot;http://www.youtube.com/watch?v=d5ZvzIOO6aU&quot;&gt;listen to this track&lt;/a&gt; while reading the source code. [Somewhat &lt;span class=&quot;caps&quot;&gt;SFW&lt;/span&gt;]&lt;/li&gt;
	&lt;li&gt;A few jobs to pass along:&lt;br /&gt;
&amp;#8594; Skylin.es in the Amsterdam is hiring people with Riak experience. &lt;a href=&quot;http://news.ycombinator.com/item?id=3182009&quot;&gt;Info here&lt;/a&gt;&lt;br /&gt;
&amp;#8594; Rootlabs in Oakland, CA, is hiring. &lt;a href=&quot;http://news.ycombinator.com/item?id=3182392&quot;&gt;Details here&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Bugs/Issues&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;New&lt;br /&gt;
&amp;#8594; 1272: &lt;a href=&quot;https://issues.basho.com/show_bug.cgi?id=1272&quot;&gt;Handoff never completes if search is only enabled on some nodes&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Resolved/Patched/Fixed&lt;br /&gt;
&amp;#8594; 1070: &lt;a href=&quot;https://issues.basho.com/show_bug.cgi?id=1070&quot;&gt;Java &lt;span class=&quot;caps&quot;&gt;REST&lt;/span&gt; client doesn&amp;#8217;t pass RW param on &lt;span class=&quot;caps&quot;&gt;DELETE&lt;/span&gt; request&lt;/a&gt;&lt;br /&gt;
&amp;#8594; 1071: &lt;a href=&quot;https://issues.basho.com/show_bug.cgi?id=1071&quot;&gt;The &lt;span class=&quot;caps&quot;&gt;REST&lt;/span&gt; Java Client does not return siblings on store when returnbody set to true&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content:encoded>
	<dc:date>2011-11-02T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://recap.basho.com/2011/10/31/Riak-Recap-for-October-28-30">
	<title>Riak Recap Blog: Riak Recap for October 28 - 30</title>
	<link>http://recap.basho.com/2011/10/31/Riak-Recap-for-October-28-30</link>
	<content:encoded>&lt;p&gt;&lt;em&gt;Posted on October 31&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Afternoon, Evening, Morning To All -&lt;/p&gt;
&lt;p&gt;Great Recap for today: Riak and Apache Whirr, new code, jobs, and more.&lt;/p&gt;
&lt;p&gt;Enjoy,&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://recap.basho.com/feed/twitter.com/pharkmillups&quot;&gt;Mark&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Riak Recap for October 28 &amp;#8211; 30&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;For anyone in/around London: on November 2nd, Basho Developer Russell Brown will be giving a talk called &amp;#8220;Handling Conflicts in Eventually Consistent Systems&amp;#8221; at the NoSQL Exchange Event.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://skillsmatter.com/podcast/nosql/russell-on-riak&quot;&gt;Details here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Several people are making good progress on getting Riak support into Apache Whirr.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;https://issues.apache.org/jira/browse/WHIRR-273&quot;&gt;Latest code here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Secondary Indexing Support Landed in riak-js.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;https://github.com/frank06/riak-js/issues/90#issuecomment-2572396&quot;&gt;Code here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Basho is looking for a &amp;#8220;foolish and hungry Java engineer who wants to branch out into other languages as well.&amp;#8221; If this is you, get in touch with &lt;strong&gt;dizzyd@basho.com&lt;/strong&gt;.&lt;/li&gt;
	&lt;li&gt;Basho Developer Scott Lystig Fritchie will be giving two talks at the Erlang User Conference talking place in Stockholm this week.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;https://www.erlang-factory.com/conference/ErlangUserConference2011/speakers/ScottLystigFritchie&quot;&gt;Details on his talks here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;New Bugs and Issues&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;https://issues.basho.com/show_bug.cgi?id=1269&quot;&gt;1269 &amp;#8211; JS Built-Ins don&amp;#8217;t handle tombstones&lt;/a&gt;&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;https://github.com/basho/riak_wiki/issues/204&quot;&gt;204 (Wiki) &amp;#8211; Better documentation for basic_quorum and not_foundok bucket props&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content:encoded>
	<dc:date>2011-10-31T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://recap.basho.com/2011/10/28/Riak-Recap-for-October-21-27">
	<title>Riak Recap Blog: Riak Recap for October 21 - 27</title>
	<link>http://recap.basho.com/2011/10/28/Riak-Recap-for-October-21-27</link>
	<content:encoded>&lt;p&gt;&lt;em&gt;Posted on October 28, 2011&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Afternoon, Evening, Morning to All&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s an action-packed Recap to cover the last few days: new code, jobs, docs, and more.&lt;/p&gt;
&lt;p&gt;Also, make sure you make it to the bottom of this one as we&amp;#8217;ve added some new content.&lt;/p&gt;
&lt;p&gt;Enjoy, and have a great weekend.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://recap.basho.com/feed/twitter.com/pharkmillups&quot;&gt;Mark&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Riak Recap for October 21 &amp;#8211; 27&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;The team at SEOMoz wrote a great blog post about how and why they are using Riak, and what they&amp;#8217;ve learned in the process. (Big thanks to Jeff and the rest of the team for taking the time to publish this post!)&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://devblog.seomoz.org/2011/10/using-riak-for-ranking-collection/&quot;&gt;Read here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;A short piece about Riak appeared in gihyo.jp&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://gihyo.jp/dev/clip/01/orangenews/vol65/0002&quot;&gt;Read here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Mark Cavage released some docs to go along with his ldapjs-riak code. Thanks, Mark!&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://mcavage.github.com/node-ldapjs-riak/&quot;&gt;Read here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;We merged a sizable contribution from Greg Stein to the Python Client. He&amp;#8217;s been doing some great work to improve connection management. Thanks, Greg!&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;https://github.com/basho/riak-python-client/commit/34befab6f89c6baa089daaf575e4c195302016aa&quot;&gt;Code here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Q: Node left cluster before handing off all data. How can I resolve?&lt;br /&gt;
  A: &lt;a href=&quot;https://help.basho.com/entries/20580987-node-left-cluster-before-handing-off-all-data-how-can-i-resolve#overview&quot;&gt;Here&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;Q: Spent some solid time reading about riak search this morning. It looks pretty awesome theoretically. Can it stand 1 billion documents? (via @alexdong)&lt;br /&gt;
&amp;#8594; A: Yes.&lt;/li&gt;
	&lt;li&gt;Clint Shryock is looking for some help naming a new Riak project.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://twitter.com/#!/ctshryock/statuses/129996481485733888&quot;&gt;Details here&lt;/a&gt; (Best suggestion is getting a t-shirt from me.)&lt;/li&gt;
	&lt;li&gt;A few great job opportunities to pass along:&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://www.digital-science.com&quot;&gt;Digital Science&lt;/a&gt; is looking to hire Python Developers in or around the London area with Riak and/or RabbitMQ experience to work on some of their metrics and data analytics initiatives. Get in touch with c.trasande@digital-science.com for more information.&lt;br /&gt;
&amp;#8594; Equifax is hiring a Senior Software Engineer in Virginia with Riak experience. &lt;a href=&quot;http://www.careerbuilder.com/JobSeeker/Jobs/JobDetails.aspx?ipath=EXGOO&amp;siteid=CBSIMPLYHIRED&amp;Job_DID=J3G2GT6NZJF24HDGFCL&quot;&gt;Details here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Recent Bugs&lt;br /&gt;
As I mentioned above, we&amp;#8217;ve added some new content to the Recap. While we do make bugs public at issues.basho.com, but we thought it would be worthwhile to send along the newest issues in the Recap. So, look for new bugs to be listed and linked in future Recaps. Here&amp;#8217;s the first installment:&lt;br /&gt;
&amp;#8594; 1265: &lt;a href=&quot;https://issues.basho.com/show_bug.cgi?id=1265&quot;&gt;eleveldb not opened with configuration options from environment&lt;/a&gt;  &lt;br /&gt;
&amp;#8594; 1263: &lt;a href=&quot;https://issues.basho.com/show_bug.cgi?id=1263&quot;&gt;Bitcask-backed vnodes handle requests while dropping -&lt;/a&gt;&lt;br /&gt;
&amp;#8594; 1261: &lt;a href=&quot;https://issues.basho.com/show_bug.cgi?id=1261&quot;&gt;Pipe mapreduce jobs fail in mixed 1.0.0/1.0.1 clusters&lt;/a&gt;&lt;br /&gt;
&amp;#8594; 1260: &lt;a href=&quot;https://issues.basho.com/show_bug.cgi?id=1260&quot;&gt;Riak search does not return an error if you try to search for terms that are not indexed&lt;/a&gt;&lt;br /&gt;
&amp;#8594; 1259: &lt;a href=&quot;https://issues.basho.com/show_bug.cgi?id=1259&quot;&gt;Luwak returns 400 (bad request) response to &lt;span class=&quot;caps&quot;&gt;HTTP&lt;/span&gt;/1.1 connection right after successful &lt;span class=&quot;caps&quot;&gt;PUT&lt;/span&gt; request&lt;/a&gt;&lt;br /&gt;
&amp;#8594; 1258: &lt;a href=&quot;https://issues.basho.com/show_bug.cgi?id=1258&quot;&gt;Avoid {case_clause, ok} errors when vnode backend fails to start&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content:encoded>
	<dc:date>2011-10-28T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://recap.basho.com/2011/10/21/Riak-Recap-for-October-19-20">
	<title>Riak Recap Blog: Riak Recap for October 19 - 20</title>
	<link>http://recap.basho.com/2011/10/21/Riak-Recap-for-October-19-20</link>
	<content:encoded>&lt;p&gt;Afternoon, Evening, Morning To All -&lt;/p&gt;
&lt;p&gt;Short Recap for today.&lt;/p&gt;
&lt;p&gt;Also &amp;#8211; No Recap this coming Monday or Wednesday. Feel free to put one together and send it along to the &lt;a href=&quot;http://lists.basho.com/mailman/listinfo/riak-users_lists.basho.com&quot;&gt;list&lt;/a&gt; if you&amp;#8217;re feeling inspired.&lt;/p&gt;
&lt;p&gt;Enjoy, and have a great weekend.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://recap.basho.com/feed/twitter.com/pharkmillups&quot;&gt;Mark&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Riak Recap for October 19 &amp;#8211; 20&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Andres Almiray released version 0.3 of the Griffon plugin for Riak. Thanks, Andres!&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;https://twitter.com/#!/theaviary/statuses/127416627770826753&quot;&gt;Details here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Soren Hansen has a new project up on Launchpad called Riakalchemy &amp;#8211; an object mapper for Riak (written in Python). Thanks, Soren!&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;https://launchpad.net/riakalchemy&quot;&gt;Code here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Another reminder about the Riak Meetup happening in Mountain View on November 1&amp;#8230;&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://www.meetup.com/San-Francisco-Riak-Meetup/events/36310112/&quot;&gt;Details and registration here&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content:encoded>
	<dc:date>2011-10-21T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://www.themarkphillips.com//2011/10/19/Quick-Survey-For-Open-Source-Developers">
	<title>themarkphillips: Survey For Open Source Developers About Mailing List Expectations</title>
	<link>http://www.themarkphillips.com//2011/10/19/Quick-Survey-For-Open-Source-Developers.html</link>
	<content:encoded>&lt;p&gt;&lt;strong&gt;October 19, 2011&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I spend a lot of time with &lt;a href=&quot;http://lists.basho.com/mailman/listinfo/riak-users_lists.basho.com&quot;&gt;Riak&amp;#8217;s Mailing List&lt;/a&gt;. It&amp;#8217;s part of my job, but I also love it. Mailing lists are one of the primary channels of communication, idea sharing, problem solving, and community building for open source projects, so it&amp;#8217;s essential that stewards of a project take time to nurture and grow them.&lt;/p&gt;
&lt;p&gt;Among the things that keep me up at night are issues that come into the mailing list and go without getting some type of meaningful response. It pains me when questions or issues go unanswered or unaddressed. Developers have too many choices for solid, functional open source offerings these days in just about every part of their stack. For us not to value their participation and usage, and for a community to not be responsive, means they run the risk of losing newcomers and existing users. And the glut of other real-time technologies out there means that people just expect expedient responses from things like mailing lists (even though they are meant to be &amp;#8220;lazy&amp;#8221; communication channels).&lt;/p&gt;
&lt;p&gt;The Basho team does our best to answer as much as we can (time-permitting), but, inevitably there will be some orphaned issues. And we look to the &lt;a href=&quot;http://wiki.basho.com&quot;&gt;Riak&lt;/a&gt; community to answer a lot of the questions and issues that come in, too; if we were the only developers who were capable of or willing to answer mailing list questions, what kind of community would we be building?&lt;/p&gt;
&lt;p&gt;With that in mind, I thought a short survey about what people expect from mailing lists would be an effective way to gather some data. (I&amp;#8217;ve had success in the past &lt;a href=&quot;http://www.themarkphillips.com/2011/02/03/Why-Do-People-Watch-Code-Survey-Results-Edition.html&quot;&gt;with another short survey&lt;/a&gt;.) I&amp;#8217;m hoping to get a better feel for, among other things, the level of urgency with which we should approach issues and questions on the list.  I&amp;#8217;m also quite interested in whether people actually use mailing lists or not. This data will help Basho do things better for our community (and perhaps other communities will benefit from the data, too), so we appreciate your time and responses. I&amp;#8217;ve also included a section at the bottom of the survey for anyone who wants to do some venting.&lt;/p&gt;
&lt;p&gt;Before you get started, a few things to keep in mind:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;For question 1, I understand that there are a wide variety of issues and questions that people send to mailing lists. &amp;#8220;Help, my cluster crashed and I&amp;#8217;ve lost my data!&amp;#8221; is more time-sensitive and pressing than &amp;#8220;I can&amp;#8217;t get the Python client to connect on my test cluster.&amp;#8221; For the purposes of this survey, let&amp;#8217;s consider &amp;#8220;new issue or question&amp;#8221; &lt;em&gt;something pressing that impacts your production environment but doesn&amp;#8217;t take your app out of production&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
	&lt;li&gt;For question 2, &amp;#8220;responsive&amp;#8221; is a subjective term and people have their own definitions of it. Let&amp;#8217;s call a mailing list &amp;#8220;responsive&amp;#8221; when &lt;em&gt;you&amp;#8217;ve had a meaningful interaction with a person or persons on the mailing list that enabled you to resolve or make non-trivial progress on your question or issue.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;#8217;ll make the data public after a few days so you can scrutinize it. Thanks again for your help.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Update&lt;/strong&gt;: &lt;a href=&quot;http://news.ycombinator.com/item?id=3131109&quot;&gt;Link to Hacker News Comments&lt;/a&gt;&lt;/em&gt; (upvotes are encouraged)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://twitter.com/#!/pharkmillups&quot;&gt;Mark&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Loading&amp;#8230;&lt;/p&gt;</content:encoded>
	<dc:date>2011-10-19T07:00:00+00:00</dc:date>
</item>
<item rdf:about="http://recap.basho.com/2011/10/19/Riak-Recap-for-October-16-17">
	<title>Riak Recap Blog: Riak Recap for October 17 - 18</title>
	<link>http://recap.basho.com/2011/10/19/Riak-Recap-for-October-16-17</link>
	<content:encoded>&lt;p&gt;&lt;em&gt;Posted on October 19, 2011&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Evening, Morning, Afternoon To All -&lt;/p&gt;
&lt;p&gt;Big Recap for today: new code, conferences, blog posts, slides, and more.&lt;/p&gt;
&lt;p&gt;Enjoy.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://recap.basho.com/feed/twitter.com/pharkmillups&quot;&gt;Mark&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Riak Recap for October 17 &amp;#8211; 18&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Jeffrey K. Eliasen wrote a short post on setting up Riak. Thanks, Jeffrey!&lt;br /&gt;
&amp;#8594;  &lt;a href=&quot;http://jeff.jke.net/2011/10/09/setting-riak&quot;&gt;Read here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Diego Castorina wrote an extensive overview post about Riak. Thanks, Diego!&lt;br /&gt;
&amp;#8594;  &lt;a href=&quot;http://a-developer-life.blogspot.com/2011/10/riak-key-value-store-with-configurable.html&quot;&gt;Read here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Andrzej Kajetanowicz fixed a typo in the Erlang client documentation. Thanks, Andrzej!&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;https://github.com/basho/riak-erlang-client/pull/39&quot;&gt;PR here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Basho is throwing a Riak 1.0 Release Party in San Francisco on Nov&lt;br /&gt;
8th. If you&amp;#8217;re in the area, we want you here.&lt;br /&gt;
&amp;#8594;  &lt;a href=&quot;http://www.meetup.com/San-Francisco-Riak-Meetup/events/37997632/&quot;&gt;Details here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;ldapjs-riak v0.1.7 was released by Mark Cavage.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://search.npmjs.org/#/ldapjs-riak&quot;&gt;Details here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;A short piece on Riak appeared on sourceforge.jp&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://sourceforge.jp/magazine/11/09/28/1051240&quot;&gt;Read here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;The slides from &lt;span class=&quot;caps&quot;&gt;GOTO&lt;/span&gt; Amsterdam and Aarhus are online. Three great Riak-related slides decks to pass along:&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://gotocon.com/dl/goto-aarhus-2011/slides/KrestenKrabThorup_BringingRiakToTheMobilePlatform.pdf&quot;&gt;Bring Riak to the Mobile Platform&lt;/a&gt;&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://gotocon.com/dl/goto-aarhus-2011/slides/JustinSheehy_EmbracingConcurrencyAtScale.pdf&quot;&gt;Embracing Concurrency at Scale&lt;/a&gt; &lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://gotocon.com/dl/goto-aarhus-2011/slides/KrestenKrabThorup_CaseStudyRiakOnDrugsandTheOtherWayAround.pdf&quot;&gt;Riak on Drugs &amp;#8211; and the Other Way Around&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Basho is holding a webinar on October 25th all about the querying enhancements that were part of 1.0.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://info.basho.com/enhancements.html&quot;&gt;Register here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;We merged a handful of contributions to the Python Client from Soren Hansen. Thanks, Soren!&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;https://github.com/basho/riak-python-client/commits/master&quot;&gt;Latest commits here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;For anyone in or around the Washington, DC area: the DC Erlang Meetup Group is putting on a one day event on December 3rd called ErlangDC. Basho is proud to be sponsoring, and we&amp;#8217;ll also be giving a few talks.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://erlangdc.com&quot;&gt;Details here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Mark Smith released a Nagios plugin for Riak. Thanks, Mark!&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;https://github.com/xb95/nagios-plugins&quot;&gt;Code here&lt;/a&gt; &lt;br /&gt;
&amp;#8594; This is also a great time to remind people of the &lt;a href=&quot;http://bit.ly/oc7nn3&quot;&gt;Monitoring, Management, and &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; Tools section of the Wiki&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;</content:encoded>
	<dc:date>2011-10-19T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://recap.basho.com/2011/10/17/Riak-Recap-for-Oct-12-16">
	<title>Riak Recap Blog: Riak Recap for October 12 - 16</title>
	<link>http://recap.basho.com/2011/10/17/Riak-Recap-for-Oct-12-16</link>
	<content:encoded>&lt;p&gt;&lt;em&gt;Posted on October 17, 2011&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Afternoon, Evening, Morning to All -&lt;/p&gt;
&lt;p&gt;Great Recap for today (especially for our RabbitMQ fans): new code, talks, slides, and much more.&lt;/p&gt;
&lt;p&gt;Enjoy.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://recap.basho.com/feed/twitter.com/pharkmillups&quot;&gt;Mark&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Riak Recap for October 12 &amp;#8211; 16&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Clipboard.com, heavy Riak/Search users and contributors, rolled their service out of stealth mode last week. Congratulations to the team!&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://blog.clipboard.com/2011/10/13/Hello-World&quot;&gt;Details here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Alvaro Videla (@old_sound) released a RabbitMQ plugin that uses Bitcask as a storage backend. Thanks, Alvaro!&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;https://twitter.com/old_sound/status/124152414914875392&quot;&gt;Code and details here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Ben Murphy is tinkering with counters in Riak. Very cool stuff. Thanks for releasing, Ben!&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;https://github.com/benmmurphy/ecnty&quot;&gt;Code here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;The video of the &amp;#8220;Scaling at ShowYou&amp;#8221; talk that John Muellerleile (@jrecursive) gave a few weeks back at Boundary HQ is now online.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://blog.boundary.com/2011/10/11/Boundary-Tech-Talk-1.html&quot;&gt;Watch here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;We merged a contribution from Chris Umbel to the Java Client. Thanks, Chris!&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;https://github.com/basho/riak-java-client/pull/66&quot;&gt;Details here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Yosuke Hara gave a Riak presentation at a Python Hack-a-thon over the weekend. Thanks, Yosuke!&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://yosuke-perspective.blogspot.com/2011/10/python-hack-thon-introduce-to-riak.html&quot;&gt;Slides here on his blog&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;It looks like Jon Brisbin had a busy, productive weekend with Riak and RabbitMQ&amp;#8230; Thanks, Jon!&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://twitter.com/#!/j_brisbin/status/125942119151058945&quot;&gt;His Riak/RabbitMQ Post-commit hook is now updated to 1.0&lt;/a&gt;. &lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://twitter.com/#!/j_brisbin/status/125955392890089473&quot;&gt;He also updated his custom Rabbit/Riak exchange&lt;/a&gt;.&lt;br /&gt;
&amp;#8594; And, if you&amp;#8217;re going to be in Chicago for Spring 2GX 2011 at the end of this month, &lt;a href=&quot;http://www.springone2gx.com/conference/chicago/2011/10/speakers/jon_brisbin&quot;&gt;you can see Jon talk all about this code and how he&amp;#8217;s using it&lt;/a&gt;.&lt;br /&gt;
&amp;#8594; This would also be a great time to point out &lt;a href=&quot;http://wiki.basho.com/Community-Developed-Libraries-and-Projects.html#Riak-and-RabbitMQ&quot;&gt;the Riak and RabbitMQ section on the wiki&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;</content:encoded>
	<dc:date>2011-10-17T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://recap.basho.com/2011/10/12/Riak-Recap-for-October-10-11">
	<title>Riak Recap Blog: Riak Recap for October 10 - 11</title>
	<link>http://recap.basho.com/2011/10/12/Riak-Recap-for-October-10-11</link>
	<content:encoded>&lt;p&gt;&lt;em&gt;Posted on October 12, 2011&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Evening, Morning, Afternoon to All -&lt;/p&gt;
&lt;p&gt;Greetings from Amsterdam.&lt;/p&gt;
&lt;p&gt;For today&amp;#8217;s Recap: new code, jobs, and much more.&lt;/p&gt;
&lt;p&gt;Enjoy.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://recap.basho.com/feed/twitter.com/pharkmillups&quot;&gt;Mark&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Riak Recap for October 10 &amp;#8211; 11&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;The crew at Thoughtleadr is working on a Haskell Client that might be of interest to some of you. (Did I mention they are hiring?)&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;https://github.com/ThoughtLeadr/Riak-Haskell-HTTP-Client&quot;&gt;Code here on (the newly-redesigned) GitHub&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;There&amp;#8217;s a new feature request from Teemu Antti-Poika&amp;#8230;&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://features.basho.com/entries/20526696-riak-queue&quot;&gt;Riak Queue?&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Kyle Kingsbury wrote a short, graphical blog post about switching to 1.0&amp;#8217;s enhanced MapReduce system.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://aphyr.com/journals/show/riak-pipe-mapreduce&quot;&gt;Read here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Some great jobs to pass along:&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;https://twitter.com/#!/tedc/status/123779338486300672&quot;&gt;Immediate opening to work on Mahout/Hadoop and SQLSvr &amp;amp; Riak in Newtown SQ, PA&lt;/a&gt;.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://hire.jobvite.com/CompanyJobs/Careers.aspx?k=Job&amp;c=qM69VfwG&amp;j=oZ5MVfwv&quot;&gt;Extole is hiring&lt;/a&gt; a Senior Ruby Developer with Riak, Mongo, or Redis skills.  &lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://hire.jobvite.com/CompanyJobs/Careers.aspx?k=Job&amp;c=qAX9Vfwl&amp;j=o4yTVfwa&quot;&gt;R/GA Media is hiring&lt;/a&gt; a Lead Scalable Systems Architect in NY, NY to work with Riak.&lt;/li&gt;
	&lt;li&gt;Riak&amp;#8217;s Java Client just turned 1.0!&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://lists.basho.com/pipermail/riak-users_lists.basho.com/2011-October/006034.html&quot;&gt;Details here&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content:encoded>
	<dc:date>2011-10-12T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://recap.basho.com/2011/10/10/Riak-Recap-for-October-5-9">
	<title>Riak Recap Blog: Riak Recap for October 5 - 9</title>
	<link>http://recap.basho.com/2011/10/10/Riak-Recap-for-October-5-9</link>
	<content:encoded>&lt;p&gt;Evening, Morning, Afternoon to All -&lt;/p&gt;
&lt;p&gt;Greetings from Aarhus.&lt;/p&gt;
&lt;p&gt;For today&amp;#8217;s Recap: talks, meetups, and more.&lt;/p&gt;
&lt;p&gt;Enjoy.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/pharkmillups&quot;&gt;Mark&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Riak Recap for October 5 &amp;#8211; 9&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;For anyone heading to &lt;span class=&quot;caps&quot;&gt;GOTO&lt;/span&gt; Aarhus and/or Amsterdam this week, Basho will be in attendance in the form of myself, Justin Sheehy, Steve Vinoski, and Martin Schneider. Ping one (or all) of us if you&amp;#8217;re in town and want to talk Riak, databases, or open source. We are also giving two talks:&lt;br /&gt;
&amp;#8594; In addition to chairing the Modern Databases Track, Justin will be talking about &lt;a href=&quot;http://gotocon.com/aarhus-2011/presentation/Embracing%20Concurrency%20At%20Scale&quot;&gt;Embracing Concurrency at Scale&lt;/a&gt; on Wednesday. &lt;br /&gt;
&amp;#8594; Steve will be giving the closing talk on Thursday in Amsterdam called &lt;a href=&quot;http://gotocon.com/amsterdam-2011/presentation/What%20They%20Never%20Told%20You%20About%20Innovation&quot;&gt;What They Never Told You About Innovation&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;Basho Developer &amp;#8220;Rusty Klophaus&amp;#8221;https://twitter.com/rustyio will be giving a talk at the upcoming Washington, DC Erlang Group on October 17th.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://www.meetup.com/erlang/events/35518252&quot;&gt;Details here&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;The Riak Feature Request Forum has seen a good amount of action since it went live last week. This is awesome. Keep it coming.&lt;br /&gt;
&amp;#8594; Check out the latest discussions and add your own &lt;a href=&quot;http://features.basho.com&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;Basho has a redesigned website!&lt;br /&gt;
&amp;#8594; Check it out &lt;a href=&quot;http://basho.com&quot;&gt;here&lt;/a&gt;. &lt;br /&gt;
&amp;#8594; Also, the &lt;a href=&quot;http://basho.com/community&quot;&gt;community section of Basho.com&lt;/a&gt; is coming along quite nicely but I would love to get feedback from any interested parties on how we could make it more useful.&lt;/li&gt;
	&lt;li&gt;Another reminder about the Riak Meetup happening on Nov. 1 at the Bump offices in Mountain View.&lt;br /&gt;
&amp;#8594; Details and registration &lt;a href=&quot;http://www.meetup.com/San-Francisco-Riak-Meetup/events/36310112&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;One great job to pass along:&lt;br /&gt;
&amp;#8594; Apollo Group is hiring a Senior Java Developer in the San Jose area. Details &lt;a href=&quot;http://www.careerbuilder.com/JobSeeker/Jobs/JobDetails.aspx?ipath=EXGOO&amp;siteid=CBSIMPLYHIRED&amp;Job_DID=J3H09T79BD6F8JV0HC5&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;</content:encoded>
	<dc:date>2011-10-10T00:00:00+00:00</dc:date>
</item>
<item rdf:about="tag:basho.com,2011-10-05:/blog/technical/2011/10/05/Remembering-Steve-Jobs/">
	<title>Basho Technical Blog: Remembering Steve Jobs</title>
	<link>http://basho.com/blog/technical/2011/10/05/Remembering-Steve-Jobs/</link>
	<content:encoded>&lt;p&gt;&lt;strong&gt;October 5, 2011&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Our worlds have been forever changed by a man who refused to accept the status quo and believed that he could change the world. Not only did he change the world, he made others believe that they could do the same. Basho exists because of Steve Jobs and his vision to change the world. Tonight we are all saddened and mourning the loss of a hero and visionary that we all considered great. Our hearts go out to his family and friends.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The Employees of Basho Technologies&lt;/em&gt;&lt;/p&gt;</content:encoded>
	<dc:date>2011-10-05T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://recap.basho.com/2011/10/05/Riak-Recap-For-October-3-4">
	<title>Riak Recap Blog: Riak Recap for October 3 - 4</title>
	<link>http://recap.basho.com/2011/10/05/Riak-Recap-For-October-3-4</link>
	<content:encoded>&lt;p&gt;Evening, Morning, Afternoon to All -&lt;/p&gt;
&lt;p&gt;Short Recap for today: a blog post, new meetup, and more.&lt;/p&gt;
&lt;p&gt;Sent from my MacBook Pro to yours, or your iPhone, or your iPad, or your iPod touch. &lt;span class=&quot;caps&quot;&gt;RIP&lt;/span&gt; Steve.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://recap.basho.com/feed/twitter.com/pharkmillups&quot;&gt;Mark&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Riak Recap for October 3 &amp;#8211; 4&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Basho Developer Advocate Greg Burd wrote a lengthy and content-rich piece on NoSQL for &lt;span class=&quot;caps&quot;&gt;USENIX&lt;/span&gt;. &lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://www.usenix.org/publications/login/2011-10/openpdfs/Burd.pdf&quot;&gt;Read here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;The crew over at Canvas Hosting wrote a great overview piece about Riak. &lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://blog.canvashosting.com/post/10766673643/rock-out-riak&quot;&gt;Read here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;We announced a Riak Meetup in Mountain View happening on November 1st. Will Moss and the Bump Team will be giving an overview of how they use Riak and also share some details on a custom Haskell object proxy they&amp;#8217;ve written. &lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://www.meetup.com/San-Francisco-Riak-Meetup/events/36310112/&quot;&gt;Details and registration here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Greg Pascale and the crew at Clipboard &lt;a href=&quot;http://twitter.com/#!/gregpascale/statuses/121690312925122560&quot;&gt;successfully performed a rolling upgrade to 1.0 running LevelDB from Bitcask&lt;/a&gt;. I was wondering if anyone else had details (good or bad) on upgrades they&amp;#8217;ve done to 1.0 or from Bitcask to LevelDB. Any and all info is valuable. Email &lt;strong&gt;mark@basho.com&lt;/strong&gt; with details.&lt;/li&gt;
&lt;/ol&gt;</content:encoded>
	<dc:date>2011-10-05T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://recap.basho.com/2011/10/03/Riak-Recap-for-September-28-October-02">
	<title>Riak Recap Blog: Riak Recap for September 28 - October 02</title>
	<link>http://recap.basho.com/2011/10/03/Riak-Recap-for-September-28-October-02</link>
	<content:encoded>&lt;p&gt;&lt;em&gt;Posted on October 02, 2011&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Evening, Morning, Afternoon to All -&lt;/p&gt;
&lt;p&gt;For today&amp;#8217;s Recap: new code, talks, slides, jobs, and more.&lt;/p&gt;
&lt;p&gt;Enjoy.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://recap.basho.com/feed/twitter.com/pharkmillups&quot;&gt;Mark&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Riak Recap for September 28 &amp;#8211; October 2&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;The slides from the Riak training that Ian Plosker and Sean Cribbs delivered last week are online.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://twitter.com/#!/DstroyAllModels/status/119432353029431297&quot;&gt;Check them out here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;There was some great discussion on Hacker News following the official release of Riak 1.0.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://news.ycombinator.com/item?id=3058495&quot;&gt;Read and participate here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;The Riak Homebrew recipe was updated to 1.0. (Thanks, Bryce!)&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;https://twitter.com/#!/BonzoESC/status/120206964683845632&quot;&gt;Commit here on GitHub&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Justin Calleja wrote a blog post called &amp;#8220;Erlang transport test drive&amp;#8221; that demonstrates how to use David Dossot&amp;#8217;s Erlang transport for Mule (using a Riak-backed demo app). (Thanks, Justin!)&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://ricston.com/blog/?p=1823&quot;&gt;Read here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Basho is holding a webinar all about 1.0&amp;#8217;s new query-related features and functionality.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://ht.ly/6Mr4y&quot;&gt;Registration and details here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;For anyone in San Francisco: there will be Tech Talk this Wednesday at the Boundary offices. John M will be giving details on the Riak-backed app they have running at ShowYou (and the Scalang talk definitely won&amp;#8217;t disappoint).&lt;br /&gt;
&amp;#8594; Seats are limited. &lt;a href=&quot;http://www.meetup.com/Boundary-Tech-Talks/events/35972122/&quot;&gt;Details here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Kyle Kingsbury released new version of Risky.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;https://twitter.com/#!/rubygems/statuses/121031334251601920&quot;&gt;Latest here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;A few great jobs to pass along:&lt;br /&gt;
&amp;#8594; Synacor &lt;a href=&quot;http://jobs.arstechnica.com/list/1123/&quot;&gt;is hiring a Web Software Architect in Buffalo&lt;/a&gt;, NY to work with Riak.&lt;br /&gt;
&amp;#8594; Root Labs, based in Oakland, &lt;a href=&quot;http://www.rootlabs.com/developer-job.html&quot;&gt;is hiring a Lead Engineer&lt;/a&gt; with a good understanding of Riak and Redis.&lt;/li&gt;
&lt;/ol&gt;</content:encoded>
	<dc:date>2011-10-03T00:00:00+00:00</dc:date>
</item>
<item rdf:about="tag:basho.com,2011-09-30:/blog/technical/2011/09/30/Riak-1-dot-0-is-Official/">
	<title>Basho Technical Blog: Riak 1.0 Is Officially Released!</title>
	<link>http://basho.com/blog/technical/2011/09/30/Riak-1-dot-0-is-Official/</link>
	<content:encoded>&lt;p&gt;&lt;strong&gt;September 30, 2011&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We are absolutely thrilled to report that as of today, Riak 1.0 is officially released and ready for your production applications!&lt;/p&gt;
&lt;p&gt;Riak 1.0 packages are available. &lt;a href=&quot;http://downloads.basho.com/riak/CURRENT/&quot;&gt;Go download one&lt;/a&gt;. And &lt;a href=&quot;https://github.com/basho/riak/blob/1.0/RELEASE-NOTES.org&quot;&gt;then go read the release notes&lt;/a&gt;, because they are extensive and full of useful information highlighting the great work Basho has done since the last release.&lt;/p&gt;
&lt;p&gt;There is already a lot of literature out there on the release, so here are the essentials to get you started.&lt;/p&gt;
&lt;h2&gt;The High Level Awesome&lt;/h2&gt;
&lt;p&gt;For those of you who need a refresher on the release, &lt;a href=&quot;http://riak-onedotoh-preview.heroku.com/&quot;&gt;this 1.0 Slide Deck&lt;/a&gt; will give you a quick overview of why you should be excited about it. The big-ticket features are as follows:&lt;/p&gt;
&lt;h3&gt;Secondary Indexing&lt;/h3&gt;
&lt;p&gt;In 1.0 we added the ability to build secondary indexes on your data stored in Riak. We developed this functionality because, quite frankly, people needed a more powerful way to query their data.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://blog.basho.com/2011/09/14/Secondary-Indexes-in-Riak/&quot;&gt;In Depth Blog Post on Secondary Indexes&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.slideshare.net/rklophaus/querying-riak-just-got-easier-introducing-secondary-indices&quot;&gt;High-level Slide Deck&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://wiki.basho.com/Secondary-Indexes.html&quot;&gt;Official Documentation for Secondary Indexes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Riak Pipe And Revamped MapReduce&lt;/h3&gt;
&lt;p&gt;Riak&amp;#8217;s MapReduce functionality isn&amp;#8217;t anything new, but we did a lot of work in this release to make the system more robust, performant, and resistant to failures. Riak Pipe is the new underlying processing layer that powers MapReduce, and you&amp;#8217;ll be seeing a lot of cool features and functionality made possible as a result of it in the near future.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://blog.basho.com/2011/09/19/Riak-Pipe-The-New-Map-Reduce-Power/&quot;&gt;Riak Pipe Blog Post&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/basho/riak_pipe&quot;&gt;Riak Pipe Code on GitHub&lt;/a&gt; (complete with a beautiful &lt;span class=&quot;caps&quot;&gt;README&lt;/span&gt;)&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://wiki.basho.com/MapReduce.html&quot;&gt;MapReduce Documentation on the Riak Wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Lager&lt;/h3&gt;
&lt;p&gt;Usability is a huge focus for us right now, and logging is something that&amp;#8217;s less-than-simple to understand in Erlang applications. To that end, we wrote a new logging framework for Erlang/&lt;span class=&quot;caps&quot;&gt;OTP&lt;/span&gt; called Lager that is shipping with 1.0 and drastically reduces the headaches traditionally associated with Erlang logging and debugging.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://blog.basho.com/2011/07/20/Introducing-Lager-A-New-Logging-Framework-for-ErlangOTP/&quot;&gt;Introducing Lager&lt;/a&gt; (from the Basho Blog)&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/basho/lager&quot;&gt;Lager Code on GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Search Integration&lt;/h3&gt;
&lt;p&gt;Riak Search has been a supported Basho product for several releases now, but until 1.0 you were required to build it as a separate package. In 1.0 we&amp;#8217;ve merged the search functionality into Riak proper.  Enabling it is a simple one line change in a configuration file.  Do this and you&amp;#8217;ve got distributed, full text search capabilities on top of Riak&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://wiki.basho.com/Riak-Search.html&quot;&gt;Riak Search Documentation on the Riak Wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Support for LevelDB&lt;/h3&gt;
&lt;p&gt;Riak provides for pluggable storage backends, and we are constantly trying to improve the options we offer to our users. Google released LevelDB some months back, and we started to investigate it as a possible addition to our suite of supported backends. After some rigorous testing, what we found is that LevelDB had some attractive functionality and performance characteristics compared to our existing offerings (mainly Innostore), and it will be shipping in 1.0. Bitcask is still the default storage engine, but LevelDB, aside from being an alternative for key/value storage, is being used as the backend behind the new Secondary Indexing functionality.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://blog.basho.com/2011/07/01/Leveling-the-Field/&quot;&gt;Leveling The Field&lt;/a&gt; (from the Basho Blog)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Cluster Membership&lt;/h3&gt;
&lt;p&gt;One of the most powerful components of Riak is riak_core, the distributed systems framework that, among many others things, enables Riak to scale horizontally. Riak&amp;#8217;s scalability and operational simplicity are of paramount importance to us, and we are constantly looking to make this code and system even better. With that in mind, we did some major work in 1.0 to improve upon our cluster membership system and are happy to report that it&amp;#8217;s now more stable and scalable than ever.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://blog.basho.com/2011/09/09/Riak-Cluster-Membership-Overview/&quot;&gt;Riak Cluster Membership Overview&lt;/a&gt; (from the Basho Blog)&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://blog.basho.com/2011/04/12/Where-To-Start-With-Riak-Core/&quot;&gt;Where To Start With Riak Core&lt;/a&gt; (from the Basho Blog)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;And So Much More &amp;#8230;&lt;/h3&gt;
&lt;p&gt;Riak 1.0 is a massive accomplishment, and the features and code listed above are just the beginning of what this release has to offer. Take some time to &lt;a href=&quot;https://github.com/basho/riak/blob/1.0/RELEASE-NOTES.org&quot;&gt;read the lengthy release notes&lt;/a&gt; and you&amp;#8217;ll see what we mean.&lt;/p&gt;
&lt;p&gt;These improvements are many months in the making, and the bug fixes, new features, and added functionality make Riak (in our humble opinion) the best open source database available today.&lt;/p&gt;
&lt;h2&gt;Thank You, Community!&lt;/h2&gt;
&lt;p&gt;We did our best to ensure that the community was as big a part of this release as possible, and there&amp;#8217;s no way the code and features would be this rock-solid without your help. Thanks for your usage, support, testing, debugging, and help with spreading the word about Riak and 1.0.&lt;/p&gt;
&lt;p&gt;And 1.0 is just the beginning. We&amp;#8217;ll continue to refine and build Riak over the coming months, and we would love for you to be a part of it if you&amp;#8217;re not already. Some ways to get involved:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://downloads.basho.com/riak/CURRENT&quot;&gt;Download Riak on Your Preferred Platform&lt;/a&gt; and then &lt;a href=&quot;http://wiki.basho.com/Installation.html&quot;&gt;install it&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://lists.basho.com/mailman/listinfo/riak-users_lists.basho.com&quot;&gt;Join The Riak Mailing List&lt;/a&gt; to tell us what you think of the release&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://wiki.basho.com/Riak.html&quot;&gt;Read the Riak Wiki&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/basho/riak&quot;&gt;Watching Riak on GitHub&lt;/a&gt; to stay up-to-date on the latest changes&lt;/li&gt;
	&lt;li&gt;Tell three friend about the release&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks for being a part of Riak!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://twitter.com/#!/basho&quot;&gt;The Basho Team&lt;/a&gt;&lt;/p&gt;</content:encoded>
	<dc:date>2011-09-30T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://recap.basho.com/2011/09/28/Riak-Recap-for-September-26-27">
	<title>Riak Recap Blog: Riak Recap for September 26 - 27</title>
	<link>http://recap.basho.com/2011/09/28/Riak-Recap-for-September-26-27</link>
	<content:encoded>&lt;p&gt;&lt;em&gt;Posted on September 28, 2011&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Afternoon, Evening, Morning to All&lt;/p&gt;
&lt;p&gt;This Recap comes to you live from the front row at Surge, where Sean&lt;br /&gt;
Cribbs and Ian Plokser &lt;a href=&quot;http://dl.dropbox.com/u/4584848/sean-riak-surge.JPG&quot;&gt;are delivering a half-day Riak training to a&lt;br /&gt;
packed house&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Great Recap for today: slides, podcasts, blog posts, and more.&lt;/p&gt;
&lt;p&gt;Enjoy.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://recap.basho.com/feed/twitter.com/pharkmillups&quot;&gt;Mark&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Riak Recap for September 26 &amp;#8211; 27&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;John Muellerleile posted his slides from the &amp;#8220;Scaling ShowYou&amp;#8221; event that happened on Monday night in San Francisco.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;https://twitter.com/jrecursive/status/118696537718132737&quot;&gt;Details and slides here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Jeremiah Peschka is having a banner week in the community:&lt;br /&gt;
&amp;#8594;  &lt;a href=&quot;http://www.brentozar.com/archive/2011/09/different-world-three-use-cases-for-riak/&quot;&gt;He wrote a great blog post about Riak Use Cases&lt;/a&gt;&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://www.dotnetrocks.com/default.aspx?showNum=701&quot;&gt;He was on the .&lt;span class=&quot;caps&quot;&gt;NET&lt;/span&gt; Rocks Podcast talking about the work he and a few others are doing on CorrugatedIron&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;We added The NetCircle to the production users page on the Riak Wiki (h/t to Joe Lambert for making this happen).&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://wiki.basho.com/Who-is-Using-Riak.html#thenetcircle&quot;&gt;Read here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Dr. Dobb&amp;#8217;s wrote a piece on Riak based on the upcoming 1.0 release.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://drdobbs.com/database/231602292&quot;&gt;Read here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;One job to pass along:&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;https://careers-reardencommerce.icims.com/jobs/1874/job&quot;&gt;Rearden Commerce is hiring a Sr. Software Engineer with Riak and&lt;br /&gt;
Redis experience&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;Slightly off-topic but worth mentioning: Yammer, heavy users of Riak and all around awesome software, raised a round of funding. Big congrats to Coda Hale, Ryan Kennedy, and the rest of the team at Yammer!&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://venturebeat.com/2011/09/27/yammer-raises-17m-enterprise-social-networking/&quot;&gt;Read about it here&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;</content:encoded>
	<dc:date>2011-09-28T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://recap.basho.com/2011/09/26/Riak-Recap-September-23-25">
	<title>Riak Recap Blog: Riak Recap for September 23 - 25</title>
	<link>http://recap.basho.com/2011/09/26/Riak-Recap-September-23-25</link>
	<content:encoded>&lt;p&gt;&lt;em&gt;Posted on September 26, 2011&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Evening, Morning, Afternoon to All -&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s a short Recap to kick the week off.&lt;/p&gt;
&lt;p&gt;Enjoy.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://recap.basho.com/feed/twitter.com/pharkmillups&quot;&gt;Mark&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Riak Recap for September 23 &amp;#8211; 25&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Mark Cavage released an update a few days ago to his ldapjs-riak code.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://twitter.com/#!/nodenpm/statuses/117394205319495680&quot;&gt;Details here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Scott Milkens brought his EngineYard AppCloud Riak Cookbooks inline with the 1.0 RC1 release.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://twitter.com/#!/scottmlikens/statuses/118077403389104128&quot;&gt;Details here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Kyle Kingsbury, John Muellerleile, and few others held an event tonight at the ShowYou offices in San Francisco to talk about what technologies they are using in production. Kyle&amp;#8217;s slides made it online already.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://aphyr.com/scaling_at_showyou.pdf&quot;&gt;Check them out there&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content:encoded>
	<dc:date>2011-09-26T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://recap.basho.com/2011/09/23/Riak-Recap-for-September-19-22">
	<title>Riak Recap Blog: Riak Recap for September 19 - 22</title>
	<link>http://recap.basho.com/2011/09/23/Riak-Recap-for-September-19-22</link>
	<content:encoded>&lt;p&gt;&lt;em&gt;Posted on September 23, 2011&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Evening, Morning, Afternoon to All -&lt;/p&gt;
&lt;p&gt;For today&amp;#8217;s Recap: Events, code, slides, and more.&lt;/p&gt;
&lt;p&gt;Enjoy and have a great weekend.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://recap.basho.com/feed/twitter.com/pharkmillups&quot;&gt;Mark&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Riak Recap for September 19 &amp;#8211; 22&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Basho, with the help of various other companies, will be heading up the NoSQL Roadshow taking place in various cities across Europe in November and December. Basho will be represented by Steve Vinoski and Martin Schneider.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://nosqlroadshow.com&quot;&gt;Dates, locations, and details here&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;Susan Potter put the slides online from the &amp;#8220;Dynamo: not just datastores&amp;#8221; talk she delivered at Strangeloop. (It was a great talk.) Thanks, Susan!&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://www.slideshare.net/mbbx6spp/dynamo-not-just-for-datastores&quot;&gt;Check them out here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;We merged a sizable contribution to the Java client from cadement related to Riak Search integration. Thanks, cadement!&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;https://github.com/basho/riak-java-client/pull/32&quot;&gt;Original pull request here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Clint Shryock is giving a Riak talk next week and his slides made it onto GitHub in advance (so I suspect that they are not yet finished). Thanks, Clint!&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;https://github.com/ctshryock/riak-talk&quot;&gt;Take a look here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Anyone going to Surge in Baltimore next week? Let me know if this is you.&lt;/li&gt;
	&lt;li&gt;Jeremiah Peschka and OJ Reeves, along with the help of Matthiew Whitfield, released CorrugatedIron v0.1.3.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://lists.basho.com/pipermail/riak-users_lists.basho.com/2011-September/005734.html&quot;&gt;Details here on the Mailing List&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Two jobs to pass along:&lt;br /&gt;
&amp;#8594; Voxer is hiring Senior Software Engineers in San Francisco to work&lt;br /&gt;
with Riak, Redis, and Node. Details &lt;a href=&quot;http://voxer.com/job/server_software_engineer&quot;&gt;here&lt;/a&gt;.&lt;br /&gt;
&amp;#8594; Comcast&amp;#8217;s &lt;span class=&quot;caps&quot;&gt;NETO&lt;/span&gt; team based in Reston, VA is hiring Engineers with&lt;br /&gt;
Riak experience. Details &lt;a href=&quot;http://careers.diversityinc.com/jobs/detail/41719729?jobId=41719729&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;</content:encoded>
	<dc:date>2011-09-23T00:00:00+00:00</dc:date>
</item>
<item rdf:about="tag:basho.com,2011-09-19:/blog/technical/2011/09/19/Riak-Pipe-The-New-Map-Reduce-Power/">
	<title>Basho Technical Blog: Riak Pipe - the New MapReduce Power</title>
	<link>http://basho.com/blog/technical/2011/09/19/Riak-Pipe-The-New-Map-Reduce-Power/</link>
	<content:encoded>&lt;strong&gt;September 19, 2011&lt;/strong&gt;

&lt;p&gt;A few months ago,
I &lt;a href=&quot;http://lists.basho.com/pipermail/riak-users_lists.basho.com/2011-June/004550.html&quot;&gt;announced&lt;/a&gt;
the opening of &lt;a href=&quot;http://github.com/basho/riak_pipe&quot;&gt;Riak
Pipe&lt;/a&gt;, as well as two goals for the project.  With the upcoming 1.0
release of Riak, we have achieved the first goal: new clusters will
use Riak Pipe to power their MapReduce processing.  Existing clusters
will also be able to migrate to using Riak Pipe, with no changes
needed from the client perspective.&lt;/p&gt;

&lt;p&gt;There are a few reasons you should be excited about running your
MapReduce queries on Riak Pipe.  First and foremost, Riak Pipe is
designed as a work distribution system, and as such, &lt;strong&gt;it is
better able to take advantage of the parallel resources available in
the cluster&lt;/strong&gt;.  One small example of how Riak Pipe achieves
this is simply by splitting the &amp;ldquo;map&amp;rdquo; phase processing
into two steps: fetching the object from Riak KV, and transforming it.
This allows the work of each step to happen in parallel; the next
input will be fetched while the transformation of the last one is in
progress.&lt;/p&gt;

&lt;p&gt;Riak Pipe also recognizes that a cluster's resources are finite,
and that sometimes it's better to delay one pile of work in order to
make progress on another.  Processing phases in Riak Pipe,
called &lt;em&gt;fittings&lt;/em&gt;, provide &lt;strong&gt;backpressure to fittings
upstream&lt;/strong&gt; from them by means of limiting the sizes of their
input queues.  The upstream fittings pause their processing when the
downstream queues are full, &lt;strong&gt;freeing up system
resources&lt;/strong&gt; (or at least not increasing their consumption) to
allow those downstream processes a chance to catch up.&lt;/p&gt;

&lt;p&gt;Input queues are another example of Riak Pipe's parallel resource
use.  &lt;strong&gt;Inter-phase results are delivered directly&lt;/strong&gt; from
a vnode running one stage to the vnode that will process them for the
next stage.  Since they are &lt;strong&gt;not forced through a single,
central process&lt;/strong&gt;, the memory of the entire cluster can be used
to move them around, instead of requiring a single machine's memory to
handle them.&lt;/p&gt;

&lt;p&gt;The KV-object fetching stage of the new Riak Pipe MapReduce system
is also &lt;strong&gt;much more of a well-behaved KV user&lt;/strong&gt;.  That
is, the requests it makes are much more fairly balanced with respect
to regular Riak KV operations (get, put, etc.).  This means MapReduce
on Riak Pipe should have &lt;strong&gt;much less impact on the
performance&lt;/strong&gt; of rest of your Riak use.&lt;/p&gt;

&lt;p&gt;Using Riak Pipe MapReduce is simple.  Make sure that the
setting &lt;code&gt;{mapred_system, pipe}&lt;/code&gt; is in
the &lt;code&gt;riak_kv&lt;/code&gt; section of your
cluster's &lt;code&gt;app.config&lt;/code&gt;, and then &amp;hellip; just send
MapReduce queries over HTTP or Protocol Buffers as you always have.
The results should be the same.  There are a few knobs you can tweak,
which control batching of reduce phase evaluation, but the goal of
this release was a &lt;strong&gt;100% compatible implementation of the
existing MapReduce functionality&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There is much more on the horizon for Riak Pipe, including more
efficiency gains and exposing some of the new processing statistics it
tracks, not to mention exposing more of its functionality beyond Riak
KV's MapReduce.  We're very excited about the future.&lt;/p&gt;

&lt;p&gt;If you would like to learn more about Riak Pipe, in general, and
get involved, I recommend paging through
&lt;a href=&quot;https://github.com/basho/riak_pipe/blob/master/README.org&quot;&gt;
the README&lt;/a&gt; to get an idea of its structure, and then browsing
&lt;a href=&quot;https://github.com/basho/riak_kv/blob/master/src/riak_kv_mrc_pipe.erl&quot;&gt;
the new Riak KV MapReduce code&lt;/a&gt; for some examples.&lt;/p&gt;

&lt;p&gt;-&lt;a href=&quot;http://twitter.com/hobbyist&quot;&gt;Bryan&lt;/a&gt;&lt;/p&gt;</content:encoded>
	<dc:date>2011-09-19T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://recap.basho.com/2011/09/19/Riak-Recap-for-September-16-18">
	<title>Riak Recap Blog: Riak Recap for September 16 - 18</title>
	<link>http://recap.basho.com/2011/09/19/Riak-Recap-for-September-16-18</link>
	<content:encoded>&lt;p&gt;&lt;em&gt;Posted on September 19, 2011&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Afternoon, Evening, Morning To All -&lt;/p&gt;
&lt;p&gt;Today&amp;#8217;s Recap comes to you live from Strange Loop where Susan Potter is currently &lt;a href=&quot;http://recap.basho.com/feed/twitter.com/pharkmillups&quot;&gt;delivering an awesome talk on riak_core&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For today: Blog posts, code, slides, and more.&lt;/p&gt;
&lt;p&gt;Enjoy.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://recap.basho.com/feed/twitter.com/pharkmillups&quot;&gt;Mark&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Riak Recap for September 16 &amp;#8211; 18&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Joseph Lambert wrote a great blog post about why and how he and the team at the NetCircle are using Riak. Thanks, Joseph!&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://www.thenetcircle.com/2011/09/19/using-riak-at-the-netcircle&quot;&gt;Read here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Alexander Sicular contributed a small patch to riak-js.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;https://github.com/frank06/riak-js/pull/88&quot;&gt;Pull request here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;David Koblas contributed a small fix to the Python Client.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;https://github.com/basho/riak-python-client/pull/68&quot;&gt;Pull request here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Bryan Fink wrote a great blog post about MapReduce and Riak Pipe in 1.0.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://blog.basho.com/2011/09/19/Riak-Pipe-The-New-Map-Reduce-Power/&quot;&gt;Read here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Sean Cribbs published the code and slides from his Strange Loop talk he delivered this morning called &amp;#8220;Wrap Your &lt;span class=&quot;caps&quot;&gt;SQL&lt;/span&gt; Head Around Riak MapReduce.&amp;#8221;&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://strangeloop-riak-mapred.heroku.com/&quot;&gt;Slide deck here&lt;/a&gt;&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;https://github.com/seancribbs/strangeloop-riak-mapred&quot;&gt;Code on GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content:encoded>
	<dc:date>2011-09-19T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://recap.basho.com/2011/09/16/Riak-Recap-for-September-14-15">
	<title>Riak Recap Blog: Riak Recap for September 14 - 15</title>
	<link>http://recap.basho.com/2011/09/16/Riak-Recap-for-September-14-15</link>
	<content:encoded>&lt;p&gt;&lt;em&gt;Posted on September 16, 2011&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Afternoon Evening, Morning To All -&lt;/p&gt;
&lt;p&gt;For today&amp;#8217;s Recap: meetups, new production users, jobs, and more.&lt;/p&gt;
&lt;p&gt;Enjoy and have a great weekend.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://recap.basho.com/feed/twitter.com/pharkmillups&quot;&gt;Mark&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Riak Recap for September 14 &amp;#8211; 15&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Riak 1.0.0pre4 is available for download. &lt;br /&gt;
&amp;#8594; Downloads and Release Notes &lt;a href=&quot;http://lists.basho.com/pipermail/riak-users_lists.basho.com/2011-September/005664.html&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Jeff Kirkell is giving a Riak Talk at PhillyDB on Sept. 20. Thanks, Jeff!&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://www.meetup.com/PhillyDB/events/32767442/&quot;&gt;Details here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;We added WorthPoint to the production users page on the wiki. (h/t to &lt;a href=&quot;http://twitter.com/wmacgyver&quot;&gt;Mac Liaw&lt;/a&gt; for making this happen!)&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://wiki.basho.com/Who-is-Using-Riak.html#worthpoint&quot;&gt;Details here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;There&amp;#8217;s a question on StackOverflow about link walking that (at time of writing) is still unanswered for anyone looking to get ambitious over the weekend.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://stackoverflow.com/questions/7440129/link-walking-with-riak-search-for-common-friends&quot;&gt;Here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Clint Shryock will be representing Riak at a NoSQL Smackdown happening on September 28 at the ComoRichWeb meetup in Columbia, MO. Thanks, Clint!&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://comorichweb.posterous.com/next-meetup-nosql-smackdown-september-28th&quot;&gt;Details here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Two great jobs to pass along:&lt;br /&gt;
&amp;#8594; BankSimple is looking for a Data Scientist in Portland, Oregon. &lt;a href=&quot;http://www.ventureloop.com/ventureloop/jobdetail.php?r=f_sh&amp;jobid=78538&quot;&gt;Details here&lt;/a&gt;&lt;br /&gt;
&amp;#8594; CrowdFlower is hiring a Sr. Web Engineer in San Francisco with &amp;#8220;Mongo, Riak, or Couch&amp;#8221; experience. &lt;a href=&quot;http://www.ventureloop.com/ventureloop/jobdetail.php?r=f_sh&amp;jobid=77858&quot;&gt;Details here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Reminder about two great events happening on September 21:&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://riak1dot0nyc.eventbrite.com&quot;&gt;Riak 1.0 Party in &lt;span class=&quot;caps&quot;&gt;NYC&lt;/span&gt;&lt;/a&gt; (almost full, btw)&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://info.basho.com/overview_1.0.html&quot;&gt;Riak 1.0 Overview with Andy Gross and Justin Sheehy&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content:encoded>
	<dc:date>2011-09-16T00:00:00+00:00</dc:date>
</item>
<item rdf:about="tag:basho.com,2011-09-14:/blog/technical/2011/09/14/Secondary-Indexes-in-Riak/">
	<title>Basho Technical Blog: Secondary Indexes in Riak</title>
	<link>http://basho.com/blog/technical/2011/09/14/Secondary-Indexes-in-Riak/</link>
	<content:encoded>&lt;p&gt;&lt;strong&gt;September 14, 2011&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Developers building an application on Riak typically have a love/hate
relationship with Riak’s simple key/value-based approach to storing
data. It’s great that anyone can grok the basics (3 simple operations,
get/put/delete) quickly. It’s convenient that you can store anything
imaginable as an object’s value: an integer, a blob of JSON data, an
image, an MP3. And the distributed, scalable, failure-tolerant
properties that a key/value storage model enables can be a lifesaver
depending on your use case.&lt;/p&gt;

&lt;p&gt;But things get much less rosy when faced with the challenge of
representing alternate keys, one-to-many relationships, or
many-to-many relationships in Riak. Historically, Riak has shifted
these responsibilities to the application developer. The developer is
forced to either find a way to fit their data into a key/value model,
or to adopt a polyglot storage strategy, maintaining data in one
system and relationships in another.&lt;/p&gt;

&lt;p&gt;This adds complexity and technical risk, as the developer is burdened
with writing additional bookkeeping code and/or learning and
maintaining multiple systems.&lt;/p&gt;

&lt;p&gt;That’s why we’re so happy about Secondary Indexes. Secondary Indexes
are the first step toward solving these challenges, lifting the burden
from the backs of developers, and enabling more complex data modeling
in Riak. And the best part is that it ships in our 1.0 release, just a
few weeks from now.&lt;/p&gt;

&lt;h2 id=&quot;how-do-secondary-indexes-work&quot;&gt;How Do Secondary Indexes Work?&lt;/h2&gt;

&lt;p&gt;From an application developer’s perspective, Secondary Indexes allow
you to tag a Riak object with some index metadata, and later retrieve
the object by querying the index, rather than the object’s primary
key.&lt;/p&gt;

&lt;p&gt;For example, let’s say you want to store a user object, accessible by
username, twitter handle, or email address. You might pick the
username as the primary key, while indexing the twitter handle and
email address. Below is a curl command to accomplish this through the
HTTP interface of a local Riak node:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;curl -X POST &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
-H &lt;span class=&quot;s1&quot;&gt;'x-riak-index-twitter_bin: rustyio'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
-H &lt;span class=&quot;s1&quot;&gt;'x-riak-index-email_bin: rusty@basho.com'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
-d &lt;span class=&quot;s1&quot;&gt;'...user data...'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
http://localhost:8098/buckets/users/keys/rustyk
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Previously, there was no simple way to access an object by anything
other than the primary key, the username. The developer would be
forced to “roll their own indexes.” With Secondary Indexes enabled,
however, you can easily retrieve the data by querying the user’s
twitter handle:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# Query the twitter handle...&lt;/span&gt;
curl localhost:8098/buckets/users/index/twitter_bin/rustyio

&lt;span class=&quot;c&quot;&gt;# Response...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;keys&amp;quot;&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;rustyk&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Or the user’s email address:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# Query the email address...&lt;/span&gt;
curl localhost:8098/buckets/users/index/email_bin/rusty@basho.com

&lt;span class=&quot;c&quot;&gt;# Response...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;keys&amp;quot;&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;rustyk&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can change an object’s indexes by simply writing the object again
with the updated index information. For example, to add an index on
Github handle:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;curl -X POST &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
-H &lt;span class=&quot;s1&quot;&gt;'x-riak-index-twitter_bin: rustyio'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
-H &lt;span class=&quot;s1&quot;&gt;'x-riak-index-email_bin: rusty@basho.com'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
-H &lt;span class=&quot;s1&quot;&gt;'x-riak-index-github_bin: rustyio'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
-d &lt;span class=&quot;s1&quot;&gt;'...user data...'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
http://localhost:8098/buckets/users/keys/rustyk
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That’s all there is to it, but that’s enough to represent a variety of
different relationships within Riak.&lt;/p&gt;

&lt;p&gt;Above is an example of assigning an alternate key to an object. But
imagine that instead of a &lt;code&gt;twitter_bin&lt;/code&gt; field, our object had an
&lt;code&gt;employer_bin&lt;/code&gt; field that matched the primary key for an object in our
&lt;code&gt;employers&lt;/code&gt; bucket. We can now look up users by their employer.&lt;/p&gt;

&lt;p&gt;Or imagine a &lt;code&gt;role_bin&lt;/code&gt; field that matched the primary key for an
object in our &lt;code&gt;security_roles&lt;/code&gt; bucket. This allows us to look up all
users that are assigned to a specific security role in the system.&lt;/p&gt;

&lt;h2 id=&quot;design-decisions&quot;&gt;Design Decisions&lt;/h2&gt;

&lt;p&gt;Secondary Indexes maintains Riak’s distributed, scalable, and failure
tolerant nature by avoiding the need for a pre-defined schema, which
would be shared state. Indexes are declared on a per-object basis, and
the index type (binary or integer) is determined by the field’s
suffix.&lt;/p&gt;

&lt;p&gt;Indexing is real-time and atomic; the results show up in queries
immediately after the write operation completes, and all indexing
occurs on the
&lt;a href=&quot;http://wiki.basho.com/Riak-Glossary.html#Partition&quot;&gt;partition&lt;/a&gt; where
the object lives, so the object and its indexes stay in sync. Indexes
can be stored and queried via the HTTP interface or the Protocol
Buffers interface. Additionally, index results can feed directly into
a Map/Reduce operation. And our Enterprise customers will be happy to
know that Secondary Indexing plays well with multi data center
replication.&lt;/p&gt;

&lt;p&gt;Indexes are declared as metadata, rather than an object’s value, in
order to preserve Riak’s view that the value of your object is as an
opaque document. An object can have an unlimited number of index
fields of any size (dependent upon system resources, of course.) We
have stress tested with 1,000 index fields, though we expect most
applications won’t need nearly that many. Indexes do contribute to the
base size of the object, and they also take up their own disk space,
but the overhead for each additional index entry is minimal: the
&lt;a href=&quot;http://wiki.basho.com/Riak-Glossary.html#Vector-Clock&quot;&gt;vector clock&lt;/a&gt;
information (and other metadata) is stored in the object, not in the
index entry. Additionally, the LevelDB backend (and, likely, most
index-capable backends) support prefix-compression, further shrinking
index size.&lt;/p&gt;

&lt;p&gt;This initial release does have some important limitations. Only single
index queries are supported, and only for exact matches or range
queries. The result order is undefined, and pagination is not
supported. While this offers less in the way of ad-hoc querying than
other datastores, it is a solid 80% solution that allows us to focus
future energy where users and customers need it most. (Trust me, we
have many plans and prototypes of potential features. Building
something is easy, building the &lt;strong&gt;right&lt;/strong&gt; thing is harder.)&lt;/p&gt;

&lt;h2 id=&quot;behind-the-scenes&quot;&gt;Behind The Scenes&lt;/h2&gt;

&lt;p&gt;What is happening behind the scenes? A lot, actually.&lt;/p&gt;

&lt;p&gt;At &lt;em&gt;write time&lt;/em&gt;, the system pulls the index fields from the incoming
object, parses and validates the fields, updates the object with the
newly parsed fields, and then continues with the write operation. The
replicas of the object are sent to
&lt;a href=&quot;http://wiki.basho.com/Riak-Glossary.html#Vnode&quot;&gt;virtual nodes&lt;/a&gt; where
the object and its indexes are persisted to disk.&lt;/p&gt;

&lt;p&gt;At &lt;em&gt;query time&lt;/em&gt;, the system first calculates what we call a “covering”
set of partitions. The system looks at how many replicas of our data
are stored and determines the minimum number of partitions that it
must examine to retrieve a full set of results, accounting for any
offline nodes. By default, Riak is configured to store 3 replicas of
all objects, so the system can generate a full result set if it reads
from one-third of the system’s partitions, as long as it chooses the
right set of partitions. The query is then broadcast to the selected
partitions, which read the index data, generate a list of keys, and
send them back to the coordinating node.&lt;/p&gt;

&lt;p&gt;Storing index data is very different from storing key/value data: in
general, any database that stores indexes on a disk would &lt;em&gt;prefer&lt;/em&gt; to
be able to store the index in a contiguous block and in the desired
order–basically getting as near to the final result set as
possible. This minimizes disk movement and other work during a query,
and provides faster read operations. The challenge is that index
values rarely enter the system in the right order, so the database
must do some shuffling at write time. Most databases delay this
shuffling, they write to disk in a slightly sub-optimal format, then
go back and “fix things up” at a later point in time.&lt;/p&gt;

&lt;p&gt;None of Riak’s existing key/value-oriented backends were a good fit
for index data; they all focused on fast key/value access. During the
development of Secondary Indexes we explored other
options. Coincidentally, the Basho team had already begun work to
adapt LevelDB–a low-level storage library from Google–as a storage
engine for Riak KV. LevelDB stores data in a defined order, exactly
what Secondary Indexes needed, and it is actually versatile enough to
manage both the index data AND the object’s value. Plus, it is very
RAM friendly. You can learn more about LevelDB from
&lt;a href=&quot;http://code.google.com/p/leveldb/&quot;&gt;this page&lt;/a&gt; on Google Code.&lt;/p&gt;

&lt;h2 id=&quot;want-to-know-more&quot;&gt;Want To Know More?&lt;/h2&gt;

&lt;p&gt;If you want to learn more about Secondary Indexes, you can read the
slides from my talk at OSCON Data 2011:
&lt;a href=&quot;http://www.slideshare.net/rklophaus/querying-riak-just-got-easier-introducing-secondary-indices&quot;&gt;Querying Riak Just Got Easier&lt;/a&gt;. Alternatively,
you can &lt;a href=&quot;http://www.youtube.com/watch?v=uExMXa4t8eg&quot;&gt;watch the video&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can grab a pre-release version of Riak Version 1.0 on the
&lt;a href=&quot;http://downloads.basho.com/riak/&quot;&gt;Basho downloads site&lt;/a&gt; to try the
examples above. Remember to change the storage backend to
&lt;code&gt;riak_kv_eleveldb_backend&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;Finally keep an eye out for documentation that will land on the newly
re-organized &lt;a href=&quot;http://wiki.basho.com&quot;&gt;Basho Wiki&lt;/a&gt; within the next two
weeks.&lt;/p&gt;

&lt;p&gt;– &lt;a href=&quot;http://twitter.com/rustyio&quot;&gt;Rusty&lt;/a&gt;&lt;/p&gt;</content:encoded>
	<dc:date>2011-09-14T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://recap.basho.com/2011/09/14/Riak-Recap-for-September-12-13">
	<title>Riak Recap Blog: Riak Recap for September 12 - 13</title>
	<link>http://recap.basho.com/2011/09/14/Riak-Recap-for-September-12-13</link>
	<content:encoded>&lt;p&gt;&lt;em&gt;Posted on September 14, 2011&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Evening, Morning, Afternoon to All -&lt;/p&gt;
&lt;p&gt;For today&amp;#8217;s Recap: blog posts, new code, and more.&lt;/p&gt;
&lt;p&gt;Enjoy.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://recap.basho.com/feed/twitter.com/pharkmillups&quot;&gt;Mark&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Riak Recap for September 12 &amp;#8211; 13&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;We released Riak 1.0.0pre3. &lt;br /&gt;
&amp;#8594; Downloads and updated release notes &lt;a href=&quot;http://lists.basho.com/pipermail/riak-users_lists.basho.com/2011-September/005617.html&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Greg Stein and Reid Draper continue to do great stuff for the Python client.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;https://github.com/basho/riak-python-client/commits/master&quot;&gt;Latest contributions here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Kyle Kingsbury shared a sneak peak of the Riak metrics app he and John Muellerleile will be showing off at the talk they are giving on September 26th in San Francisco.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://twitter.com/#!/aphyr/statuses/113444452374294528&quot;&gt;Picture and talk details here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Mark Steele wrote a great post about how to stream chunk encoded &lt;span class=&quot;caps&quot;&gt;HTTP&lt;/span&gt; responses that should be particularly interesting to any &lt;span class=&quot;caps&quot;&gt;PHP&lt;/span&gt; devs on the list.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://www.control-alt-del.org/2011/09/09/streaming-results-from-riak-over-http-in-php/&quot;&gt;Read here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Basho Dev. Rusty Klophaus wrote a blog post all about Secondary Indexing.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://blog.basho.com/2011/09/14/Secondary-Indexes-in-Riak/&quot;&gt;Read here&lt;/a&gt;&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://news.ycombinator.com/item?id=2997276&quot;&gt;Hacker News Discussion&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;We merged a sizable contribution to Riak Search from Greg Pascale and the Clipboard.com team that adds support for the &amp;#8216;fl&amp;#8217; &lt;span class=&quot;caps&quot;&gt;SOLR&lt;/span&gt; parameter. Thanks, Greg! (Did I mention &lt;a href=&quot;https://www.clipboard.com/jobs&quot;&gt;Clipboard is hiring&lt;/a&gt;?)&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;https://github.com/basho/riak_search/commit/44031bcc8e0744c7204f7f06840486e37742e13a&quot;&gt;Commit here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;We merged a small contribution to Riak from Morten Siebuhr. Thanks, Morten!&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;https://github.com/basho/riak/commit/87fcc71174f93dd2a0254a2a57f6f76d5ef30717&quot;&gt;Commit here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Another reminder about the Riak training happening Surge next week &amp;#8230;&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://omniti.com/surge/2011/sessions/training&quot;&gt;Details and registration here&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content:encoded>
	<dc:date>2011-09-14T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://recap.basho.com/2011/09/12/Riak-Recap-for-September-9-11">
	<title>Riak Recap Blog: Riak Recap for September 9 - 11</title>
	<link>http://recap.basho.com/2011/09/12/Riak-Recap-for-September-9-11</link>
	<content:encoded>&lt;p&gt;&lt;em&gt;Posted on September 12, 2011&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Afternoon, Evening, Morning to All&lt;/p&gt;
&lt;p&gt;For today&amp;#8217;s Recap: talks, blog posts, jobs, and more.&lt;/p&gt;
&lt;p&gt;Enjoy.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://recap.basho.com/feed/twitter.com/pharkmillups&quot;&gt;Mark&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Riak Recap for September 9 &amp;#8211; 11&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;&lt;a href=&quot;http://twitter.com/mcavage&quot;&gt;Mark Cavage&lt;/a&gt; wrote a lengthy post on just about everything you would ever want to know about &lt;span class=&quot;caps&quot;&gt;LDAP&lt;/span&gt;. More importantly he explains why he&amp;#8217;s working on it at Joyent and why they are using Riak with &lt;span class=&quot;caps&quot;&gt;LDAP&lt;/span&gt;.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://blog.nodejs.org/2011/09/08/ldapjs-a-reprise-of-ldap/&quot;&gt;Read here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Basho &lt;span class=&quot;caps&quot;&gt;COO&lt;/span&gt; Tony Falco was in the Wall St. Journal talking about the history of Basho and Riak, why Riak is so compelling. Basho is part of the &amp;#8220;Small Business, Large Innovation&amp;#8221; competition the &lt;span class=&quot;caps&quot;&gt;WSJ&lt;/span&gt; is running and we could use your vote.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://blogs.wsj.com/biginnovation/2011/09/09/basho-technologies&quot;&gt;Read and vote here&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;Strange Loop is less than a week away, so here&amp;#8217;s the rundown of Riak-flavored talks happening in St. Louis next week.&lt;br /&gt;
&amp;#8594; Susan Potter will be talking about using riak_core to build&lt;br /&gt;
distributed applications. &lt;a href=&quot;https://thestrangeloop.com/sessions/dynamo-is-not-just-for-datastores&quot;&gt;Details here&lt;/a&gt;.&lt;br /&gt;
&amp;#8594; Kresten Krab Thorup will be talking about Bringing Riak to the Mobile Platform. &lt;a href=&quot;https://thestrangeloop.com/sessions/bringing-riak-to-the-mobile-platform&quot;&gt;Details here&lt;/a&gt;.&lt;br /&gt;
&amp;#8594; Sean Cribbs will be talking about Riak&amp;#8217;s MapReduce in relation to traditional &lt;span class=&quot;caps&quot;&gt;SQL&lt;/span&gt;. &lt;a href=&quot;https://thestrangeloop.com/sessions/wrap-your-sql-head-around-riak-mapreduce&quot;&gt;Details here&lt;/a&gt;.&lt;br /&gt;
&lt;em&gt;I&amp;#8217;ll also be in attendance. Ping me if you&amp;#8217;ll be there.&lt;/em&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://twitter.com/ethangunderson&quot;&gt;Ethan Gunderson&lt;/a&gt; built a Riak Rubik&amp;#8217;s cube.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://twitpic.com/6k0int&quot;&gt;Picture here&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;One great job to pass along:&lt;br /&gt;
&amp;#8594; truSEF, a financial services startup in &lt;span class=&quot;caps&quot;&gt;NYC&lt;/span&gt;, is hiring Senior Software Engineers to work on their infrastructure (and there&amp;#8217;s a lot of Riak involved). &lt;a href=&quot;http://truesef.com/jobs/sse.html&quot;&gt;Details here&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;</content:encoded>
	<dc:date>2011-09-12T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://recap.basho.com/2011/09/09/Riak-Recap-for-September-07-08">
	<title>Riak Recap Blog: Riak Recap for September 7 - 8</title>
	<link>http://recap.basho.com/2011/09/09/Riak-Recap-for-September-07-08</link>
	<content:encoded>&lt;p&gt;Evening, Morning, Afternoon to All -&lt;/p&gt;
&lt;p&gt;For today&amp;#8217;s Recap: talks, jobs, new production users, new code, screencasts, and more.&lt;/p&gt;
&lt;p&gt;Enjoy and have a great weekend.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://recap.basho.com/feed/twitter.com/pharkmillups&quot;&gt;Mark&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Riak Recap for September 7 &amp;#8211; 8&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;We added two more production users to the (newly-reorganized!) Riak Wiki. &lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://wiki.basho.com/Who-is-Using-Riak.html#bump&quot;&gt;Bump&lt;/a&gt; (h/t Will Moss)&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://wiki.basho.com/Who-is-Using-Riak.html#seomoz&quot;&gt;SEOmoz&lt;/a&gt;  (h/t Myron Marston)&lt;br /&gt;
&lt;em&gt;Who else is missing from the wiki?&lt;/em&gt;&lt;/li&gt;
	&lt;li&gt;This is a ways off but still worth mentioning: Andy Gross is speaking on &lt;span class=&quot;caps&quot;&gt;QCON&lt;/span&gt; in San Francisco about Riak Use Cases.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://qconsf.com/sf2011/presentation/Riak+Use+Cases:+Dissecting+the+Solutions+to+Hard+Problems&quot;&gt;Details here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Ryan Zezeski updated his &amp;#8220;try try try&amp;#8221; post on riak_core and the vnode.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://twitter.com/#!/rzezeski/status/111997743857274882&quot;&gt;Linked here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;The slides that Sean Cribbs and Dan Reverri used for their bi-coastal Riak 1.0 Preview talks last night are now online.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://riak-onedotoh-preview.heroku.com/#1&quot;&gt;Check them out here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;We merged some great contributions to the Python Client over the past few days from Greg Stein and Soren Hansen. (h/t to Brett Hoerner and Reid Draper for helping with the review.)&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;https://github.com/basho/riak-python-client/commits/master&quot;&gt;Code here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;I sent out a link to this in a different thread today but it&amp;#8217;s worth sharing again: Joe Blomstedt put together a screencast covering what Riak&amp;#8217;s Cluster Membership looks like in 1.0.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://blog.basho.com/2011/09/09/Riak-Cluster-Membership-Overview/&quot;&gt;Grab a beer and go watch this&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Two great jobs to pass your way:&lt;br /&gt;
&amp;#8594; Twitch.tv, which is part of the Justin.tv family, has some openings in San Francisco &amp;#8211; and rumor has it that you&amp;#8217;ll be working with Riak. &lt;a href=&quot;http://www.twitch.tv/jobs&quot;&gt;Details here&lt;/a&gt;. &lt;br /&gt;
&amp;#8594; Strobe is looking for a DevPops Engineer. &lt;a href=&quot;http://careers.strobecorp.com/apply/5xjbjW/DevOps-Engineer.html&quot;&gt;Details here&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;</content:encoded>
	<dc:date>2011-09-09T00:00:00+00:00</dc:date>
</item>
<item rdf:about="tag:basho.com,2011-09-09:/blog/technical/2011/09/09/Riak-Cluster-Membership-Overview/">
	<title>Basho Technical Blog: A Preview Of Cluster Membership In Riak 1.0</title>
	<link>http://basho.com/blog/technical/2011/09/09/Riak-Cluster-Membership-Overview/</link>
	<content:encoded>&lt;p&gt;&lt;strong&gt;September 09, 2011&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Being a distributed company, we make a lot of videos at Basho that are intended for internal consumption and used to educate everyone on new features, functionality, etc. Every once and a while someone makes a video that&amp;#8217;s so valuable it&amp;#8217;s hard not to share it with the greater community. This is one of those.&lt;/p&gt;
&lt;p&gt;This screencast is a bit on the long side, but it&amp;#8217;s entirely worth it. Basho Software Engineer &lt;a href=&quot;http://twitter.com/jtuple&quot;&gt;Joe Blomstedt&lt;/a&gt; put it together to educate all of Basho on the new cluster membership code, features, and functionality coming in the Riak 1.0 release (due out at the end of the month). We aim to make Riak as operationally-simple as possible to operate at scale, and the choices we make and code we write around cluster membership form the crux of this simplicity.&lt;/p&gt;
&lt;p&gt;At the end of this you&amp;#8217;ll have a better idea of what Riak&amp;#8217;s cluster membership is all about, its major components, how it works in production, new commands that are present Riak 1.0, and much, much more.&lt;/p&gt;
&lt;p&gt;And, if you want to dig deeper into what Riak and cluster membership is all about, start here:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://downloads.basho.com/riak/riak-1.0.0pre1/&quot;&gt;Download Riak 1.0 Pre-release 1&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://github.com/basho/riak_core&quot;&gt;Riak Core on GitHub&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://blog.basho.com/2011/04/12/Where-To-Start-With-Riak-Core/&quot;&gt;Where To Start With Riak Core&lt;/a&gt; (from the Basho Blog)&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://lists.basho.com/mailman/listinfo/riak-users_lists.basho.com&quot;&gt;Join the Riak Mailing List&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(&lt;em&gt;It should be noted again that this was intended for internal consumption at Basho, so Joe&amp;#8217;s tone and language reflect that in a few sections.&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;Enjoy, and thanks for being a part of Riak.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://twitter.com/#!/basho/team&quot;&gt;The Basho Team&lt;/a&gt;&lt;/p&gt;</content:encoded>
	<dc:date>2011-09-09T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://recap.basho.com/2011/09/07/Riak-Recap-for-September-3-6">
	<title>Riak Recap Blog: Riak Recap for September 3 - 6</title>
	<link>http://recap.basho.com/2011/09/07/Riak-Recap-for-September-3-6</link>
	<content:encoded>&lt;p&gt;Evening, Afternoon, Morning To All -&lt;/p&gt;
&lt;p&gt;For today&amp;#8217;s Recap: meetups, new code, new production users, blog posts, and more.&lt;/p&gt;
&lt;p&gt;Enjoy.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://recap.basho.com/feed/twitter.com/pharkmillups&quot;&gt;Mark&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Riak Recap for September 3 &amp;#8211; 6&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;&lt;a href=&quot;http://twitter.com/ncb000gt&quot;&gt;Nick Campbell&lt;/a&gt; built an app using Riak and Luwak for Node Knockout.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://bearshark.nko2.nodeknockout.com/&quot;&gt;Go see if you can break it here&lt;/a&gt; &lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://twitter.com/#!/ncb000gt/statuses/110764370715344896&quot;&gt;A few details on the app here&lt;/a&gt;&lt;br /&gt;
&lt;em&gt;Anyone else use Riak for a Node Knockout app?&lt;/em&gt;&lt;/li&gt;
	&lt;li&gt;Juliano Martinez let it leak that he added support for Riak to the S3 Clone he is working on.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;https://github.com/ncode/otto&quot;&gt;Code here on GitHub&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Chad DePue (@chaddepue) wrote a great blog post about his experience using and working with Riak over the past year.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://inakanetworks.com/blog/2011/08/25/when-to-use-riak/&quot;&gt;Read here&lt;/a&gt;&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://news.ycombinator.com/item?id=2969865&quot;&gt;There was also a lively discussion about the post on Hacker News&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Jon Brisbin&amp;#8217;s talk from Erlang Factory about Riak and RabbitMQ is online (&lt;span class=&quot;caps&quot;&gt;PDF&lt;/span&gt; and video).&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://www.erlang-factory.com/conference/London2011/speakers/JonBrisbin&quot;&gt;Watch here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;I wrote up a blog post detailing all the Riak-related events in September.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://blog.basho.com/2011/09/07/Riak-is-Going-To-Have-a-Huge-September/&quot;&gt;Read here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Two Common Lisp Libraries for Riak appeared today (obviously both are still quite nascent but definitely worth keeping an eye on).&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;https://github.com/eriknomitch/cl-riak&quot;&gt;https://github.com/eriknomitch/cl-riak&lt;/a&gt;&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;https://github.com/whee/cl-riak&quot;&gt;https://github.com/whee/cl-riak&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Two great jobs to pass along:&lt;br /&gt;
&amp;#8594; HP Cloud Services in Seattle is hiring developers with Riak skills. &lt;a href=&quot;http://www.linkedin.com/groups/HP-Cloud-Services-Looking-Riak-2913983.S.68805320&quot;&gt;Details here&lt;/a&gt;.&lt;br /&gt;
&amp;#8594; Thoughtleadr in San Francisco is hiring a Linux Admin with Riak with&lt;br /&gt;
experience. &lt;a href=&quot;http://www.startuply.com/Jobs/Linux_Administrator_5134_1.aspx&quot;&gt;Details here&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;</content:encoded>
	<dc:date>2011-09-07T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://recap.basho.com/2011/09/02/Riak-Recap-for-Sept-1-2">
	<title>Riak Recap Blog: Riak Recap for September 1 - 2</title>
	<link>http://recap.basho.com/2011/09/02/Riak-Recap-for-Sept-1-2</link>
	<content:encoded>&lt;p&gt;&lt;em&gt;Posted on September 2, 2011&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Afternoon, Evening, Morning, to All -&lt;/p&gt;
&lt;p&gt;For today&amp;#8217;s Recap: Meetups, new code, new production users, slide decks, and more.&lt;/p&gt;
&lt;p&gt;Enjoy, and have a great weekend.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://recap.basho.com/feed/twitter.com/pharkmillups&quot;&gt;Mark&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Riak Recap for September 1 &amp;#8211; 2&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Basho Developer Ryan Zezeski is in Baltimore and is looking for other like-minded Baltimoreans for talk Riak with (for meetups. presos, etc.). If this is you, shoot an email to rzezeski@basho.com.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;https://twitter.com/#!/rzezeski/status/109123324851929088&quot;&gt;Some details here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Mårten Gustafson (@martengustafson) posted a slide deck a few days ago from a recent talk he gave called &amp;#8220;Approaching and evaluating NoSQL.&amp;#8221; Riak gets a non-trivial mention. Thanks, Mårten!&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://marten.gustafson.pp.se/content/presentations#TOC-Approaching-and-evaluating-NoSQL-20&quot;&gt;Check them out here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;John Newman joined the Basho Team as a Developer Advocate.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://blog.basho.com/2011/09/02/John-Newman-Has-Joined-The-Basho-Team/&quot;&gt;Details here on the Basho Blog&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Riak 1.0 Preview Meetups are happening in both San Francisco and New York on September 8th. If you&amp;#8217;re in the area and aren&amp;#8217;t already registered, you should do so; seats are going fast.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://www.meetup.com/San-Francisco-Riak-Meetup/events/30127311/&quot;&gt;SF&lt;/a&gt; &lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://www.meetup.com/NYC-Riak-Meetup/events/29181101/&quot;&gt;&lt;span class=&quot;caps&quot;&gt;NYC&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;We added three new logos to the &amp;#8220;Who is Using Riak&amp;#8221; page on the Wiki.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://wiki.basho.com/Who-is-Using-Riak.html#clipboard&quot;&gt;Clipboard&lt;/a&gt; (Thanks, Ken!)&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://wiki.basho.com/Who-is-Using-Riak.html#github&quot;&gt;GitHub&lt;/a&gt; (Thanks, Corey!)&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://wiki.basho.com/Who-is-Using-Riak.html#mochimedia&quot;&gt;Mochi Media&lt;/a&gt; &lt;br /&gt;
  (Thanks, David! Also, it should be said that Mochi has been in production for&lt;br /&gt;
over year now.)&lt;br /&gt;
&amp;#8594; And if you&amp;#8217;ve got a logo for the wiki, don&amp;#8217;t hesitate to &lt;a href=&quot;https://github.com/basho/riak_wiki&quot;&gt;fork the wiki repo&lt;/a&gt; and add your details (or email me)&lt;/li&gt;
	&lt;li&gt;Looks like Duncan McGreggor has his Django Riak Engine code up on GitHub. (I posted a link to the Launchpad repo for this code in the last recap.)&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;https://github.com/oubiwann/django-riak-engine&quot;&gt;Code here&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content:encoded>
	<dc:date>2011-09-02T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://recap.basho.com/2011/09/01/Riak-Recap-for-August-29-31">
	<title>Riak Recap Blog: Riak Recap for August 29 - 31</title>
	<link>http://recap.basho.com/2011/09/01/Riak-Recap-for-August-29-31</link>
	<content:encoded>&lt;p&gt;&lt;em&gt;Posted on September 1, 2011&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Morning, Afternoon, Evening to All -&lt;/p&gt;
&lt;p&gt;For today&amp;#8217;s Recap: Blog posts, upcoming talks, new code, and more.&lt;/p&gt;
&lt;p&gt;Enjoy.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://recap.basho.com/feed/twitter.com/pharkmillups&quot;&gt;Mark&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Riak Recap for August 29 &amp;#8211; 31&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Haris Amin wrote a quick blog post about installing Riak on OS X Lion. Thanks, Haris!&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://blog.harisamin.com/post/9658193785/install-riak-on-os-x-lion&quot;&gt;Read here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;The Chicago Boss Web Framework now supports Riak as a backend.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;https://twitter.com/#!/basho/status/108982455062634497&quot;&gt;Details here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;This is a ways off but still worth relaying: Jon Brisbin will be giving a talk on Riak and evented data with RabbitMQ at the SpringOne conference in Chicago at the end of October.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://www.springone2gx.com/conference/chicago/2011/10/speakers/jon_brisbin&quot;&gt;Talk details here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;There will be a half day Riak training at the upcoming Surge Conference in Baltimore happening at the end of September. The best part about this is that it&amp;#8217;s free with your registration (and Surge&amp;#8217;s lineup looks downright amazing).&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://omniti.com/surge/2011/sessions/training#riak-training&quot;&gt;Come to this&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Duncan McGreggor has a new repo up on Launchpad that connects Riak to Django. Thanks, Duncan!&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;https://launchpad.net/django-riak-engine&quot;&gt;Django Riak Engine&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content:encoded>
	<dc:date>2011-09-01T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://recap.basho.com/2011/08/29/Riak-Recap-For-August-26-28">
	<title>Riak Recap Blog: Riak Recap for August 26 - 28</title>
	<link>http://recap.basho.com/2011/08/29/Riak-Recap-For-August-26-28</link>
	<content:encoded>&lt;p&gt;&lt;em&gt;Posted on August 29, 2011&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Evening, Morning, Afternoon to All -&lt;/p&gt;
&lt;p&gt;A few blog posts, jobs, and a small &lt;span class=&quot;caps&quot;&gt;README&lt;/span&gt; update for today&amp;#8217;s Recap.&lt;/p&gt;
&lt;p&gt;Enjoy.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://recap.basho.com/feed/twitter.com/pharkmillups&quot;&gt;Mark&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Riak Recap for August 26 &amp;#8211; 28&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Lengthy blog post about Riak Usage Patterns (in Russian).&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://habrahabr.ru/blogs/nosql/127228&quot;&gt;Read here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Great blog post Analyzing Apache Logs with Riak&amp;#8217;s MapReduce.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://www.simonbuckle.com/2011/08/27/analyzing-apache-logs-with-riak/&quot;&gt;Read here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;The merge_index &lt;span class=&quot;caps&quot;&gt;README&lt;/span&gt; got some small but valuable updates from rampage.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;https://github.com/basho/merge_index/pull/14&quot;&gt;Pull request here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;A few great jobs to pass along:&lt;br /&gt;
&amp;#8594; Sencha is looking for a Cloud Services DevOps Engineer in Redwood City, CA, to work with Riak and a whole slew of other cool technologies. &lt;a href=&quot;http://www.sencha.com/company/careers/?gnk=job&amp;gni=8aa0050631ec0ce20132072085b720b6&amp;gns=Simply+Hired&quot;&gt;Details here&lt;/a&gt;.&lt;br /&gt;
&amp;#8594; SEOMoz is hiring a Test Lead in the Seattle Area to with Riak and Cassandra experience. &lt;a href=&quot;http://hire.jobvite.com/CompanyJobs/Careers.aspx?nl=1&amp;k=Job&amp;j=oFNHVfwO&amp;s=About_-_Jobs_Page&quot;&gt;Details here&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;</content:encoded>
	<dc:date>2011-08-29T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://recap.basho.com/2011/08/26/Riak-Recap-for-August-22-25">
	<title>Riak Recap Blog: Riak Recap for August 22 - 25</title>
	<link>http://recap.basho.com/2011/08/26/Riak-Recap-for-August-22-25</link>
	<content:encoded>&lt;p&gt;&lt;em&gt;Posted on August 26, 2011&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Afternoon, Evening, Morning to All -&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s a great Recap to take you into the weekend: blog posts, slides, videos, new code, and more.&lt;/p&gt;
&lt;p&gt;Also, to all our Riak users who happen to be on the East Coast of the US this weekend: stay safe.&lt;/p&gt;
&lt;p&gt;Enjoy.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://recap.basho.com/feed/twitter.com/pharkmillups&quot;&gt;Mark&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Riak Recap for August 22 &amp;#8211; 25&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;A video of Rusty Klophaus&amp;#8217; Secondary Indexing Talk from &lt;span class=&quot;caps&quot;&gt;OSCON&lt;/span&gt; made it onto Youtube. (The video quality is not the best, but it gets the job done.)&lt;br /&gt;
&amp;#8594;  &lt;a href=&quot;http://www.youtube.com/watch?v=uExMXa4t8eg&quot;&gt;Watch here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Joseph Lambert has two new Riak-related repos up on GitHub that are definitely worth keeping an eye on. (He should also get some points for one of the better GitHub nicks I&amp;#8217;ve seen in a while.)&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;https://github.com/snoopaloop/Riak-PBC-Pool&quot;&gt;Riak-&lt;span class=&quot;caps&quot;&gt;PBC&lt;/span&gt;-Pool&lt;/a&gt;&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;https://github.com/snoopaloop/riakyo&quot;&gt;riakyo&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Cody Soyland and Sean Cribbs collaborated to put together a Riak Post Commit Hook that send writes to ZeroMQ.&lt;br /&gt;
&amp;#8594;  &lt;a href=&quot;http://twitter.com/#!/codysoyland/statuses/106120496629821440&quot;&gt;Details here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;The slides from the talk I gave on Wednesday night at the Seattle Scalability Meetup are now online.&lt;br /&gt;
&amp;#8594;  &lt;a href=&quot;http://www.slideshare.net/pharkmillups/riak-seattlemeetupaugust&quot;&gt;Check them out here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Adam Schepis wrote a script to update Riak Config Files (and turned it into a blog post). He was also looking for some feedback on it&amp;#8230; &lt;br /&gt;
&amp;#8594;  &lt;a href=&quot;http://adamschepis.com/blog/2011/08/25/a-script-to-update-riak-config-files/&quot;&gt;Check it out here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;One job opportunity to pass along.&amp;#8594; &lt;br /&gt;
&amp;#8594;  &lt;a href=&quot;http://twitter.com/#!/peter_schlegel/status/106732657488039936&quot;&gt;Work with Node.js, Linux, Riak, and more&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content:encoded>
	<dc:date>2011-08-26T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://recap.basho.com/2011/08/22/Riak-Recap-For-August-19-21">
	<title>Riak Recap Blog: Riak Recap for August 19 - 21</title>
	<link>http://recap.basho.com/2011/08/22/Riak-Recap-For-August-19-21</link>
	<content:encoded>&lt;p&gt;&lt;em&gt;Posted on August 22, 2011&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Evening, Morning, Afternoon to All -&lt;/p&gt;
&lt;p&gt;Very short Recap coming off of the weekend.&lt;/p&gt;
&lt;p&gt;Enjoy.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://recap.basho.com/feed/twitter.com/pharkmillups&quot;&gt;Mark&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Riak Recap for August 19 &amp;#8211; 21&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;We announced a Riak 1.0 Webinar. This is happening on Sept 28th and will feature Justin Sheehy and Andy Gross talking about why the next Riak release will be downright amazing.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://t.co/X83RNcz&quot;&gt;Registration and details here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Q &lt;del&gt;-&lt;/del&gt; Is there some way to remove an empty bucket? (via #riak)&lt;br /&gt;
   A &lt;del&gt;-&lt;/del&gt; If it&amp;#8217;s empty, it doesn&amp;#8217;t exist. Buckets are just namespaces + properties.&lt;/li&gt;
	&lt;li&gt;Another reminder that Riak will be the topic of conversation at the&lt;br /&gt;
upcoming Seattle Scalability Meetup this Wednesday.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://www.meetup.com/Seattle-Hadoop-HBase-NoSQL-Meetup/events/20756731/&quot;&gt;Details here&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content:encoded>
	<dc:date>2011-08-22T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://recap.basho.com/2011/08/19/Riak-Recap-for-August-17-18">
	<title>Riak Recap Blog: Riak Recap for August 17 - 18</title>
	<link>http://recap.basho.com/2011/08/19/Riak-Recap-for-August-17-18</link>
	<content:encoded>&lt;p&gt;&lt;em&gt;Posted on August 19, 2011&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Evening, Morning, Afternoon to All -&lt;/p&gt;
&lt;p&gt;Pretty amazing Recap to take you into the weekend: new code, meetups, Riak hosting, blog posts, and more&lt;/p&gt;
&lt;p&gt;Enjoy.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://recap.basho.com/feed/twitter.com/pharkmillups&quot;&gt;Mark&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Riak Recap for August 17 &amp;#8211; 18&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;v0.3.7 of riakc was just released.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://pypi.python.org/pypi/riakc/0.3.7&quot;&gt;Here on PyPI&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Adrian Hills wrote a great blog post all about getting started with Riak and .&lt;span class=&quot;caps&quot;&gt;NET&lt;/span&gt;. Thanks, Adrian!&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://www.adathedev.co.uk/2011/08/getting-started-with-riak-and-net.html&quot;&gt;Read here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Forgot to send this one along a few days back&amp;#8230; Mariano Peck wrote up a blog post about using Riak and Fuel. Thanks, Mariano!&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://marianopeck.wordpress.com/2011/08/16/when-fuel-meets-riak-nosql-database/&quot;&gt;Read here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Canvas Hosting launched dedicated Riak hosting today. You&amp;#8217;ll probably want to take a look at this. Also, congrats to &lt;a href=&quot;https://twitter.com/schaapy&quot;&gt;@schaapy&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/bendingoutward&quot;&gt;@bendingoutward&lt;/a&gt;, and the rest of the team at Canvas working on this.&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://canvashosting.com/solutions/riak&quot;&gt;Details here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;We announced the September Bay Area Riak Meetup today. This one is happening on 9/8 and will feature Basho DA Dan Reverri giving an extensive overview of Riak 1.0 and also a short talk from Craigh Muth about integrating Riak into the Xiki Framework. (And for those of you in &lt;span class=&quot;caps&quot;&gt;NYC&lt;/span&gt;: don&amp;#8217;t be surprised if you get your own Riak 1.0 Preview Meetup&amp;#8230;)&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://www.meetup.com/San-Francisco-Riak-Meetup/events/30127311/&quot;&gt;Details here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Riak is taking over the next Seattle Scalability Meetup happening on 8/24. Greg Pascale from clipboard.com will be talking about how they use Riak and Riak Search, and yours truly will be covering the Riak basics. (And if you&amp;#8217;re in Seattle and want to grab a beer, let me know.)&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;http://www.meetup.com/Seattle-Hadoop-HBase-NoSQL-Meetup/events/20756731/&quot;&gt;Details and registration here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://twitter.com/technoweenie&quot;&gt;Rick Olson&lt;/a&gt; released the code for a &lt;span class=&quot;caps&quot;&gt;URL&lt;/span&gt; shortener they pushed into production at GitHub this week. Rumor has it that it&amp;#8217;s backed by Riak. Thanks, Rick!&lt;br /&gt;
&amp;#8594; &lt;a href=&quot;https://github.com/technoweenie/guillotine&quot;&gt;Repo for &amp;#8220;Guillotine&amp;#8221; here&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Q &amp;#8211; Is there any way to automatically have riak start up, and join the cluster? (via #riak)&lt;br /&gt;
   A &amp;#8211; There is nothing built into Riak to make this happen at the moment, but it is something that  could be scripted fairly easily. Keep in mind that the decision to add a node should be based on detailed capacity planning.&lt;/li&gt;
&lt;/ol&gt;</content:encoded>
	<dc:date>2011-08-19T00:00:00+00:00</dc:date>
</item>
<item rdf:about="http://www.themarkphillips.com//2011/08/09/A-Cost-Benefit-Analysis-of-the-Ruby-Hackathon">
	<title>themarkphillips: A Cost/Benefit Analysis of the Ripple Hackathon</title>
	<link>http://www.themarkphillips.com//2011/08/09/A-Cost-Benefit-Analysis-of-the-Ruby-Hackathon.html</link>
	<content:encoded>&lt;p&gt;&lt;em&gt;&lt;strong&gt;August 09, 2011&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;From July 11 &amp;#8211; 13, Basho Developer Advocate &lt;a href=&quot;https://twitter.com/#!/seancribbs&quot;&gt;Sean Cribbs&lt;/a&gt; and the majority of the &lt;a href=&quot;https://github.com/seancribbs/ripple&quot;&gt;Ripple&lt;/a&gt; Committers descended upon &lt;a href=&quot;http://blog.basho.com/2011/06/07/BashoWest-is-all-new-and-we-have-desks-for-you/&quot;&gt;BashoWest&lt;/a&gt; for the first official Ripple Hackathon (RH). This was three full days of intense work, discussion, and collaboration around &lt;a href=&quot;http://www.themarkphillips.com/wiki.basho.com&quot;&gt;Riak's&lt;/a&gt; Ruby Client. After the event was over we took some time to put together a &amp;#8220;cost/benefit analysis&amp;#8221; to demonstrate that what we did was worthwhile and should be repeated in the future. This was my first experience with this type of community event and I learned tons. Thus, I thought it might be worth sharing with others who are focused on community building and open source software.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Background&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sean is the primary maintainer and hacker on Ripple. Due to various forces, however, he has had less time of late to work on the code, and the schedule for getting it to 1.0 continues to get drawn out.&lt;/p&gt;
&lt;p&gt;Getting Ripple to 1.0, and the features and bug fixes that come along with that version number, is something that needs to happen. The maturity and functionality of a 1.0 release means more developers and companies can use Ripple for their production deployments. To expedite the process Sean proposed we get all the Committers out to San Francisco to try and accomplish this with a sprint. And, to sweeten the pot for the invitees, we offered to pay both their airfare and hotel bills. It was a non-trivial expense from the Community budget but we felt strongly about sponsoring this development.&lt;/p&gt;
&lt;p&gt;Before this Cost/Benefit analysis was completed, Sean and I concluded that the Hackathon was a huge success: the new Ripple code, bug fixes, the community goodwil, and non-code content produced are already having a positive impact for Ripple, Riak, and the Basho Community. And, after completing this analysis, I'm happy to report that event was well worth it. Here's an overview of the people involved, the code written, and why the Ripple Hackathon was an excellent investment of Basho money and time.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: I originally wrote this to be consumed internally by various people at Basho. As such, I included exact dollar amounts to better demonstrate how valuable this exercise was. In preparation for public consumption, however, I've removed these figures. That said, I'm fairly confident I can demonstrate the benefit of this in relative terms.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Committers&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Aside from Sean, the Committes who were able to attend the Hackathon were:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://twitter.com/duffomelia&quot;&gt;Duff O'Melia&lt;/a&gt; (Developer, &lt;a href=&quot;http://spreedly.com/&quot;&gt;Spreedly&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://twitter.com/#!/ntalbott&quot;&gt;Nathaniel Talbott&lt;/a&gt; (Cofounder, &lt;a href=&quot;http://spreedly.com/&quot;&gt;Spreedly&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://twitter.com/#!/myronmarston&quot;&gt;Myron Marston&lt;/a&gt; (Developer, &lt;a href=&quot;http://www.seomoz.org/&quot;&gt;SEOmoz&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://twitter.com/#!/aphyr&quot;&gt;Kyle Kingsbury&lt;/a&gt; (Developer, &lt;a href=&quot;http://vodpod.com/&quot;&gt;VodPod&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;The Costs&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Basho covered the majority of the expenses for each of the invitees: hotel, airfare and daily lunches were paid for out of our 2011 Community Budget.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Time Spent Hacking&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Over the three day period, we estimated that four of the five hackers present put in, on average, a total of 30 hours each. One participant had to leave to handle some work issues, and was only able to contribute about 25 total hours.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Total hours spent working on Ripple = 145 hours&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Impact On The Code Base&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In short, the work done, both in quality and amount, was massive. Day One was spent primarily strategizing and discussing what was to be accomplished over the next few days. Days Two and Three were where the majority of the code was written. For a full list of what happened over the three day period, take a few minutes to read Sean's detailed blog posts summarizing their goals and progress:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://seancribbs.com/tech/2011/07/12/ripple-hackathon---day-1&quot;&gt;Ripple Hackathon Day One&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://seancribbs.com/tech/2011/07/13/ripple-hackathon---day-2&quot;&gt;Ripple Hackathon Day Two&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://seancribbs.com/tech/2011/07/14/ripple-hackathon---day-3&quot;&gt;Ripple Hackathon Day Three&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some specific stats on the sheer volume of the work:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;There were 72 commits made over the three day period&lt;/li&gt;
	&lt;li&gt;101 files were changed&lt;/li&gt;
	&lt;li&gt;1,460 &lt;span class=&quot;caps&quot;&gt;LOC&lt;/span&gt; were added&lt;/li&gt;
	&lt;li&gt;240 &lt;span class=&quot;caps&quot;&gt;LOC&lt;/span&gt; were deleted&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the details on all the commits, see this &lt;a href=&quot;https://github.com/seancribbs/ripple/compare/66bf4f7b2d9e1bbeb55e...59cf2624524a87ce45c4&quot;&gt;Compare view of the GitHub Commit Log&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/seancribbs/ripple/graphs/impact&quot;&gt;GitHub Impact Graph for Ripple&lt;/a&gt; gives another perspective on just how much work was done (the week of July 10th, 2011 is what you'll want to examine). What this shows is that there were only five other weeks during the last 18 months that had equal or more impact on the code base. What's more, three of those five weeks were when Sean was more-or-less working full time on Ripple; he is far from full time on Ripple now.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Was Is Worth The Time?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sean spends about 20 hours a month on Ripple at the moment. This means that it would have taken him more than seven months alone (assuming a 40 hour work week) to accomplish the equivalent of what he and the committers completed at the Hackathon. Realistically, it might have taken closer to three or four months as there are other committers and community members working with him on the library. So let's assume three months. &lt;em&gt;Sean and the Committers were able to accomplish in three days what would have probably taken more than three months.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Was It Worth The Money?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Based on Sean's effective hourly rate for the what he gets paid to work at Basho (taking into account salary, benefits, etc.), we know (with a fair amount of accuracy), what it would cost Basho to put 145 hours towards Ripple. After calculating the cost to cover all the Committer expenses (listed above), &lt;em&gt;we brought down the cost of development by more than 17% on an hourly basis&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Big Picture&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Ripple Hackathon was a huge success in just about every way possible, and the benefits far outweighed the costs:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;We wrote better code faster for Ripple (doing three months work in three days), thus making the library more mature in less time and making it more accessible to more users (both open source and commercial)&lt;/li&gt;
	&lt;li&gt;We deepened relationships with our core committers, making them more likely to deploy Riak in other parts of their organizations and recommend it farther afield&lt;/li&gt;
	&lt;li&gt;We decreased our development costs by more than 17%/hour during the Hackathon&lt;/li&gt;
	&lt;li&gt;We increased Basho's community goodwill, reputation, and attention in the open source space&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This type of event is something I would like to replicate in the future in other language groups across Riak's community. The merit of such an exercise is usually pretty clear to developers partaking in it and community members observing it, but C-Level executives deal in ROIs, and Basho's (to their credit) are no different.&lt;/p&gt;
&lt;p&gt;Calculating the value of code contributions in terms of money saved and developer productivity gained is hard (and if someone has a clean, proven model on how to do so, let me know in the comments and I'll give you my cell number because we need to talk). In a controlled situation, like with the Ripple Hackathon, it's a touch easier to derive some semi-reliable numbers on things like &lt;span class=&quot;caps&quot;&gt;ROI&lt;/span&gt; and code impact. And with results like this in hand I'm looking forward to making recommendations for similar hackathons and sprints in the near future. I'm thinking Python&amp;#8230;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/#!/pharkmillups&quot;&gt;Mark&lt;/a&gt;&lt;/p&gt;</content:encoded>
	<dc:date>2011-08-09T07:00:00+00:00</dc:date>
</item>
<item rdf:about="http://buffered.io/posts/corrugatediron-update-v0-1-1">
	<title>IJs Rants: CorrugatedIron Update - v0.1.1</title>
	<link>http://buffered.io/posts/corrugatediron-update-v0-1-1</link>
	<content:encoded>&lt;p&gt;Last week &lt;a href=&quot;http://facility9.com/&quot; title=&quot;Jeremiah Peschka&quot;&gt;JP&lt;/a&gt; and I released our first Open Source project, &lt;a href=&quot;http://corrugatediron.org/&quot; title=&quot;CorrugatedIron&quot;&gt;CorrugatedIron&lt;/a&gt;. The release seemed to be fairly well received by those people who gave it a spin. We've had some good feedback along the way which we'll be evaluating, and no doubt those suggestions and comments will be influencing the future of the library.&lt;/p&gt;
&lt;p&gt;In the interim, we wanted to get another version out which sorts out two main issues and that changes the &lt;em&gt;perceived&lt;/em&gt; &quot;norm&quot; when building applications with CorrugatedIron. Those issues are listed below. We've also go the first pass of our &lt;a href=&quot;http://corrugatediron.org/documentation/MapReduce.html&quot; title=&quot;Map/Reduce&quot;&gt;Map/Reduce&lt;/a&gt; documentation ready.&lt;/p&gt;
&lt;p&gt;If you're not interested in the detail, head on over to the &lt;a href=&quot;http://corrugatediron.org/downloads.html&quot; title=&quot;Downloads page&quot;&gt;download page&lt;/a&gt; to find out the many ways in which you can get access to the release. Otherwise, please read on! &lt;!--more--&gt;&lt;/p&gt;
&lt;h2 id=&quot;removal_of_ioc&quot;&gt;Removal of IoC&lt;/h2&gt;
&lt;p&gt;When we first put together the sample applications we thought that it'd be a good idea to show how these things can be done using what the mainstream .NET developers would use. That is, we decided to wire everything in with IoC. This wasn't because we felt that this is how it &lt;strong&gt;had&lt;/strong&gt; to be done, but more to try and give people a level of familiarity. The library that we chose to use for the samples was Unity, for no other reason that &quot;it was there&quot;.&lt;/p&gt;
&lt;p&gt;This small mistake seemed to give off the impression that we felt that Unity was the best choice of all the IoC containers out there.&lt;/p&gt;
&lt;p&gt;This is most definitely &lt;strong&gt;not the case&lt;/strong&gt;. We are in no way advocating the use of one IoC container over the other. We honestly don't care which one you want to use. You should use whichever works for you.&lt;/p&gt;
&lt;p&gt;To avoid this perception we decided that it would be best to remove references to any IoC container in all samples except for the &lt;a href=&quot;https://github.com/DistributedNonsense/CorrugatedIron.Samples/tree/master/VisualStudio2010/Sample&quot; title=&quot;IoC Sample Project&quot;&gt;one sample&lt;/a&gt; which shows how to use &lt;em&gt;lots&lt;/em&gt; of different containers to do the same thing. Hence you should see a &lt;em&gt;lack&lt;/em&gt; of IoC containers in our examples from now on. Sorry for any confusion.&lt;/p&gt;
&lt;h2 id=&quot;handling_of_client_ids&quot;&gt;Handling of Client IDs&lt;/h2&gt;
&lt;p&gt;Our first implementation of Client ID generation in CorrugatedIron wasn't a great implementation. We made the decision early on to generate IDs based on some details of the machine that the client was running on (ie. The MAC address of the first functioning NIC on the machine). Our thinking was that we wanted to uniquely identify a client while still allowing the ID to be reused across instances of the application. This might make sense for rich-client applications, but certainly doesn't work well in the web world. In a web environment, each request could come from a different user.&lt;/p&gt;
&lt;p&gt;Almost immediately after releasing v0.1.0, &lt;a href=&quot;http://facility9.com/&quot; title=&quot;Jeremiah Peschka&quot;&gt;JP&lt;/a&gt; and I read an email on the [Riak mailing list][mailinglist] which made us rethink our approach. After a bit of discussion, we decided to go with an idea of Jeremiah's which involves the generation of the Client ID when the RiakClient instance is created. This generation can be controlled by the user of the library by specifying a &lt;code&gt;seed&lt;/code&gt; value.&lt;/p&gt;
&lt;p&gt;This gives the user the flexibility of not being concerned about the Client ID if they don't want to be, but can have some control if they do.&lt;/p&gt;
&lt;h2 id=&quot;ease_of_configuration&quot;&gt;Ease of Configuration&lt;/h2&gt;
&lt;p&gt;The only bit of &quot;constructive criticism&quot; that we received on-masse was via &lt;a href=&quot;http://news.ycombinator.com/item?id=2799823&quot; title=&quot;CI on Hacker News&quot;&gt;Hacker News&lt;/a&gt; and revolved around configuration. The general feeling was that the effort required to configure the library was higher than expected, especially when compared to other libraries. I'd suggest reading the full discussion over on the &lt;a href=&quot;http://news.ycombinator.com/item?id=2799823&quot; title=&quot;CI on Hacker News&quot;&gt;Hacker News&lt;/a&gt; site to read some of the reasons behind the design decisions. But, if you're too lazy (I don't blame you if you are), the short version is this: CorrugatedIron is a .NET library connecting to a clustered, distributed key-value store. A library that does this, while attempting to manage load-balancing across all nodes in the cluster, is going to require some configuration.&lt;/p&gt;
&lt;p&gt;One concern in particular resonated with me, and that was the difficulty in getting CorrugatedIron running inside a REPL, such as &lt;a href=&quot;http://www.fsharphelp.com/Interactive.aspx&quot; title=&quot;F# interactive&quot;&gt;FSI&lt;/a&gt;. The two issues with getting a REPL to work from configuration are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The ability to specify the location of the configuration file.&lt;/li&gt;
&lt;li&gt;The number of lines of code it takes to wire things in.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The XML that's required is not going to be changing in the short term. The values that are specified in that configuration are required to make the most of Riak and that's not something we're prepared to compromise on. However, the .NET code required to access it has changed, though the old way of wiring things in still exists for those people who want that level of flexibility.&lt;/p&gt;
&lt;p&gt;In short, you can wire-in CorrugatedIron's XML configuration as simply as:&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cluster&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RiakCluster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FromConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;riakConfig&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cluster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;thats_it&quot;&gt;That's it!&lt;/h2&gt;
&lt;p&gt;Hopefully this will make your life a little easier while dealing with CorrugatedIron. We're always keen to hear your feedback, so please &lt;a href=&quot;https://github.com/DistributedNonsense/CorrugatedIron&quot; title=&quot;CorrugatedIron @ Github&quot;&gt;drop us a line&lt;/a&gt; if you have any thoughts, suggestions or issues.&lt;/p&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;</content:encoded>
	<dc:date>2011-08-04T02:18:00+00:00</dc:date>
</item>
<item rdf:about="http://buffered.io/posts/introducing-corrugatediron">
	<title>IJs Rants: Introducing CorrugatedIron</title>
	<link>http://buffered.io/posts/introducing-corrugatediron</link>
	<content:encoded>&lt;h2 id=&quot;its_alive&quot;&gt;It's Alive!&lt;/h2&gt;
&lt;p&gt;It is with great pride that I introduce my first ever Open Source product release: &lt;a href=&quot;http://corrugatediron.org/&quot; title=&quot;CorrugatedIron&quot;&gt;CorrugatedIron&lt;/a&gt;! A feature-rich .NET client for the &lt;a href=&quot;http://riak.basho.com/&quot; title=&quot;Riak&quot;&gt;Riak&lt;/a&gt; Key-Value store. Together with my partner-in-crime &lt;a href=&quot;http://facility9.com/&quot; title=&quot;Jeremiah Peschka&quot;&gt;Jeremiah&lt;/a&gt;, we've put together a driver which exposes a great deal of Riak's functionality. CorrugatedIron is at &lt;a href=&quot;https://github.com/DistributedNonsense/CorrugatedIron/tree/v0.1.0&quot;&gt;v0.1.0&lt;/a&gt;, and while it doesn't support every feature the Riak has to offer, it covers most, if not all, of the most common features that are required to effectively communicate with the system. &lt;!--more--&gt;&lt;/p&gt;
&lt;h2 id=&quot;features&quot;&gt;Features&lt;/h2&gt;
&lt;p&gt;I would love to cover off all of the features here, but we've already done it on the &lt;a href=&quot;http://corrugatediron.org/&quot; title=&quot;CorrugatedIron&quot;&gt;official site&lt;/a&gt;, so head over there to take a look at the feature list, documentation and sample projects.&lt;/p&gt;
&lt;h2 id=&quot;the_what_where_why_and_how&quot;&gt;The What, Where, Why and How&lt;/h2&gt;
&lt;h3 id=&quot;how_it_all_began&quot;&gt;How it all began&lt;/h3&gt;
&lt;p&gt;I don't remember the exact date that I was first exposed to &lt;a href=&quot;http://riak.basho.com/&quot; title=&quot;Riak&quot;&gt;Riak&lt;/a&gt;, &lt;a href=&quot;http://basho.com/&quot; title=&quot;Basho&quot;&gt;Basho&lt;/a&gt;'s bomb-proof database, but I do remember being very impressed. It was around the time I really started to get an interest in &lt;a href=&quot;http://www.erlang.org/&quot; title=&quot;Erlang&quot;&gt;Erlang&lt;/a&gt; programming, so it probably isn't a surprise, given that Riak is written in Erlang, that it piqued my interest. I have a bit of a fascination with systems that don't stop, and Riak fits firmly in that category.&lt;/p&gt;
&lt;p&gt;So after playing with it for a while and marvelling at the sturdiness, the ease of set-up (even with clustering), the clever architecture and the make-up of the system, I realised that Riak was actually pretty special. Almost in a class of it's own. Its properties really appealed to me, and I felt the need to do something with.&lt;/p&gt;
&lt;p&gt;Back then, I wasn't even working with Erlang professionally. The clients that I had at the time were pure .NET shops and didn't feel the need to consider anything other than the &quot;tried and true&quot; &lt;a href=&quot;http://en.wikipedia.org/wiki/Relational_database_management_system&quot; title=&quot;Relational Databases&quot;&gt;RDBMS&lt;/a&gt; (which in Brisbane seems to be mainly MS SQL, particularly in the .NET circles). Given that the likelihood of my working with Riak in a professional sense in the short term was fairly slim, I wanted to look to other areas where I could work with it and contribute to it at the same time. Needless to say, my Erlang-fu wasn't (and still isn't) up to scratch, so contributing to Riak itself wasn't yet something I thought I could take on. I needed something else.&lt;/p&gt;
&lt;p&gt;Late last year, I was starting to look for projects that I could build and release as &lt;a href=&quot;http://www.opensource.org/&quot; title=&quot;Open Source&quot;&gt;Open Source&lt;/a&gt;. I have, on my occasions, contributed to other Open Source projects but I hadn't worked on one of my own and released it into the wild. This is something that I really wanted to do and so was looking for something to build.&lt;/p&gt;
&lt;p&gt;During my travels in the Riak circles I had noticed that there were quite a few clients available which allowed people to talk to Riak from various languages. Basho themselves &lt;a href=&quot;http://wiki.basho.com/Client-Libraries.html&quot; title=&quot;Client libraries&quot;&gt;support&lt;/a&gt; ones for Erlang, Java, PHP, Python and Ruby, and there are many more listed on the &lt;a href=&quot;http://wiki.basho.com/Community-Developed-Libraries-and-Projects.html#Client-Libraries-and-Frameworks&quot; title=&quot;Client libraries&quot;&gt;Riak community clients page&lt;/a&gt; which cover languages like C, Clojure, Go, Node.js, Perl, Scala and more.&lt;/p&gt;
&lt;p&gt;Amongst this libraries there were two listed for .NET. Both of them seemed to have a small set of functionality, they both weren't finished and at the time they both had not been touched for quite a while. In short, for .NET people, there really wasn't a viable option for Riak connectivity. What a travesty!&lt;/p&gt;
&lt;p&gt;I remember sending an email to &lt;a href=&quot;http://twitter.com/pharkmillups&quot; title=&quot;Mark Phillips&quot;&gt;Mark&lt;/a&gt; telling him that I was pondering the thought of building this library to make sure that there wasn't already someone else out there making a go of it. He was aware of the two existing solutions but didn't know what the plans were with them, and he wasn't aware of any others at the time. This was all the validation that I needed.&lt;/p&gt;
&lt;p&gt;So, in late 2010, I decided that the first project I wanted to build and release to the world as an Open Source application was a .NET client for Riak, one that worked on both the &lt;a href=&quot;http://en.wikipedia.org/wiki/Common_Language_Runtime&quot; title=&quot;Microsoft CLR&quot;&gt;CLR&lt;/a&gt; and on &lt;a href=&quot;http://www.mono-project.com/&quot; title=&quot;Mono&quot;&gt;Mono&lt;/a&gt;. This is where CorrugatedIron was conceived.&lt;/p&gt;
&lt;h3 id=&quot;so_why_the_long_wait&quot;&gt;So why the long wait?&lt;/h3&gt;
&lt;p&gt;If you look at the [history][HistoryGraph] of the code-base you'll see that I had an initial flurry of activity in early 2011, but didn't really do anything else for quite some time. There's a reason for that!&lt;/p&gt;
&lt;p&gt;When I first decided on the project, I spent a bit of time thinking about the design. I wanted the interface to be more &quot;functional&quot; in many ways. I wanted to remove the idea of resource management away from the caller. I didn't want to give them rope (such as &lt;code&gt;IDisposable&lt;/code&gt; instances) with which to hang themselves (such as forgetting to &lt;code&gt;Dispose()&lt;/code&gt;). I wanted the interface to be clean, simple, intuitive and safe.&lt;/p&gt;
&lt;p&gt;This little in-memory design session went on for quite some time, but I didn't really put anything down on paper. Nor did I write any code. Instead, I though that I would put something together which wasn't really related or as important as the API. Something that was lower level which the user of the library would not (and should not) see.&lt;/p&gt;
&lt;p&gt;A Riak node has two interfaces which clients can connect to. One of them is a &lt;a href=&quot;http://en.wikipedia.org/wiki/Representational_State_Transfer&quot; title=&quot;REST&quot;&gt;REST&lt;/a&gt; API, and the other is a binary API which utilises &lt;a href=&quot;http://code.google.com/p/protobuf/&quot; title=&quot;Protocol Buffers&quot;&gt;Protocol Buffers&lt;/a&gt;. I thought that it would be fun to start working on the Protocol Buffer handling while the idea of the API formed slowly in the back of my mind.&lt;/p&gt;
&lt;h3 id=&quot;then_along_came_jp&quot;&gt;Then along came JP&lt;/h3&gt;
&lt;p&gt;Then, just before Christmas (23rd December to be exact) I received an email out of the blue from a chap in America. Here's how it started:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Greetings from America!&lt;/p&gt;
&lt;p&gt;Hope your summer is going well. Mark Phillips told me that you were interested in working on a good .net driver for Riak. Have you made any progress or is it still a general idea in your head?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There was much more to the email than that, but it certainly started off well! The email was from &lt;a href=&quot;http://facility9.com/&quot; title=&quot;Jeremiah Peschka&quot;&gt;Jeremiah Peschka&lt;/a&gt;, a chap who's name I had seen floating around the Riak &lt;a href=&quot;http://lists.basho.com/mailman/listinfo/riak-users_lists.basho.com&quot; title=&quot;Riak mailing list&quot;&gt;mailing list&lt;/a&gt;. In fact, I remember his name catching my eye on more than one occasion because his email signature contained the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Microsoft SQL Server MVP&lt;/p&gt;
&lt;p&gt;MCITP: Database Developer, DBA&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This resonated with me because he was obviously into RDBMSs, but hadn't been a complete asshat on a list full of people working in &lt;a href=&quot;http://en.wikipedia.org/wiki/NoSQL&quot; title=&quot;NoSQL&quot;&gt;NoSQL&lt;/a&gt;. This was a rare and surprising thing.&lt;/p&gt;
&lt;p&gt;Moving on. After a few email exchanges, Jeremiah indicated that he was interested in helping to build CorrugatedIron (despite the whacky name) and we decided to team up. I knew that he'd definitely add value to the whole process and would also keep me motivated. Plus, his obvious skills in the SQL realm would no doubt be useful too!&lt;/p&gt;
&lt;p&gt;We continued to talk into January and I thought that it was past time that I shared the code that I had hacked together so that we had a starting/talking point. On the 7th January, I committed my first &lt;a href=&quot;https://github.com/DistributedNonsense/CorrugatedIron/--SOMETHING-GOES-HERE--&quot;&gt;batch of code&lt;/a&gt; to the repository which contained a stack of very untested code. I don't even know if it worked! The result: we had a lot to talk about.&lt;/p&gt;
&lt;h3 id=&quot;another_intermission&quot;&gt;Another intermission&lt;/h3&gt;
&lt;p&gt;Though JP and I continued to talk a great deal via email, we were both quite under the pump with our respective places of employment. We shared ideas along the way, but neither of us were really into the project as a result of the intense work we had on elsewhere. Though I'm fairly certain that the thought of the project wasn't far from our minds the whole time.&lt;/p&gt;
&lt;p&gt;Then on the 12th April, out of the blue again, another email came. I'm not going to divulge all the detail, but the crux of it indicated that there was a growing interest in seeing a .NET client for Riak from people in other areas of the world. It also asked what the story was with the client that we were building, and wondered if we had a timeline down with a potential release date.&lt;/p&gt;
&lt;p&gt;This was scary, exciting and a slap in the face at the same time. Scary and exciting because there was a possibility that someone out there might want to use what we were building. A slap in the face because we hadn't really done much at all other than the initial commit and a great deal of talking. It was just the wake up call that we needed.&lt;/p&gt;
&lt;p&gt;I spoke to JP about the email and we both decided that it was well past time to get our heads down and start working on this thing for real. We needed to lock in a set of features, a time-frame for development and, most importantly, a release date.&lt;/p&gt;
&lt;p&gt;So, we did!&lt;/p&gt;
&lt;h3 id=&quot;all_ahead_flank&quot;&gt;All ahead flank&lt;/h3&gt;
&lt;p&gt;In early May, JP and I managed to start freeing up time that we could then contribute to our project. Development ramped up and kicked off in mid-May, and on the 18th, we committed our first changeset to the repository since the very first commit in January. From there, we went nuts!&lt;/p&gt;
&lt;p&gt;We consistently worked on things and pushed our code back and forth for the latter half of May and well in to June. At this point, things really started to get exciting.&lt;/p&gt;
&lt;p&gt;We had managed to get quite a few features out in a small period of time, and were generally very happy with our progress. JP was making the most of his superior Riak knowledge and was banging out API features like there was no tomorrow. Meanwhile, I had my head down in the guts of the underlying bits, trying to keep things sane.&lt;/p&gt;
&lt;p&gt;It was at this point we were told of &lt;em&gt;more&lt;/em&gt; people who were keen to get their hands on a quality .NET client, and that if we could get the client ready in time, various individuals would be happy to talk about it during &lt;a href=&quot;http://oscon.com/&quot; title=&quot;OSCON&quot;&gt;OSCON&lt;/a&gt;, the biggest Open Source convention I know of. Awesome! This was an opportunity too good to miss.&lt;/p&gt;
&lt;p&gt;We finalised our feature-set for v0.1.0, wrote down our final time-line and informed various parties of what we were planning to do. It was locked in. We were heads down, bums-up trying to get things into shape. It was all very exciting.&lt;/p&gt;
&lt;h3 id=&quot;even_more_interest&quot;&gt;Even more interest&lt;/h3&gt;
&lt;p&gt;By early July, we had somehow managed to attract the attention of two more individuals who were looking for this functionality. Both of which put their hands up to the opportunity to look at our Alpha software, take it for a spin and give us some feedback. This was awesome. Having other people look over the code and critique it while, in some ways, evaluating it for their own needs is a great thing.&lt;/p&gt;
&lt;p&gt;After a short period of time, we received very constructive (and, just quietly, rather gratifying) comments from both guys. It made us feel like we couldn't be doing too badly!&lt;/p&gt;
&lt;p&gt;We opened up the repository to them so that they could get the latest code whenever they wanted, and also opened it up to some of the Basho guys so that they could also cast their eyes over it. The cat was slowly coming out of the bad.&lt;/p&gt;
&lt;p&gt;On the 20th July, we locked in the feature-set for v0.1.0 and froze the codebase for all but minor changes, bug fixes and tweaks. It was time to do what everyone &lt;em&gt;loves&lt;/em&gt; to do: &lt;strong&gt;documentation&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Given that I tend to hate documentation, straight away I was looking for something else to fill the time with. Thankfully, alongside documentation, we also needed a few sample applications (let's face it, as devs we learn much faster from working code compared to reams of documentation). So I leapt on the opportunity to crank out [YakRiak.NET][], a .NET client for [Sean Cribbs][]' [YakRiak][] chat application. It was incredibly simple to do and didn't take very long at all. When building the app, and finally &lt;em&gt;using&lt;/em&gt; my own software, I have to admit I felt pretty good. It was nice to use my own software for something fun!&lt;/p&gt;
&lt;p&gt;After that, JP put together a new &lt;a href=&quot;https://github.com/peschkaj/CorrugatedIron.Samples/tree/master/VisualStudio2010/Sample.SessionStateProvider&quot;&gt;Session State Provider&lt;/a&gt; which used Riak as the back-end store. How good is that! Riak-backed session state in .NET. Awesome sauce.&lt;/p&gt;
&lt;p&gt;I also finalised a small sample application which utilised some of the most common IoC frameworks to wire in the configuration, and began working on the 'real' documentation again.&lt;/p&gt;
&lt;h3 id=&quot;going_live&quot;&gt;&quot;Going live&quot;&lt;/h3&gt;
&lt;p&gt;Finally, on the 25th July, after a couple of months of intense development, sample app creation, documentation and blog posts, CorrugatedIron was released to the world -- just in time for OSCON (phew!).&lt;/p&gt;
&lt;p&gt;While the documentation isn't as thorough as we would like, and our unit test coverage isn't as high as we'd like, we're very happy with what we've managed to achieve. This first release is by no means the last, and JP and I are both excited about what we're going to add to it in the future.&lt;/p&gt;
&lt;h3 id=&quot;a_small_side_note&quot;&gt;A small side note&lt;/h3&gt;
&lt;p&gt;When people first start working on projects like this there is always a risk that personalities will clash and the software will suffer. JP and I knew nothing of each other when we started this thing, yet over time have got to know each other and had a great deal of fun learning from each other. I think I've been really fortunate in having JP involve himself in this project. He has been open to different ideas and opinions, has never come across as an ass and has been a real pleasure to work with the whole time.&lt;/p&gt;
&lt;p&gt;So, JP, thanks mate! I'm really glad you got involved. CorrugatedIron wouldn't be what it is now if you hadn't.&lt;/p&gt;
&lt;h3 id=&quot;the_end&quot;&gt;The End&lt;/h3&gt;
&lt;p&gt;Thanks for reading this far! If you're a .NET mofo and you're keen to get your Riak on, &lt;a href=&quot;https://github.com/DistributedNonsense/CorrugatedIron&quot; title=&quot;Source code&quot;&gt;grab the source&lt;/a&gt;, &lt;a href=&quot;https://github.com/DistributedNonsense/CorrugatedIron/downloads&quot; title=&quot;Binary downloads&quot;&gt;download the binaries&lt;/a&gt; or &lt;a href=&quot;http://www.nuget.org/List/Packages/CorrugatedIron&quot; title=&quot;Nuget package&quot;&gt;install the Nuget package&lt;/a&gt; and get cracking! Feedback is always welcome, as are patches. So if you've got something to add, take away or refine, fork our &lt;a href=&quot;https://github.com/DistributedNonsense/CorrugatedIron&quot; title=&quot;Source code&quot;&gt;repository&lt;/a&gt; and get those pulls requests happening!&lt;/p&gt;</content:encoded>
	<dc:date>2011-07-25T14:00:00+00:00</dc:date>
</item>
<item rdf:about="http://seancribbs.com/tech/2011/07/14/ripple-hackathon---day-3/">
	<title>Sean Cribbs - Digital Renaissance Man: Ripple Hackathon - Day 3</title>
	<link>http://seancribbs.com/tech/2011/07/14/ripple-hackathon---day-3/</link>
	<content:encoded>&lt;p&gt;&lt;em&gt;I started writing this last night, but just got time to publish it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The Ripple Hackathon has finished! Today felt even more on-focus than
yesterday, but also less frantic/stressed. We were in &amp;ldquo;the zone&amp;rdquo; for
sure.  Here&amp;rsquo;s what we accomplished today:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://twitter.com/duffomelia&quot;&gt;Duff&lt;/a&gt; finished off the &amp;ldquo;stored key&amp;rdquo;
associations, including incorporating conflict resolution on them!
(I&amp;rsquo;ll be writing up a discussion of the new conflict resolution API
later.)  He also fixed a small inconsistency in an internal API
around associations.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://twitter.com/ntalbott&quot;&gt;Nathaniel&lt;/a&gt; teased apart some specs
that were invoking &lt;code&gt;save&lt;/code&gt; or &lt;code&gt;create&lt;/code&gt; on Document models but weren&amp;rsquo;t
in the integration suite, and he also lent me a lot of help on
improving the build on
&lt;a href=&quot;http://travis-ci.org/seancribbs/ripple&quot;&gt;Travis&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://twitter.com/myronmarston&quot;&gt;Myron&lt;/a&gt; implemented an awesome
decoupled serialization API for &lt;code&gt;Riak::RObject&lt;/code&gt;. You can now
register your own serializers for Ruby objects that you assign to
the &lt;code&gt;data&lt;/code&gt; on a &lt;code&gt;RObject&lt;/code&gt;.  So if you want to implement a custom
serialization routine for &lt;code&gt;application/x-my-content-type&lt;/code&gt;, you can
do it now.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://twitter.com/aphyr&quot;&gt;Kyle&lt;/a&gt; continued work on refactoring the
&lt;code&gt;Riak::Client&lt;/code&gt; code so that you can specify multiple hosts among
which to multiplex requests at runtime.  This will include
configurable load-balancing strategies (starting with a default
round-robin strategy).&lt;/li&gt;
&lt;li&gt;I reviewed a number of works-in-progress from the other developers
but spent most of my time bringing our Travis build toward
green. There are still some outstanding runtime/build
environment/worker-related issues on Travis, but in the last few
builds we've had at least one Ruby version passing in the build.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Retrospective&lt;/h3&gt;

&lt;p&gt;This was a phenomenal week; I can tell because we kept a kanban on one
of the whiteboards and the list in the &amp;ldquo;Done&amp;rdquo; column grew quite long
in the three days (or you can just look at the
&lt;a href=&quot;https://github.com/seancribbs/ripple/compare/66bf4f7b2d9e1bbeb55e...59cf2624524a87ce45c4&quot;&gt;commit list and changes&lt;/a&gt;).
More than just the things completed, I believe we developed a rapport
and understanding that can only be done in-person. We also have a
clearer way forward, and some momentum behind key features that have
been waiting to be started.&lt;/p&gt;

&lt;p&gt;Thanks to all the committers who attended, and a very special thanks
to the people at Basho who helped make this happen:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://twitter.com/pharkmillups&quot;&gt;Mark&lt;/a&gt; wrote the proposal and
finances for the event, handled ordering lunch each day, and took
notes and pictures of the event.&lt;/li&gt;
&lt;li&gt;Maureen, our office manager, handled booking hotels and other
necessary logistics on very short notice.&lt;/li&gt;
&lt;li&gt;Marisa, our VP Finance, ran the numbers faster than should be
humanly possible to meet accelerated timeframe.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://twitter.com/hornbeck&quot;&gt;John&lt;/a&gt; and
&lt;a href=&quot;http://twitter.com/jpease&quot;&gt;Justin&lt;/a&gt; let me take 3 days off the
normal schedule to come to San Francisco and run this.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://twitter.com/antonyfalco&quot;&gt;Tony&lt;/a&gt; made everyone feel welcome
and arranged an awesome dinner on Tuesday.&lt;/li&gt;
&lt;/ul&gt;</content:encoded>
	<dc:date>2011-07-14T11:21:24+00:00</dc:date>
	<dc:creator>Sean Cribbs</dc:creator>
</item>
<item rdf:about="http://seancribbs.com/tech/2011/07/13/ripple-hackathon---day-2/">
	<title>Sean Cribbs - Digital Renaissance Man: Ripple Hackathon - Day 2</title>
	<link>http://seancribbs.com/tech/2011/07/13/ripple-hackathon---day-2/</link>
	<content:encoded>&lt;p&gt;It&amp;rsquo;s the end of day 2 of the
&lt;a href=&quot;http://blog.basho.com/2011/07/07/Ripple-Hackathon-Happening-Next-Week-at-Basho-West/&quot;&gt;Ripple Hackathon&lt;/a&gt;. Today
was shaped a lot differently than
&lt;a href=&quot;http://seancribbs.com/tech/2011/07/12/ripple-hackathon---day-1/&quot;&gt;day 1&lt;/a&gt; &amp;mdash; we did a lot more
heads-down hacking and a lot less discussion and planning.  Luckily,
this means there were a lot of bugs fixed and features added.&lt;/p&gt;

&lt;h3&gt;Today&amp;rsquo;s progress&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://twitter.com/myronmarston&quot;&gt;Myron&lt;/a&gt; hacked through a lot of
smaller issues:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Undefined (&amp;ldquo;phantom&amp;rdquo; or &amp;ldquo;ghost&amp;rdquo;) attributes are now better
accessible and saved along with the &lt;code&gt;Ripple::Document&lt;/code&gt;
instance. This might occur if you've removed attributes from the
document class that still exist inside the Riak object and you want
to still get to them.&lt;/li&gt;
&lt;li&gt;You can now use the &lt;code&gt;guard&lt;/code&gt; tool to automatically run the specs in
&lt;code&gt;riak-client&lt;/code&gt; or &lt;code&gt;ripple&lt;/code&gt;. It works much better than &lt;code&gt;autotest&lt;/code&gt; so
we&amp;rsquo;re pretty happy with it.&lt;/li&gt;
&lt;li&gt;There was an error stemming from &lt;code&gt;beefcake&lt;/code&gt; that exists on the
latest release version but not an earlier version. It was locked to
the proper version until we can resolve the issue in the &lt;code&gt;beefcake&lt;/code&gt;
library itself.&lt;/li&gt;
&lt;li&gt;There were a few incompatibilities with Ruby 1.8.7 that were
resolved, specifically in the way &lt;code&gt;super&lt;/code&gt; was called, and neither
&lt;code&gt;singleton_method&lt;/code&gt; nor &lt;code&gt;Symbol#intern&lt;/code&gt; exist in 1.8.&lt;/li&gt;
&lt;li&gt;Spec files now &lt;code&gt;require 'spec_helper'&lt;/code&gt; instead of using a relative
path to the &lt;code&gt;spec_helper&lt;/code&gt; or a call to &lt;code&gt;File.expand_path&lt;/code&gt; to get an
absolute path. We didn&amp;rsquo;t need to have the relative requires because
RSpec puts the &lt;code&gt;spec&lt;/code&gt; directory on the load path automatically.&lt;/li&gt;
&lt;li&gt;There&amp;rsquo;s now a rake task that will clean trailing whitespace from all
Ruby source files.&lt;/li&gt;
&lt;li&gt;There was an incompatibility with the way &lt;code&gt;Set&lt;/code&gt; instances were
encoded to JSON when called from inside ActiveSupport.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a href=&quot;http://twitter.com/ntalbott&quot;&gt;Nathaniel&lt;/a&gt; continued working on
associations where the target is found using Riak Search. In the
course of his investigation, we discovered
&lt;a href=&quot;https://issues.basho.com/show_bug.cgi?id=867&quot;&gt;bug #867&lt;/a&gt;, namely that
sorting is applied at the wrong time.  This put a halt on moving
forward with the pattern.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://twitter.com/duffomelia&quot;&gt;Duff&lt;/a&gt; made headway on the &amp;ldquo;many&amp;rdquo;
association of a similar type to the &amp;ldquo;one&amp;rdquo; using a stored key that was completed yesterday.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://twitter.com/aphyr&quot;&gt;Kyle&lt;/a&gt; added some awesome conflict
resolution logic to Risky and started on a refactoring of the
&lt;code&gt;Riak::Client&lt;/code&gt; class to support multiple hosts.&lt;/p&gt;

&lt;p&gt;I completed some logic for encapsulating the retrying of failed
requests automatically and helped Myron with some of the JSON
issues. I also discussed with Kyle the plan for splitting the host
configuration from the &lt;code&gt;Client&lt;/code&gt; object, and how we might implement
various strategies for deciding how to multiplex and failover
connections.&lt;/p&gt;

&lt;h3&gt;The larger picture&lt;/h3&gt;

&lt;p&gt;The items we worked on today contribute toward two of the major goals
for Ripple 1.0, stability and usability. Naturally, fixing existing
bugs is important work, but we also want to improve the internal
semantics of the client so it is more resilient to temporary failures
and doesn&amp;rsquo;t hammer a single node with all of its requests.  We want to
make the Document modeling have stronger and more diverse patterns so
that you can express relationships that have higher cardinalities and
less surprising results in production.  I believe we made headway on
those goals today, and tomorrow has lots of promise as well.&lt;/p&gt;</content:encoded>
	<dc:date>2011-07-13T01:39:41+00:00</dc:date>
	<dc:creator>Sean Cribbs</dc:creator>
</item>
<item rdf:about="http://seancribbs.com/tech/2011/07/12/ripple-hackathon---day-1/">
	<title>Sean Cribbs - Digital Renaissance Man: Ripple Hackathon - Day 1</title>
	<link>http://seancribbs.com/tech/2011/07/12/ripple-hackathon---day-1/</link>
	<content:encoded>&lt;p&gt;So you may have heard about
&lt;a href=&quot;http://blog.basho.com/2011/07/07/Ripple-Hackathon-Happening-Next-Week-at-Basho-West/&quot;&gt;this event&lt;/a&gt;
going on around Ripple this week.  Basically, we have committers and
interested parties gathering in the offices of Basho&amp;rsquo;s SF office to
hack on Ripple and move it toward 1.0.  Today was the first day of the
hackathon/sprint/thing.  Here&amp;rsquo;s a quick rundown on what happened:&lt;/p&gt;

&lt;h3&gt;Planning &amp;amp; Priorities&lt;/h3&gt;

&lt;p&gt;Because our committers are volunteers and are taking time out of their
regular work to be here and to contribute, I wanted to make it worth
their while &amp;mdash; to let them work on what would make the most impact for
them.  So we started with a discussion that consumed most of the
morning, dropping our personal priorities into either the &amp;ldquo;Gripes&amp;rdquo;
(actual problems encountered) or &amp;ldquo;Wants&amp;rdquo; (desired features that would
make things easier) columns.  &lt;a href=&quot;http://twitter.com/pharkmillups&quot;&gt;Mark&lt;/a&gt;
took a picture of this discussion in-progress:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://twitpic.com/5oo780&quot; title=&quot;- @seancribbs and the ripple committers plotting 1.0 at the h... on Twitpic&quot;&gt;&lt;img src=&quot;http://twitpic.com/show/full/5oo780.jpg&quot; alt=&quot;- @seancribbs and the ripple committers plotting 1.0 at the h... on Twitpic&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some of these were things that can be directly addressed by the
library, some will need to be done in Riak itself. The list, roughly
as it went up on the board, is below:&lt;/p&gt;

&lt;h4&gt;Wants&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Count things (e.g. keys in bucket)&lt;/li&gt;
&lt;li&gt;Indexes (Risky does this)&lt;/li&gt;
&lt;li&gt;Separate Repos for subprojects&lt;/li&gt;
&lt;li&gt;Migrations framework&lt;/li&gt;
&lt;li&gt;Rake tasks &amp;ndash; db:*&lt;/li&gt;
&lt;li&gt;Riak as a gem (node generation, install)&lt;/li&gt;
&lt;li&gt;Instrumentation&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;Gripes&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;Many&amp;rdquo; should be &amp;ldquo;few&amp;rdquo; (too many links)

&lt;ul&gt;
&lt;li&gt;Principle of Least Surprise&lt;/li&gt;
&lt;li&gt;double-storage (backlinks)&lt;/li&gt;
&lt;li&gt;Assigning inverses&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;list-keys (list a small bucket should not be expensive)

&lt;ul&gt;
&lt;li&gt;key-filters suck too&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Connection resiliency

&lt;ul&gt;
&lt;li&gt;retries&lt;/li&gt;
&lt;li&gt;PBC problems&lt;/li&gt;
&lt;li&gt;multiple hosts&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Associations

&lt;ul&gt;
&lt;li&gt;embedded docs by key&lt;/li&gt;
&lt;li&gt;module scope for class names&lt;/li&gt;
&lt;li&gt;SBI is problematic&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;JSON problems&lt;/li&gt;
&lt;li&gt;Test Server&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;We all then took some things that we wanted to work on and sat down to
work on them.  I also fielded a lot of questions about certain aspects
of the things others were working on.&lt;/p&gt;

&lt;h3&gt;Wrap-up &amp;amp; Demos&lt;/h3&gt;

&lt;p&gt;One thing I wanted to do with each day was to prevent it from fizzling
out, so we all discussed one thing we had accomplished (or decided on)
and talked about it or showed off code.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://twitter.com/ntalbott&quot;&gt;Nathaniel&lt;/a&gt; and
&lt;a href=&quot;http://twitter.com/duffomelia&quot;&gt;Duff&lt;/a&gt; worked on a new kind of
association for documents where the key of the other document(s) is
stored in the body rather than with links (in a header). This starts to
address the first bullet point under the &amp;ldquo;Gripes&amp;rdquo; above
(&lt;a href=&quot;https://github.com/seancribbs/ripple/issues/136&quot;&gt;aka issue #136&lt;/a&gt;)
has a neat related feature &amp;ndash; the &amp;ldquo;many&amp;rdquo; side can look up related
objects using Riak Search. Their work-in-progress is on the
&lt;a href=&quot;https://github.com/seancribbs/ripple/tree/stored_key&quot;&gt;&amp;ldquo;stored_key&amp;rdquo; branch&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://twitter.com/myronmarston&quot;&gt;Myron&lt;/a&gt; worked tirelessly with the
guys from &lt;a href=&quot;http://travis-ci.org&quot;&gt;travis-ci&lt;/a&gt; to get a continuous
integration server running. This involved getting Riak 0.14.2
installed on their worker boxes and then figuring out the
idiosyncracies of why our tests fail!  All in all, an awesome effort
that is &lt;a href=&quot;http://travis-ci.org/#!/seancribbs/ripple&quot;&gt;already bearing fruit&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://twitter.com/aphyr&quot;&gt;Kyle&lt;/a&gt; discussed lots of strategies for
both teasing out HTTP response validation logic from the individual
client library adapters, as well has how to do request retries
efficiently.  The syntax we&amp;rsquo;re going to go with will be a simple
block that wraps the lower-level request invocation so we implement
the retry logic separately.  This should land early tomorrown now
that we have a solid plan.&lt;/p&gt;

&lt;p&gt;Kyle also created an interesting conflict resolution DSL for
&lt;a href=&quot;http://github.com/aphyr/risky&quot;&gt;Risky&lt;/a&gt; which encapsulates various
resolution strategies at a fine granularity (at the property level,
actually).  We discussed borrowing that syntax to build on Myron&amp;rsquo;s
existing conflict-resolution code.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;It was a very exhilirating day (if a bit distracted at times), and I
trust tomorrow will be really productive as well.&lt;br /&gt;
&lt;/p&gt;

&lt;h3&gt;Come on by&lt;/h3&gt;

&lt;p&gt;As the original announcement mentions, if you&amp;rsquo;re in the San Francisco
Bay area and want to talk about Ripple, Riak, or contribute to the
library, feel free to drop by the Basho office (929 Market, Suite 500)
anytime during business hours tomorrow or Wednesday.  We also have
formal &amp;ldquo;Riak Office Hours&amp;rdquo; on Wednesday too, if your questions are
more general.&lt;/p&gt;</content:encoded>
	<dc:date>2011-07-12T01:47:27+00:00</dc:date>
	<dc:creator>Sean Cribbs</dc:creator>
</item>
<item rdf:about="http://www.themarkphillips.com//2011/06/27/Building-and-Maintaining-Internal-Community-And-Culture">
	<title>themarkphillips: Building and Maintaining Community and Culture at a Distributed Company</title>
	<link>http://www.themarkphillips.com//2011/06/27/Building-and-Maintaining-Internal-Community-And-Culture.html</link>
	<content:encoded>&lt;p&gt;&lt;strong&gt;June 27, 2011&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When someone asks me, &amp;#8220;Where is Basho located?&amp;#8221;, I usually respond with something along the lines of: &amp;#8220;Much like &lt;a href=&quot;http://wiki.basho.com/&quot;&gt;Riak&lt;/a&gt;, we are completely distributed.&amp;#8221; Some three years ago our team was all working out of Cambridge, MA (which is still our headquarters). Slowly but surely the team grew in size, but it quickly became apparent that requiring all employees to work in the same geographic location would result in us missing out on some talented and downright brilliant people. So we resolved to &amp;#8220;hire where the talent is.&amp;#8221;&lt;/p&gt;
&lt;p&gt;As it stands right now we have physical offices in Cambridge, MA and &lt;a href=&quot;http://blog.basho.com/2011/06/07/BashoWest-is-all-new-and-we-have-desks-for-you/&quot;&gt;San Francisco&lt;/a&gt;. The team, however, is now completely distributed; in addition to Cambridge and San Francisco (and several other CA cities), we have people in Oregon, Oklahoma (various locations), Florida, Colorado (various locations), New Jersey, North Carolina, Minnesota, Virginia (various locations), Maryland (various locations), Idaho, New York, Germany, and the UK. The latest tally put our entire team at just over thirty people.&lt;/p&gt;
&lt;p&gt;Hiring where the talent is means we don&amp;#8217;t sacrifice great hires for location, but it also presents various hurdles when attempting to build culture and community. Anyone who works at a startup or as part of a small team can speak to the importance of culture. It&amp;#8217;s crucial that distributed employees feel as though they are part of a tight-knit crew. If you show up every day and your engagement with your coworkers doesn&amp;#8217;t go much beyond a few passing phrases in a chat client, you should be doing more.  The leadership at Basho made it clear many moons ago that we were going to work hard to build culture and community. Just because you&amp;#8217;re committing code 1000 miles from your nearest colleague doesn&amp;#8217;t mean you need to feel like they are 1000 miles away.&lt;/p&gt;
&lt;p&gt;I spend most of my time pursuing ways to strengthen and extend the various external communities that are growing out of &lt;a href=&quot;https://github.com/basho/&quot;&gt;Basho&amp;#8217;s open source software&lt;/a&gt;, but I thought it might be useful to examine what we do internally to build community and culture. As should be apparent, we&amp;#8217;re not doing anything too crazy or innovative with the ways we connect and collaborate across states and countries. But it&amp;#8217;s the little things that matter when culture is concerned at a distributed company, and I think we do a lot of the little things well.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Real-Time Chat&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For as long as I can remember, Basho has used &lt;a href=&quot;http://www.jabber.org/&quot;&gt;Jabber&lt;/a&gt; for real-time chat collaboration. This is where we spend most of our time conversing, and the entire company idles in one room we call &amp;#8220;bashochat.&amp;#8221; At any given time you can find any number of conversations happening concurrently; several developers might be chasing down a finicky bug while several others are discussing the merits of the latest cat meme. Hundreds (if not thousands) of messages fly through here daily. At times it can get a bit distracting, so signing off to focus is encouraged and done often. We also just started logging bashochat to make sure that those who are out for the day or signed off to chase a corner case can stay in the loop.&lt;/p&gt;
&lt;p&gt;In addition to Jabber, the Client Services Team also uses &lt;a href=&quot;http://campfirenow.com&quot;&gt;Campfire&lt;/a&gt; as their chat software of choice (for various reasons). There&amp;#8217;s certainly no reason why multiple chat programs can&amp;#8217;t co-exist under the same corporate umbrella. Basho is flexible, and if it works for your team, go with it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Skype&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Interacting via &lt;a href=&quot;http://www.skype.com/&quot;&gt;Skype&lt;/a&gt; serves as a great compliment to what happens in Jabber (even if Skype itself offers less than five nines of uptime). Everyone uses Skype at least once daily for our morning status call. We are still small enough where getting the majority of the company on the phone for a 10 minute status call is feasible, so we do it. Topics range from &amp;#8220;What&amp;#8217;s the current status of bug fix X for customer Y?&amp;#8221; to &amp;#8220;Did you get any questions at yesterday&amp;#8217;s meetup talk that you couldn&amp;#8217;t answer?&amp;#8221;  Video chats are also invaluable, and jumping on Skype to speak &amp;#8220;face-to-face&amp;#8221; for even five minutes is incredibly worthwhile and serves to reinforce the team feel (especially when a new hire is coming aboard).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Yammer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.yammer.com/&quot;&gt;Yammer&lt;/a&gt; is a great piece of software, and it recently worked its way into our suite of collaboration tools. When it was first introduced to our team (around the beginning of this year) I was a bit skeptical of how well it was going to work for us. We already use Jabber quite heavily. How would the two co-exist? Since then Yammer has become the home for low-volume, high quality messages that deserve more than just a passing glance or ephemeral response. In other words, the signal to noise ratio in Yammer is much higher; links to blog posts about Riak (or our competition), results of a long running benchmark (complete with graphs), or links to a new GitHub repo are all typical of what appears on Yammer. That said, the message volume has been growing steadily over the past months, and I&amp;#8217;m curious and interested to see how this tool evolves for us.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Quarterly Meetups&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;At some point you have to actually meet and physically interact with your colleagues. To this end, we&amp;#8217;ve been doing quarterly developer meetups for about six quarters now. These are 3-5 day gatherings of the entire team where it&amp;#8217;s business as usual, with the exception of some team building activities scattered throughout the week. (&amp;#8220;Team building&amp;#8221; may sound corny to some, but there&amp;#8217;s nothing quite like cheering for your &lt;a href=&quot;http://twitter.com/#!/dizzyd&quot;&gt;Director of Engineering&lt;/a&gt; as he vies for the best lap time against his team at your neighborhood &lt;a href=&quot;http://www.gokartracer.com/&quot;&gt;GoKart Racer&lt;/a&gt;.) Lots of amazing ideas and and moments are born at these meetups, and we all look forward to them.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Current Status&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Basho is firing on all cylinders right now (fixing more bugs, writing more features, closing more deals, resolving more tickets, etc.), and I believe that our dedication to building a distributed culture and community internally has had a lot to do with it.  Though Basho&amp;#8217;s &amp;#8220;system&amp;#8221; is still a work in progress, in my opinion we&amp;#8217;ve managed to build a strong internal community and culture that lends itself to heightened levels of productivity and overall happiness. We are still relatively small (right around 30, as I stated above) and making this scale will surely be a challenge. And I&amp;#8217;m sure that the tools we use will change, too, to accommodate our needs (speaking of which, where is the Skype replacement already?).&lt;/p&gt;
&lt;p&gt;You can&amp;#8217;t force community and culture. It starts with how you hire and is tested every day (whether you&amp;#8217;re working in the same physical location or not). Build (or seek out) a team that is committed to making something special across the board. Collaboration tools and processes will follow accordingly, and they should compliment and enhance the way you work, not dictate it.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Update&lt;/strong&gt;: &lt;a href=&quot;http://news.ycombinator.com/item?id=2702616&quot;&gt;Link to Hacker News Comment Thread&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://twitter.com/#!/pharkmillups&quot;&gt;Mark&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Community Manager&lt;br /&gt;
&lt;a href=&quot;http://www.basho.com/&quot;&gt;Basho Technologies&lt;/a&gt;&lt;/p&gt;</content:encoded>
	<dc:date>2011-06-27T07:00:00+00:00</dc:date>
</item>
<item rdf:about="http://www.themarkphillips.com//2011/05/18/Two-Anecdotes-About-Community-From-JSConf-and-NodeConf">
	<title>themarkphillips: Two Anecdotes About Community From JSConf and NodeConf</title>
	<link>http://www.themarkphillips.com//2011/05/18/Two-Anecdotes-About-Community-From-JSConf-and-NodeConf.html</link>
	<content:encoded>&lt;p&gt;&lt;strong&gt;May 18, 2011&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Basho recently sponsored &lt;a href=&quot;http://2011.jsconf.us/&quot;&gt;JSConf&lt;/a&gt; and &lt;a href=&quot;http://nodeconf.com/&quot;&gt;NodeConf&lt;/a&gt;, a combined four days of amazing talks, parties and events that took place the first week of May in Portland, Oregon. Chris, Laura, and Virginia Williams, Mikeal Rogers, and all the other organizers did an unbelievable job with the conferences, and I&amp;#8217;m proud to say that Basho was a part of making it happen.&lt;/p&gt;
&lt;p&gt;Interacting with various members of the JavaScript and Node communities was an incredible opportunity. I love that Riak is a great option for JavaScipt and Node developers who need a database; gaining more users is generally a good thing, and there is a level of excitement, enthusiasm, and interaction among these developers that is palpable, something I hope we can achieve in the greater Riak community.&lt;/p&gt;
&lt;p&gt;With that in mind, there were two anecdotes (of sorts) that I thought warranted recapping, both with their roots in JavaScript, only one of which is directly related to Riak. For those who don&amp;#8217;t have time to read a bunch of sappy community rhetoric, here&amp;#8217;s the TL;DR: &lt;em&gt;I love virtually every aspect of community building and open source software, and the JavaScript and Node communities have a lot of qualities from which the Riak community can learn and borrow.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Anecdote 1: You Want Your Users To Hug You&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Day Two Party at JSConf was, of course, an over-the-top affair. We took over both floors of the Bossanova Ballroom for &lt;a href=&quot;http://2011.jsconf.us/#!/articles/14b8994ba86e576ba174a53513461474&quot;&gt;an extravagant shindig sponsored by the great team at Yammer&lt;/a&gt;. At one point during the night, I was having a fairly lively conversation with &lt;a href=&quot;http://twitter.com/#!/mranney&quot;&gt;Matt Ranney&lt;/a&gt;. Matt is quite well known in the Node.js community as he&amp;#8217;s a contributor to Node and is the author of the widely-used &lt;a href=&quot;https://github.com/mranney/node_redis&quot;&gt;node_redis library&lt;/a&gt; (Aside from being an extremely talented developer, Matt is an all around great guy, and had recently rolled out a version of &lt;a href=&quot;http://voxer.com/&quot;&gt;Voxer&lt;/a&gt; using Riak as the primary backend store. As such, we had been chatting quite a bit during the conference as I made it a point to get his feedback on Riak and what we could be doing better.)&lt;/p&gt;
&lt;p&gt;Before too long, &lt;a href=&quot;http://twitter.com/#!/evilhackerdude&quot;&gt;Stephan Seidt&lt;/a&gt;, whom I had met a day prior (and who also published a &lt;a href=&quot;https://github.com/evilhackerdude/teriaki&quot;&gt;nifty piece of Riak-related code while at JSConf&lt;/a&gt;) joined our conversation. He had not yet met Matt, so we did the customary introductions. Now I knew Stephan was a happy user of both Redis and Node.js, so I figured it was inevitable that he had used Matt&amp;#8217;s node_redis code. Turns out I was right. When Matt let it slip that he was, in fact, the node_redis author, Stephen blurted out, &amp;#8220;Wait. You&amp;#8217;re &lt;em&gt;Matt Ranney!?&lt;/em&gt;&amp;#8221;, then put down his beer, and proceeded to hug Matt. This was a very powerful moment for me. When I envision how I want Riak community members to react when they meet Riak developers, I&amp;#8217;m pretty sure this is how I would like it to go down. If we can build and distribute software that prompts our users to drop their drink and express this type of gratitude, in my mind, we&amp;#8217;ve done our job and have cultivated something great.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Anecdote 2: Meeting People In Real Life Never Gets Old And Is Incredibly Valuable&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Another aspect of community building that JSConf and NodeConf (and other past events, too) really reinforced for me was that regardless of how easy today&amp;#8217;s applications make it to meet, interact, and form relationships with others, nothing will ever replace an in-person handshake and face-to-face conversations. I met a lot of people in Portland that I had only previously spoken with online, and each occurrence was a thrill for me. The two instances that stood out the most for me were &lt;a href=&quot;http://twitter.com/#!/roidrage&quot;&gt;Mathias Meyer&lt;/a&gt; and &lt;a href=&quot;http://twitter.com/#!/frank06&quot;&gt;Francisco Treacy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Mathias, who hails from Berlin, &lt;a href=&quot;http://blog.basho.com/2011/03/02/Mathias-Meyer-has-joined-the-basho-team/&quot;&gt;made the decision to join the Basho Team&lt;/a&gt; back in March, and, long before I had the honor of calling him a colleague, he and I would chat frequently in various channels as we were both pretty active in the NoSQL crowd. We met, and he blew me away. I&amp;#8217;m still in awe that I get to work with people like him. (Ironically, he signed on to be the conference photographer long before he joined Basho, and it was his role specifically that Basho ended up sponsoring.)&lt;/p&gt;
&lt;p&gt;Having the chance to meet Francisco was great for two reasons: he is the primary author of Riak&amp;#8217;s Node.js client, &lt;a href=&quot;http://riakjs.org&quot;&gt;riak-js&lt;/a&gt;, a chunk of code that has brought scores of users and community members to Riak and which ultimately lead Basho to sponsor NodeConf; the second reason is that Francisco and his start up &lt;a href=&quot;https://widescript.com/&quot;&gt;Widescript&lt;/a&gt; are also long-time Riak users and were one of the first production deployments of Riak to make themselves known. These guys were living on the bleeding edge in the early days. (Francisco was active on the mailing list as early as October 2009, a mere three months after Riak was open-sourced.)&lt;/p&gt;
&lt;p&gt;Quite frankly, I just wanted to say &amp;#8220;thanks&amp;#8221; to Francisco and express my gratitude for what he had done and continues to do for the community. For various reasons, the majority of code contributions to Riak come via client and other external libraries. Both in terms of lines of code and the less precise metric &amp;#8220;impact&amp;#8221;, riak-js is, arguably, one of the top five most significant contributions to Riak. Needless to say, you can see why I was excited to finally meet him. All I hope is that my giddiness wasn&amp;#8217;t too obvious. We had the chance to catch up and, seeing his dedication to Riak and riak-js first hand at NodeConf, I&amp;#8217;m even more grateful for what he is doing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Join Us&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In case I didn&amp;#8217;t make it blatantly obvious, JSConf and NodeConf were a huge success for Basho and Riak, but also for me on a personal level for what I gleaned from their respective communities. The Riak community is blooming into something massive as we speak, and if you want to have an impact on the future of data storage technologies and distributed systems, now is the time to join us. &lt;a href=&quot;http://downloads.basho.com/riak/CURRENT/&quot;&gt;Download Riak&lt;/a&gt; or check out the &lt;a href=&quot;http://wiki.basho.com/The-Riak-Community.html&quot;&gt;community page on the wiki&lt;/a&gt; to get started. Hugs are encouraged.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://twitter.com/#!/pharkmillups&quot;&gt;Mark&lt;/a&gt;&lt;/p&gt;</content:encoded>
	<dc:date>2011-05-18T07:00:00+00:00</dc:date>
</item>
<item rdf:about="http://www.themarkphillips.com//2011/03/31/A-Few-Suggestions-For-GitHub">
	<title>themarkphillips: A Few Suggestions To Bring GitHub More Users And Money</title>
	<link>http://www.themarkphillips.com//2011/03/31/A-Few-Suggestions-For-GitHub.html</link>
	<content:encoded>&lt;p class=&quot;date&quot;&gt;March 30, 2011&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.basho.com/&quot;&gt;Basho&lt;/a&gt; uses GitHub for the hosting and development of all our code. We do this because we enjoy using git as a version control system, but also (and probably more so) for GitHub&amp;#8217;s &amp;#8220;social coding&amp;#8221; advantages. (Basho &lt;a href=&quot;http://blog.basho.com/2010/11/11/a-few-more-details-on-why-we-switched-to-github/&quot;&gt;made the switch to GitHub officially&lt;/a&gt; back in October of last year.) In my opinion, there is simply no better way to enable more people to collaborate faster on a project than by using GitHub. If you&amp;#8217;re at all interested in developing your software with people other than those who are paid to write it, this is where your code needs to be. (Open Source aside, you should be using GitHub for all your software development.)&lt;/p&gt;
&lt;p&gt;But I&amp;#8217;m not a Developer. I&amp;#8217;m a Community Manager. My long days and sleepless nights aren&amp;#8217;t spent writing code. Instead, I&amp;#8217;m tasked explicitly with monitoring, tracking and growing the open source activity that exists around projects like &lt;a href=&quot;https://github.com/basho/riak&quot;&gt;Riak&lt;/a&gt;, &lt;a href=&quot;https://github.com/basho/webmachine&quot;&gt;Webmachine&lt;/a&gt;, &lt;a href=&quot;https://github.com/basho/riak_search&quot;&gt;Riak Search&lt;/a&gt;, and &lt;a href=&quot;https://github.com/basho/rebar&quot;&gt;Rebar&lt;/a&gt;. That said, GitHub is one of the most effective, reliable, and innovative resources I have for watching who is doing what to contribute to our code and how they are doing it.&lt;/p&gt;
&lt;p&gt;There is, however, room for improvement. GitHub currently does a less-than-stellar job of displaying who is contributing to, watching, forking and commenting on your code. For example, I can get a straightforward snapshot of all the &lt;a href=&quot;https://github.com/basho/luwak/contributors&quot;&gt;contributors to Luwak&lt;/a&gt; or all the &lt;a href=&quot;https://github.com/seancribbs/ripple/commits/master&quot;&gt;commits rolling into Ripple&lt;/a&gt;. But, at the end of the week/month/year, when I attempt to calculate the various community growth metrics that matter to me as a Community Manager, I have to jump through some hoops. These barriers aren&amp;#8217;t insurmountable by any means, but it could be simplified. And I would happily pay for this simplification. With that in mind, here are a few suggestions from someone who spends too much time on GitHub.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Suggestion 1: Snapshot of Total Activity Across a Repo&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I do my best to track everything associated with our code. At the end of the month, for example, I&amp;#8217;ll go to the &lt;a href=&quot;https://github.com/basho/riak/&quot;&gt;Riak Repo&lt;/a&gt; (and most other Basho repos, actually) and tally up things like total number of pull requests opened/closed, total number of issues opened/closed, and total number of comments open/closed, etc. One view that presented me with all this info would be insanely useful. Here&amp;#8217;s a rundown of what might be part of said view:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Total Number of Watchers/Forks&lt;/li&gt;
	&lt;li&gt;Increase in Watchers/Forks
	&lt;ul&gt;
		&lt;li&gt;Percentage growth&lt;/li&gt;
		&lt;li&gt;Raw Number Increase&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
	&lt;li&gt;Pull Request Summary&lt;/li&gt;
	&lt;li&gt;Commit Summary&lt;/li&gt;
	&lt;li&gt;Comments Summary&lt;/li&gt;
	&lt;li&gt;Issue Summary&lt;/li&gt;
	&lt;li&gt;Number of Related Repos that Appeared This Week/Month&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More on this last bullet point: I think it would be amazing to show a list of projects that appeared over the last week/month/year that were somehow related to a given repo. Perhaps developers could tag new (or existing) repos with a some simple metadata that could be used to connect it to relevant repos. &lt;a href=&quot;https://github.com/frank06/riak-js&quot;&gt;Riak-js&lt;/a&gt;, for example, would get &amp;#8220;riak&amp;#8221; and &amp;#8220;node.js&amp;#8221; tags. Queue graph creation, repo impact analyses, blog posts, etc.&lt;/p&gt;
&lt;p&gt;Also, the ability to break these stats down by official members of an Organization compared to outside contributors would be essential.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Suggestion 2: Snapshot of Total Activity Across Every Repo Owned by an Organization or User&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Above I mentioned that I maintain stats on basically &lt;a href=&quot;https://github.com/basho&quot;&gt;all of Basho&amp;#8217;s of repositories&lt;/a&gt;. The ability to sum stats and view trends across all our of repos would trigger a deluge of happy tears. (Bonus points for giving me the ability to compare activity across a subset our repos over a given period of time.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Suggestion 3: Developer Activity Snapshots at the Repo Level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Show me a rolled up summary for all the activity of one developer at the repository level. At the moment you can get a complete view of &lt;a href=&quot;https://github.com/obie&quot;&gt;one user&amp;#8217;s total activity&lt;/a&gt;, but this lacks specificity. At the repo level I can bounce around to the separate commit, issue, and pull request screens and, via some manual filtering and incantations, figure out how a certain hacker has impacted a chunk of code. But it&amp;#8217;s not easy and it&amp;#8217;s not efficient. Here&amp;#8217;s what the structure of such a page might looks like:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Last visited repo on:&lt;/li&gt;
	&lt;li&gt;Watcher/Forker Since:&lt;/li&gt;
	&lt;li&gt;Pull Requests&lt;/li&gt;
	&lt;li&gt;Commits&lt;/li&gt;
	&lt;li&gt;Recent Comments&lt;/li&gt;
	&lt;li&gt;Issues Opened/Particpated In:&lt;/li&gt;
	&lt;li&gt;Something Cool I&amp;#8217;m Forgetting&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(The one immediate flaw I can see here is that there would be a lot users whose repo-level activity pages would be bare. Perhaps this page would only be created one a user has satisfied several criteria?)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So Why Would GitHub Want To Do This?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;GitHub does expose a few metrics that can be useful (and I&amp;#8217;ve heard rumors that they are working to make them more useful). Both Impact and Traffic Graphs (see respective examples &lt;a href=&quot;https://github.com/joyent/node/graphs/impact&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://github.com/joyent/node/graphs/traffic&quot;&gt;here&lt;/a&gt;) can provide some level of depth to show who is pushing the code forward and what level of exposure your code is getting. And, it is possible to get an handle on how many commits are coming from whom. But if the repo-level metrics were to be simplified and enhanced, GitHub would see not only a lot more people using its platform, but a lot more people with different titles paying for it.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Update&lt;/em&gt;: &lt;a href=&quot;http://news.ycombinator.com/item?id=2393327&quot;&gt;Link to Hacker News Comment Thread&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/pharkmillups&quot;&gt;Phark&lt;/a&gt;&lt;/p&gt;</content:encoded>
	<dc:date>2011-03-31T07:00:00+00:00</dc:date>
</item>
<item rdf:about="http://seancribbs.com/tech/2011/03/08/how-ripple-uses-fibers/">
	<title>Sean Cribbs - Digital Renaissance Man: How Ripple uses Fibers</title>
	<link>http://seancribbs.com/tech/2011/03/08/how-ripple-uses-fibers/</link>
	<content:encoded>&lt;p&gt;Fibers, really? &lt;strong&gt;Yes, really.&lt;/strong&gt; Ripple (riak-client,
  actually) has used fibers even since 0.6, almost exactly a year
  ago (I probably got the idea from &lt;a href=&quot;http://pragdave.blogs.pragprog.com/pragdave/2008/01/pipelines-using.html&quot;&gt;Dave Thomas&lt;/a&gt;). In
  the &lt;a href=&quot;https://github.com/seancribbs/ripple/compare/70a3ae0...b4c0085&quot;&gt;most
  recent few commits&lt;/a&gt;, I finally extracted and generalized how they
  are being used as I am finding more and more uses for the pattern,
  which I'm calling a &amp;ldquo;Pump&amp;rdquo; (short for message pump).&lt;/p&gt;

&lt;p&gt; I was asked
  by &lt;a href=&quot;http://twitter.com/#!/evanphx/status/44533601508921344&quot;&gt;Evan
  Phoenix on Twitter&lt;/a&gt; (and retweeted by others) how the code was
  useful, and I tried to explain in a series of tweets back and forth,
  but failed to get my point across. Surprise, concurrent code is hard
  to explain on Twitter! This blog post should help explain.&lt;/p&gt;

&lt;p&gt;Note that I use Curl/curb as an example below, but the problem occurs in
  other clients (e.g. Excon) as well.&lt;/p&gt;

&lt;h2&gt;Simple requests&lt;/h2&gt;

&lt;p&gt;Before we can understand why this problem occurs, let's look at the
  simple case, which is the single-threaded call-and-return
  pattern.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://seancribbs.com/page_attachments/0000/0096/pumps1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is really simple to understand. We make a request, calls go
  down several layers until they hit the Curl C library, and then
  responses bubble back up to the user code. For efficiency's sake and
  the added benefit of keeping existing connections open, we reuse the
  curl_easy handle when starting a new request.&lt;/p&gt;

&lt;p&gt;With that out of the way, let's get to the interesting stuff.&lt;/p&gt;

&lt;h2&gt;Streaming&lt;/h2&gt;

&lt;p&gt;Riak's &lt;a href=&quot;http://wiki.basho.com/REST-API&quot;&gt;HTTP API&lt;/a&gt;
  supports a number of streaming operations, including key lists,
  MapReduce, and large files (Luwak). How are streaming operations
  different than regular HTTP responses? If you're at all familiar
  with HTTP, you may have heard of &amp;ldquo;chunked-encoding&amp;rdquo;.
  Instead of returning a &lt;code&gt;Content-Length&lt;/code&gt; header in the
  response, the HTTP server sends a header of &lt;code&gt;Transfer-Encoding:
  chunked&lt;/code&gt;, and then sends length-prefixed &amp;ldquo;chunks&amp;rdquo; of
  the response body. This lets the server send dynamic content, or
  buffer the response in smaller pieces so as to limit resource
  consumption. You can read more about how it works on
  &lt;a href=&quot;http://en.wikipedia.org/wiki/Chunked_transfer_encoding&quot;&gt;Wikipedia&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now why is chunked encoding interesting to us? It means on the
  client you can choose to do something as each chunk arrives. That
  is, &lt;strong&gt;while the response is still being processed and the
  socket is still in use&lt;/strong&gt;, you can do something with the
  intermediate result. Keep the bolded bit in mind when reading what
  happens below.&lt;/p&gt;

&lt;p&gt;The natural way to implement that &amp;ldquo;do something when a chunk
  comes in&amp;rdquo; pattern is to pass a block, so that's what Ripple
  does, like in the sample code below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;bucket = Riak::Client.new['foo']
bucket.keys do |keys|               # Request happening here
  keys.each {|k| bucket.delete(k) } # Another request happening here
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here's where the fun (and confusion) starts.&lt;/p&gt;

&lt;h2&gt;Ripple before Fibers&lt;/h2&gt;

&lt;p&gt;Lots of code has changed in Ripple's Curb adapter since 0.5, but I
  think it should be clear enough what happened
  in &lt;a href=&quot;https://github.com/seancribbs/ripple/blob/0.5.0/lib/riak/client/curb_backend.rb#L40&quot;&gt;that
  version&lt;/a&gt;.  Basically, the block the user passed to the HTTP
  client wrapper gets passed nearly directly to the Curl library as
  the &amp;ldquo;on_body callback&amp;rdquo;.  We wrap the user's block with our
  own so we can meet the required protocol of returning the read chunk
  size to curl.&lt;/p&gt;

&lt;p&gt;This is all well and good until you want to make another request
  from inside the block that is receiving data. Remember how we kept
  the Curl handle around for reuse between requests?  Here's where our
  code blows chunks (pardon the pun).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://seancribbs.com/page_attachments/0000/0097/pumps2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When we've &lt;strong&gt;re-entered&lt;/strong&gt; the client wrapper, we need
  to protect that Curl handle from being reused until the original
  response has finished.  On the other hand, we DO want to reuse the
  handle after the whole cycle is done.  If you're getting the sense
  that we're dealing with an issue of concurrency here, you're
  right; and yet there's no Threads in sight!&lt;/p&gt;

&lt;p&gt;The rub is that Curl passes control to the &lt;code&gt;on_body&lt;/code&gt;
  callback as soon as data is available. Since Ruby doesn't know that
  anything has changed, that callback runs in the same Thread as the
  original request, so even Thread-local variables won't protect
  against handle corruption.&lt;/p&gt;

&lt;h2&gt;Enter Fibers&lt;/h2&gt;

&lt;p&gt;Naturally, it seems like we should wrap the callback in its own
  Thread, but then we need to do some serious flow-control to avoid
  deadlocks and race-conditions.  Personally, I don't like dealing
  with semaphores and critical sections, it's just too fiddly (maybe a
  reason I'm drawn to Erlang, although that doesn't necessarily solve
  the problem). Luckily, Fibers can help. We can make the code
  appear and behave as if there were only one Thread, but also isolate
  the callback inside its own context. Don't believe me? Witness the
  code below (run in IRB originally):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;# Fibers get their own Thread locals
Thread.current[:foo] = 1 
#  =&gt; 1 
f = Fiber.new do
  p Thread.current[:foo]
  Thread.current[:foo] = 2
  p Thread.current[:foo]
end  
#  =&gt; #&amp;lt;Fiber:0x00000101470598&amp;gt;
f.resume
# nil
# 2
#  =&gt; 2 
Thread.current[:foo]
#  =&gt; 1 &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The best way I found to understand Fibers is to either liken them
  to UNIX pipes, or to look at the implementation of them for Ruby 1.8
  that Aman Gupta wrote
  (and &lt;a href=&quot;https://github.com/seancribbs/ripple/blob/master/riak-client/lib/riak/util/fiber1.8.rb&quot;&gt;is
  included&lt;/a&gt; for compatibility's sake in Ripple).&lt;/p&gt;

&lt;p&gt;In Aman's implementation, a Fiber is a Thread that has two Queues
  attached, an incoming (resume) queue and an outgoing (yield)
  queue. Since the &lt;code&gt;pop&lt;/code&gt; operation on a Queue blocks until
  there is something to pop, you can pass control to the internal
  Thread by calling &lt;code&gt;resume&lt;/code&gt;, which will then block on the
  outgoing queue for a result. When the internal Thread finishes its
  work, it calls &lt;code&gt;yield&lt;/code&gt;, which will push a value
  (potentially nil) onto the outgoing queue and return control to the
  Thread that originally called resume. Wow, what a mouthful!&lt;/p&gt;

&lt;p&gt;The moral of the story is that Fibers only execute when you
  call &lt;code&gt;resume&lt;/code&gt; and return control to the resumer when they
  call &lt;code&gt;yield&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;The Pump&lt;/h2&gt;

&lt;p&gt;Finally we get to the &amp;ldquo;pattern&amp;rdquo; I decided to call
  the &lt;code&gt;Pump&lt;/code&gt; in Ripple. Pump or message pump is really
  another name for a miniature event
  loop. &lt;a href=&quot;http://nodejs.org/&quot;&gt;You&lt;/a&gt; &lt;a href=&quot;http://en.wikipedia.org/wiki/Event_loop&quot;&gt;might&lt;/a&gt; &lt;a href=&quot;http://eventmachine.rubyforge.org/&quot;&gt;have&lt;/a&gt; &lt;a href=&quot;http://ebb.rubyforge.org/&quot;&gt;heard&lt;/a&gt; &lt;a href=&quot;http://code.macournoyer.com/thin/&quot;&gt;of&lt;/a&gt; &lt;a href=&quot;http://en.wikipedia.org/wiki/Kqueue&quot;&gt;that&lt;/a&gt; &lt;a href=&quot;http://linux.die.net/man/4/epoll&quot;&gt;idea&lt;/a&gt;
  &lt;a href=&quot;http://coolio.github.com/&quot;&gt;before&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;Fiber.new do
  loop do
    block.call Fiber.yield
  end
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Fiber.yield&lt;/code&gt; sits around waiting for input and when it
  gets it, calls the block with the passed value. When the block
  returns, we begin the whole cycle all over again. Now all the HTTP
  code has to do is resume the fiber when it receives a chunk (the
  actual code is slightly different, but this is the gist of it):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;def to_proc
  lambda {|chunk| fiber.resume chunk }
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because a picture is worth a thousand words, and describing this will get
  hairy pretty quickly, I'll let the picture do the talking.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://seancribbs.com/page_attachments/0000/0098/pumps3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you want to see the actual code that the diagram is based on,
  check it out
  on &lt;a href=&quot;https://github.com/seancribbs/ripple/blob/master/riak-client/lib/riak/client/pump.rb&quot;&gt;Github&lt;/a&gt;. It
  might also be instructive to see how the Pump is used inside the
  client wrappers (&lt;a href=&quot;https://github.com/seancribbs/ripple/blob/master/riak-client/lib/riak/client/curb_backend.rb#L37&quot;&gt;Curb&lt;/a&gt;, &lt;a href=&quot;https://github.com/seancribbs/ripple/blob/master/riak-client/lib/riak/client/excon_backend.rb#L43&quot;&gt;Excon&lt;/a&gt;).&lt;/p&gt;

&lt;h2&gt;Other options&lt;/h2&gt;

&lt;p&gt;There's more than one way to skin a cat, or to solve most technical
  problems. Some will say I should have made a connection/thread pool.
  They're probably right. This works for me, is a lightweight
  solution with small system impact, and I'm finding it useful as I
  implement other parts of the client (the Protocol Buffers interface,
  for instance).&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;</content:encoded>
	<dc:date>2011-03-08T08:45:28+00:00</dc:date>
	<dc:creator>Sean Cribbs</dc:creator>
</item>
<item rdf:about="http://buffered.io/2011/02/25/go-with-your-instinct/">
	<title>IJs Rants: Go With Your Instinct</title>
	<link>http://buffered.io/2011/02/25/go-with-your-instinct/</link>
	<content:encoded>div.tweet {
  margin: 4px;
  padding: 6px;
  border: 1px solid #f79942;
}
div.tweet h2 {
  font-size: 14px;
}
div.tweet h2, div.tweet h2 a {
  display: inline;
  width: 100%;
  text-decoration: none;
}
div.tweet img {
  float: left;
  margin-right: 4px;
  margin-bottom: 4px;
  width: 30px;
  height: 30px;
}


&lt;p&gt;&lt;a href=&quot;http://buffered.io/uploads/2011/02/double-facepalm.jpg&quot; rel=&quot;lightbox&quot;&gt;&lt;img src=&quot;http://buffered.io/uploads/2011/02/double-facepalm.jpg&quot; width=&quot;150&quot; /&gt;&lt;/a&gt;At an early age I realised that it's not always a bad thing to go with your first instinct. I won't go into the reasons here, nor the way I came to that conclusion. What I will say is that I wish I'd listened to my inner-8-year-old-self when I started down the thread of emails and Tweets you're about to read.&lt;/p&gt;
&lt;p&gt;Suffice is to say that I have learned my lesson!&lt;/p&gt;
&lt;p&gt;The thread speaks for itself. Enjoy :) &lt;!--more--&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;From:&lt;/strong&gt; Alwyn Soong&lt;br /&gt;
&lt;strong&gt;Date:&lt;/strong&gt; Wednesday 23 Feb 2011 4.15 PM&lt;br /&gt;
&lt;strong&gt;To:&lt;/strong&gt; OJ&lt;br /&gt;
&lt;strong&gt;Subject:&lt;/strong&gt; fix my viewstate&lt;br /&gt;
&lt;br /&gt;
Program has crashing on random times. Everything tried is not fix it.&lt;br /&gt;
PLEASE THIS IS URGENT ONE NOW. &lt;br /&gt;
All detail attached.&lt;br /&gt;
I ahve manager breathing down neck have two customer angry.&lt;br /&gt;
I look everywhere your blog is kindest help please thank.&lt;br /&gt;
Reward in heaven.&lt;br /&gt;
Al Soong&lt;br /&gt;
&lt;img src=&quot;http://buffered.io/uploads/2011/02/attachment.png&quot; /&gt;&lt;br /&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;div class=&quot;tweet&quot;&gt;&lt;img src=&quot;http://a2.twimg.com/profile_images/1234939088/Profile_normal.jpg&quot; /&gt;&lt;h2&gt;&lt;a href=&quot;http://twitter.com/#!/TheColonial/status/40295102056239104&quot;&gt;TheColonial&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Third email like this in as many days. Perhaps if &quot;reward in heaven&quot; wasn't written I may have helped. &lt;a href=&quot;http://twitpic.com/42t2sj&quot;&gt;http://twitpic.com/42t2sj&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;tweet&quot;&gt;&lt;img src=&quot;http://a2.twimg.com/profile_images/1234939088/Profile_normal.jpg&quot; /&gt;&lt;h2&gt;&lt;a href=&quot;http://twitter.com/#!/TheColonial/status/40296042956066816&quot;&gt;TheColonial&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Shame. All that was in the doc was a very blurry and hard to read image with a stack trace that I can't read.&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;strong&gt;From:&lt;/strong&gt; OJ&lt;br /&gt;
&lt;strong&gt;Date:&lt;/strong&gt; Wednesday 23 Feb 2011 4.24 PM&lt;br /&gt;
&lt;strong&gt;To:&lt;/strong&gt; Alwyn Soong&lt;br /&gt;
&lt;strong&gt;Subject:&lt;/strong&gt; fix my viewstate&lt;br /&gt;
&lt;br /&gt; 
Sorry to hear of your issues. The image that you have sent me is extremely poor quality and I'm unable to read it. &lt;br /&gt;
Please send a screenshot as a PNG/JPG or just copy and paste the text into an email. Don't use word.&lt;br /&gt;
&lt;br /&gt;
OJ&lt;br /&gt;
&lt;br /&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;hr /&gt;
&lt;blockquote&gt;
&lt;strong&gt;From:&lt;/strong&gt; Alwyn Soong&lt;br /&gt;
&lt;strong&gt;Date:&lt;/strong&gt; Wednesday 23 Feb 2011 4.17 PM&lt;br /&gt;
&lt;strong&gt;To:&lt;/strong&gt; OJ&lt;br /&gt;
&lt;strong&gt;Subject:&lt;/strong&gt; fix my viewstate&lt;br /&gt;
&lt;br /&gt;
happen AGAIN!&lt;br /&gt;
&lt;br /&gt;&lt;/blockquote&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Program has crashing on random times. Everything tried is not fix it.&lt;br /&gt;
PLEASE THIS IS URGENT ONE NOW. &lt;br /&gt;
All detail attached.&lt;br /&gt;
I ahve manager breathing down neck have two customer angry.&lt;br /&gt;
I look everywhere your blog is kindest help please thank.&lt;br /&gt;
Reward in heaven.&lt;br /&gt;
Al Soong &lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;hr /&gt;
&lt;div class=&quot;tweet&quot;&gt;&lt;img src=&quot;http://a2.twimg.com/profile_images/1234939088/Profile_normal.jpg&quot; /&gt;&lt;h2&gt;&lt;a href=&quot;http://twitter.com/#!/TheColonial/status/40297392909582336&quot;&gt;TheColonial&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;sigh&lt;/em&gt; some people have no idea how to get help &lt;a href=&quot;http://twitpic.com/42t54u&quot;&gt;http://twitpic.com/42t54u&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;strong&gt;From:&lt;/strong&gt; Alwyn Soong&lt;br /&gt;
&lt;strong&gt;Date:&lt;/strong&gt; Wednesday 23 Feb 2011 4.30 PM&lt;br /&gt;
&lt;strong&gt;To:&lt;/strong&gt; OJ&lt;br /&gt;
&lt;strong&gt;Subject:&lt;/strong&gt; fix my viewstate&lt;br /&gt;
&lt;br /&gt;
Uninstalling word now. what next?&lt;br /&gt;
&lt;br /&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;div class=&quot;tweet&quot;&gt;&lt;img src=&quot;http://a2.twimg.com/profile_images/1234939088/Profile_normal.jpg&quot; /&gt;&lt;h2&gt;&lt;a href=&quot;http://twitter.com/#!/TheColonial/status/40299003639758848&quot;&gt;TheColonial&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Christ on a Bike, this guy is writing code?! #fail &lt;a href=&quot;http://twitpic.com/42t6s1&quot;&gt;http://twitpic.com/42t6s1&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;tweet&quot;&gt;&lt;img src=&quot;http://a2.twimg.com/profile_images/1060266034/twitter_avatar_normal.jpg&quot; /&gt;&lt;h2&gt;&lt;a href=&quot;http://twitter.com/#!/rbanks54/status/40304384470425600&quot;&gt;rbanks54&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ROFLMAO!!! That's priceless. The next step is to tell him to pack his pc in a box because he's not qualified to use it&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;tweet&quot;&gt;&lt;img src=&quot;http://a2.twimg.com/profile_images/1234939088/Profile_normal.jpg&quot; /&gt;&lt;h2&gt;&lt;a href=&quot;http://twitter.com/#!/TheColonial/status/40347229483040768&quot;&gt;TheColonial&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;@rbanks54 and this dude is apparently a developer! Fark :-)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;tweet&quot;&gt;&lt;img src=&quot;http://a0.twimg.com/profile_images/1187162790/profilepic-2010-12-10_normal.jpg&quot; /&gt;&lt;h2&gt;&lt;a href=&quot;http://twitter.com/#!/DamonOehlman/status/40303061285076992&quot;&gt;DamonOehlman&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;@TheColonial OK, that is awesomely funny. Admittedly you did tell him not to use word :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;tweet&quot;&gt;&lt;img src=&quot;http://a2.twimg.com/profile_images/1234939088/Profile_normal.jpg&quot; /&gt;&lt;h2&gt;&lt;a href=&quot;http://twitter.com/#!/TheColonial/status/40304430628868096&quot;&gt;TheColonial&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;@DamonOehlman if someone told you to not use your oven to make ice cream would your rip the oven out of the wall? :-D&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;tweet&quot;&gt;&lt;img src=&quot;http://a1.twimg.com/profile_images/82675101/n710576649_899427_1819_normal.jpg&quot; /&gt;&lt;h2&gt;&lt;a href=&quot;http://twitter.com/#!/DamianM/status/40300422925254657&quot;&gt;DamianM&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;@TheColonial HAHAHA That's awesome! Maybe you tell him he needs to close his windows, his screen will go blank and he'll stop bothering you&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;tweet&quot;&gt;&lt;img src=&quot;http://a2.twimg.com/profile_images/1234939088/Profile_normal.jpg&quot; /&gt;&lt;h2&gt;&lt;a href=&quot;http://twitter.com/#!/TheColonial/status/40304606894489600&quot;&gt;TheColonial&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;@DamianM yeah :-) should have gone with my first impulse and ignored him.&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;strong&gt;From:&lt;/strong&gt; OJ&lt;br /&gt;
&lt;strong&gt;Date:&lt;/strong&gt; Wednesday 23 Feb 2011 4.34 PM&lt;br /&gt;
&lt;strong&gt;To:&lt;/strong&gt; Alwyn Soong&lt;br /&gt;
&lt;strong&gt;Subject:&lt;/strong&gt; fix my viewstate&lt;br /&gt;
&lt;br /&gt;
Don't uninstall word. I'm asking you to send me the stack trace in a form that I can read!&lt;br /&gt;
&lt;br /&gt;
Just paste the text of the error into an email directly&lt;br /&gt;
&lt;br /&gt;
OJ&lt;br /&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;strong&gt;From:&lt;/strong&gt; Alwyn Soong&lt;br /&gt;
&lt;strong&gt;Date:&lt;/strong&gt; Wednesday 23 Feb 2011 9.30 PM&lt;br /&gt;
&lt;strong&gt;To:&lt;/strong&gt; OJ&lt;br /&gt;
&lt;strong&gt;Subject:&lt;/strong&gt; fix my viewstate&lt;br /&gt;
&lt;br /&gt;
Thank you. You are right! Even uninstall word cannot fix of the site.&lt;br /&gt;
My normal word is the linux. I cannot find to send you the stack trace in a form. What form is it? &lt;br /&gt;
&lt;br /&gt;
The citrix not allow cuts and paste. Do you FAX or SKYPE? I read you message.&lt;br /&gt;
&lt;br /&gt;
This to:&lt;br /&gt;
&lt;pre&gt;
Program Location:
   at Microsoft.SqlServer.Management.DataTools.Interop.IDTDocTool.Save(Object dsRef, String path, Boolean okToOverwrite)
   at Microsoft.SqlServer.Management.UI.VSIntegration.Editors.VsDataDesignerNode.Save(VSSAVEFLAGS dwSave, String strSilentSaveAsName, IVsUIShell pIVsUIShell, IntPtr punkDocDataIntPtr, String&amp;amp; strMkDocumentNew, Int32&amp;amp; pfCanceled)
&lt;/pre&gt;
&lt;br /&gt;
HURRY PLEASE&lt;br /&gt;
&lt;br /&gt;
Reward in heaven.&lt;br /&gt;
Al Soong&lt;br /&gt;
&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;em&gt;&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Blessed be the Lord who has given rest to his people Israel, according to all that he&lt;/em&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;promised. Not one word has failed of all his good promise, which he spoke by Moses his&lt;/em&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;servant.                                                                               &lt;br /&gt;
&lt;/em&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;/em&gt;&lt;br /&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;strong&gt;From:&lt;/strong&gt; OJ&lt;br /&gt;
&lt;strong&gt;Date:&lt;/strong&gt; Wednesday 23 Feb 2011 10.56 PM&lt;br /&gt;
&lt;strong&gt;To:&lt;/strong&gt; Alwyn Soong&lt;br /&gt;
&lt;strong&gt;Subject:&lt;/strong&gt; fix my viewstate&lt;br /&gt;
&lt;br /&gt;
Alwyn,&lt;br /&gt;
&lt;br /&gt;
Make sure you read what I am saying, and read it properly. I never once told you to uninstall Word, I just told you not to use it to send me the details of your issue.&lt;br /&gt;
&lt;br /&gt;
Citrix shouldn't stop you from copying and pasting, but if it does, take a screenshot like you did before and open &quot;Paint&quot;. you should find it in the &quot;accessories menu&quot;. when you've opened paint, paste the screenshot in there, and save the image as a jpg, png or bmp. Then attach that to an email and send it to me.&lt;br /&gt;
&lt;br /&gt;
Sorry, but I am not giving out fax or skype details. Trust me, you're getting way more out of this than you deserve.&lt;br /&gt;
&lt;br /&gt;
OJ&lt;br /&gt;
&lt;br /&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;strong&gt;From:&lt;/strong&gt; Alwyn Soong&lt;br /&gt;
&lt;strong&gt;Date:&lt;/strong&gt; Thursday 24 Feb 2011 7.30 AM&lt;br /&gt;
&lt;strong&gt;To:&lt;/strong&gt; OJ&lt;br /&gt;
&lt;strong&gt;Subject:&lt;/strong&gt; fix my viewstate&lt;br /&gt;
&lt;br /&gt;
HURRY PLEASE. WE GO LIVE IN 20 MINUTES.&lt;br /&gt;
Maybe you look at site yourself and see error please. it is here &lt;a href=&quot;http://127.0.0.1:8081/mailout/&quot;&gt;http://127.0.0.1:8081/mailout/&lt;/a&gt;&lt;br /&gt;
Click the MAILOUT button then CHURCH NEWS. Wait for OUTLOOK LOADING stop the blink. Type the MESSAGE for the people and click the GO SEND.&lt;br /&gt;
&lt;br /&gt;
you to can getting more out of this than you deserve. My company is biggest oil 2nd company in singapore. please to send CV and we keep you remember if new opening. I have email of you will KEEP.&lt;br /&gt;
&lt;br /&gt;
In heaven please the angels felate you.&lt;br /&gt;
Al Soong&lt;br /&gt;
&lt;br /&gt;
12:1 Therefore, since we are surrounded by so great a cloud of witnesses, let us also lay aside every weight, and sin which clings so closely, and let us run with endurance the race that is set before us, 2 looking to Jesus, the founder and perfecter of our faith, who for the joy that was set before him endured the cross, despising the shame, and is seated at the right hand of the throne of God.&lt;br /&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;strong&gt;From:&lt;/strong&gt; Alwyn Soong&lt;br /&gt;
&lt;strong&gt;Date:&lt;/strong&gt; Thursday 24 Feb 2011 8.29 AM&lt;br /&gt;
&lt;strong&gt;To:&lt;/strong&gt; OJ&lt;br /&gt;
&lt;strong&gt;Subject:&lt;/strong&gt; fix my viewstate&lt;br /&gt;
&lt;br /&gt;
Is a windows 32 64
&lt;br /&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;strong&gt;From:&lt;/strong&gt; Alwyn Soong&lt;br /&gt;
&lt;strong&gt;Date:&lt;/strong&gt; Thursday 24 Feb 2011 10.15 AM&lt;br /&gt;
&lt;strong&gt;To:&lt;/strong&gt; Lingli Farhat&lt;br /&gt;
&lt;strong&gt;Cc:&lt;/strong&gt; OJ&lt;br /&gt;
&lt;strong&gt;Subject:&lt;/strong&gt; Re: UPDATE PLEASE&lt;br /&gt;
&lt;br /&gt;
10 MORE MINUTES and ALL fixed then good friend OJ fixing. Say HI! boardroom.&lt;br /&gt;
&lt;br /&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;subject: UPDATE PLEASE&lt;br /&gt;
Thursday, 24 February, 2011 12:11 AM&lt;br /&gt;
From: Lingli Farhat&lt;br /&gt;
To: alwyn soong&lt;br /&gt;
AN UPDATE PLEASE ALWYN.&lt;br /&gt;
&lt;br /&gt;
WE ARE WAITING FOR YOUR GRACIOUS PRESENCE IN THE BOARD ROOM AND WISH TO HEAR ONLY HAPPY NEWS.&lt;br /&gt;
&lt;br /&gt;
OUR PATIENCE IS CERTAINLY TESTED THIS HOUR.&lt;br /&gt;
&lt;hr /&gt;
No one has ever seen God; if we love one another, God abides in us and his love is perfected in us.&lt;br /&gt;
&lt;hr /&gt;
Free POP3 Email from www.gawab.com&lt;br /&gt;
Sign up NOW and get your account @gawab.com!!&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;strong&gt;From:&lt;/strong&gt; Lingli Farhat&lt;br /&gt;
&lt;strong&gt;Date:&lt;/strong&gt; Thursday 24 Feb 2011 10.49 AM&lt;br /&gt;
&lt;strong&gt;To:&lt;/strong&gt; Alwyn Soong&lt;br /&gt;
&lt;strong&gt;Cc:&lt;/strong&gt; OJ&lt;br /&gt;
&lt;strong&gt;Subject:&lt;/strong&gt; RE: re: UPDATE PLEASE&lt;br /&gt;
 &lt;br /&gt;
TIME IS MOST CERTAINLY &quot;UP&quot; ALWYN.&lt;br /&gt;
&lt;br /&gt;
I HAVE LOOKED AGAIN AND THE EXPLORER IS STILL EMPTY  &lt;a href=&quot;http://127.0.0.1:8081/mailout/&quot;&gt;http://127.0.0.1:8081/mailout/&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
I WILL SEE YOU AND YOUR &quot;OJ&quot; FRIEND IN MY OFFICE BEFORE TODAY IS &quot;UP&quot; &lt;br /&gt;
&lt;br /&gt;
FATHER LINGLI FARHAT&lt;br /&gt;
&lt;br /&gt;
OFFICE OF THE MINISTER&lt;br /&gt;
&lt;hr /&gt;
The thoughts of the wicked are an abomination to the Lord, but gracious words are pure.&lt;br /&gt;
&lt;br /&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;strong&gt;From:&lt;/strong&gt; Alwyn Soong&lt;br /&gt;
&lt;strong&gt;Date:&lt;/strong&gt; Thursday 24 Feb 2011 11.01 AM&lt;br /&gt;
&lt;strong&gt;To:&lt;/strong&gt; OJ&lt;br /&gt;
&lt;strong&gt;Cc:&lt;/strong&gt; Lingli Farhat&lt;br /&gt;
&lt;strong&gt;Subject:&lt;/strong&gt; RE: re: UPDATE PLEASE&lt;br /&gt;
 &lt;br /&gt;
OJ good frien please in dark hour. I HAVE THE VIEWSTATE! I HAVE IT! THIS IS HERE&lt;br /&gt;
 &lt;br /&gt;
Took all day to copy out&lt;br /&gt;
 &lt;br /&gt;
QSBqb2tlJ3Mgbm90IGEgam9rZSB1bnRpbCBpdCBnb2VzICp0b28qIGZhci4NCkxvdHMgb2YgbG92&lt;br /&gt;
ZQ0KTGVvbg0Kd2l0aCBoZWxwIGZyb20gUmh5cyBhbmQgSm9lbC4NCkFsc28gQkNDJ2QgLS0gSm9z&lt;br /&gt;
ZXBoLg==&lt;br /&gt;
&lt;br /&gt;
If you read it for me I get OUT from hair. Expertschange sayt BASE64????? &lt;br /&gt;
 &lt;br /&gt;
Reward in heaven&lt;br /&gt;
Al Soong&lt;br /&gt;
CHIEF ENGINEER&lt;br /&gt;
 &lt;br /&gt;
&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;&lt;br /&gt;
&lt;/em&gt;&lt;/strong&gt;22 But the fruit of the Spirit is love, joy, peace, patience, kindness, goodness, faithfulness,   &lt;strong&gt;&lt;em&gt;&lt;br /&gt;
&lt;/em&gt;&lt;/strong&gt;23 gentleness, self-control; against such things there is no law.                                    &lt;strong&gt;&lt;em&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
The garbled text above, when &lt;a href=&quot;http://www.motobit.com/util/base64-decoder-encoder.asp&quot;&gt;base 64 decoded&lt;/a&gt; reads:
&lt;blockquote&gt;
&lt;pre&gt;
A joke's not a joke until it goes &lt;em&gt;too&lt;/em&gt; far.
Lots of love
Leon
with help from Rhys and Joel.
Also BCC'd -- Joseph.
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;div class=&quot;tweet&quot;&gt;&lt;img src=&quot;http://a2.twimg.com/profile_images/1234939088/Profile_normal.jpg&quot; /&gt;&lt;h2&gt;&lt;a href=&quot;http://twitter.com/#!/TheColonial/status/40577362336677889&quot;&gt;TheColonial&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I've just been absolutely owned by some soon to be ex-friends :) Great prank.. you utter, utter bastards :)&lt;/p&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;strong&gt;From:&lt;/strong&gt; Alwyn Soong&lt;br /&gt;
&lt;strong&gt;Date:&lt;/strong&gt; Thursday 24 Feb 2011 11.11 AM&lt;br /&gt;
&lt;strong&gt;To:&lt;/strong&gt; OJ&lt;br /&gt;
&lt;strong&gt;Subject:&lt;/strong&gt; ERLANG&lt;br /&gt;
&lt;br /&gt;
Now i learn erlang.&lt;br /&gt;
 &lt;br /&gt;
You teach me please.&lt;br /&gt;
 &lt;br /&gt;
What first? &lt;br /&gt;
&lt;br /&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;strong&gt;From:&lt;/strong&gt; OJ&lt;br /&gt;
&lt;strong&gt;Date:&lt;/strong&gt; Thursday 24 Feb 2011 11.56 AM&lt;br /&gt;
&lt;strong&gt;To:&lt;/strong&gt; Alwyn Soong&lt;br /&gt;
&lt;strong&gt;Subject:&lt;/strong&gt; RE: ERLANG&lt;br /&gt;
&lt;br /&gt;
sure.. start with this:&lt;br /&gt;&lt;/blockquote&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nf&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bullet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href=&quot;http://secretgeek.net/&quot;&gt;Leon&lt;/a&gt;, &lt;a href=&quot;http://i-think22.net/&quot;&gt;Rhys&lt;/a&gt;, &lt;a href=&quot;http://callvirt.net/&quot;&gt;Joel&lt;/a&gt; and to a point &lt;a href=&quot;http://jcooney.net/&quot;&gt;Joseph&lt;/a&gt;: you've started a war!&lt;/p&gt;
&lt;p&gt;Well played :)&lt;/p&gt;</content:encoded>
	<dc:date>2011-02-25T21:31:35+00:00</dc:date>
</item>
<item rdf:about="http://buffered.io/2011/02/15/now-powered-by-blogofile/">
	<title>IJs Rants: Now Powered by Blogofile</title>
	<link>http://buffered.io/2011/02/15/now-powered-by-blogofile/</link>
	<content:encoded>&lt;p&gt;&lt;a href=&quot;http://buffered.io/uploads/2011/02/V8SFIEngine2001.jpg&quot; title=&quot;Time for a new engine&quot; rel=&quot;lightbox&quot;&gt;&lt;img src=&quot;http://buffered.io/uploads/2011/02/V8SFIEngine2001.jpg&quot; width=&quot;150&quot; alt=&quot;Time for a new engine&quot; /&gt;&lt;/a&gt;When I &lt;a href=&quot;http://buffered.io/2006/09/10/office-registration-and-activation/&quot;&gt;first started blogging&lt;/a&gt; back in 2006 the platform of choice at the time was &lt;a href=&quot;http://wordpress.org/&quot;&gt;Wordpress&lt;/a&gt;, a feature-rich blogging platform build with &lt;a href=&quot;http://www.php.net/&quot;&gt;PHP&lt;/a&gt;. Since then the platform has improved substantially and the number of community-driven contributions and plug-ins has increased to a massive number. I've thoroughly enjoyed using Wordpress for the past 5 years and would recommend it to anyone (I already have!) who is looking for a quality blogging platform.&lt;/p&gt;
&lt;p&gt;For me, however, Wordpress was becoming less and less appealing. This isn't due to a failing in the platform itself, but more because my needs/desires for my blogging engine were changing. &lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;One of the curses of maintaining a technical blog is that the posts very quickly &quot;expire&quot;. Their use-by date can be very short, and hence it becomes a burden to keep them up to date. So far, I've not done a great job of updating my posts, partly due to laziness, and partly because doing it using Wordpress is a little painful. I was looking for a solution to this problem, and nothing that I could see coming out of the Wordpress community was helping. What I really wanted was to have instant access to posts on my file system, not via a web front-end. Ideally, I would be able to store all of my posts in a &lt;a href=&quot;http://hg-scm.org/&quot;&gt;Mercurial&lt;/a&gt; repository.&lt;/p&gt;
&lt;p&gt;I was also tired of having to write posts using straight HTML. I am not a fan of using online editors. Browsers are unpredictable and a stray keystroke can move you from your page to another page, resulting in you losing anything that hasn't been saved along the way. Also, the editors are terrible, relatively featureless and often buggy. Wordpress's editor, while very good, is not my cup of tea. It was getting to the point where I really wanted to write my posts in &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt; instead. I am aware of some plug-ins which allow this kind of functionality, but my experiences with them weren't that great. I wanted to write things in VIM and easily save/publish to the site without having to leave VIM.&lt;/p&gt;
&lt;p&gt;Recently I have received offers of help in updating content from other people in the technical community. They have been interested in getting access to the content so they can contribute in keeping it up to date. Providing access to these people would be painful using Wordpress as a tool. Not because it doesn't do access control, but because the workflow is just unpleasant. Ultimately the ideal scenario is to store my Mercurial repository, with all the posts in it, on &lt;a href=&quot;http://bitbucket.org/&quot;&gt;Bitbucket&lt;/a&gt; so that other people can fork the repository, make changes and submit &lt;a href=&quot;http://confluence.atlassian.com/display/BITBUCKET/Forking+a+Bitbucket+Repository&quot;&gt;pull requests&lt;/a&gt; when they have modified the content. I could easily merge the changes and republish my site.&lt;/p&gt;
&lt;p&gt;Apart from the workflow and technical reasons, I was very interested in changing the way the site was served. The blog content is totally static except for two cases, both of which can be handled externally:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Comments - for a while I've been using &lt;a href=&quot;http://disqus.com/&quot;&gt;Disqus&lt;/a&gt; to handle my comments. The platform is awesome. No spam, no need to get people to sign in to comment, no overhead. Can't recommend it enough.&lt;/li&gt;
&lt;li&gt;Post updates - posts are updated by me and only me. All I needed was a way of converting my posts to a static HTML website and then copying that to my webserver.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since I had no need for a &lt;em&gt;dynamic&lt;/em&gt; site, I could easily move away from PHP and database-driven content. All I needed was a bit of help.&lt;/p&gt;
&lt;h2&gt;Enter Blogofile&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Blogofile is a static website compiler, primarily (though not exclusively) designed to be a simple blogging engine. It requires no database and no special hosting environment. You customize a set of templates with Mako, create posts in a markup language of your choice (see Post Content) and Blogofile renders your entire website as static HTML and Atom/RSS feeds which you can then upload to any old web server you like.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Exactly what I need! I'm no &lt;a href=&quot;http://www.python.org/&quot;&gt;Python&lt;/a&gt; guru, but I knew I had enough coding chops to pick up the essentials to hack together a template which would suit my needs. I decided to dive in. My plan was:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Port my current WP theme to Blogofile (which uses &lt;a href=&quot;http://www.makotemplates.org/&quot;&gt;Mako&lt;/a&gt; behind the scenes).&lt;/li&gt;
&lt;li&gt;Hack the engine a little to include:&lt;ul&gt;
&lt;li&gt;OpenID delegation support&lt;/li&gt;
&lt;li&gt;Feedburner support&lt;/li&gt;
&lt;li&gt;Google Analytics integration&lt;/li&gt;
&lt;li&gt;Series support&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Get a &lt;a href=&quot;http://aws.amazon.com/free/&quot;&gt;free Micro instance&lt;/a&gt; running on &lt;a href=&quot;http://aws.amazon.com/ec2/&quot;&gt;EC2&lt;/a&gt; with &lt;a href=&quot;http://www.python.org/&quot;&gt;Python&lt;/a&gt; and &lt;a href=&quot;http://hg-scm.org/&quot;&gt;Mercurial&lt;/a&gt; installed.&lt;/li&gt;
&lt;li&gt;Set up a Mercurial hook which regenerates the site and makes it available to the public when content is pushed to the repository.&lt;/li&gt;
&lt;li&gt;Migrate the content from the WP site to a set of Markdown posts.&lt;/li&gt;
&lt;li&gt;Fix links/images/etc from the previous posts and include them in the new site content.&lt;/li&gt;
&lt;li&gt;Hack a few other things to make sure the content looks relatively similar, including the support for the &lt;code&gt;&amp;lt;!--more--&amp;gt;&lt;/code&gt; tag (which splits posts in WP).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It will come as no surprise that I had to learn a little bit along the way :) I'm now exposed to how Python hangs together, and I have a (relatively) solid grasp of Mako templates.&lt;/p&gt;
&lt;p&gt;The net result is the site that you're now looking at! From my side of the planet the speed different is noticable, and the experience of publishing to it is as simple as &lt;code&gt;hg commit -m &quot;message&quot; &amp;amp;&amp;amp; hg push web&lt;/code&gt; - I don't have to leave VIM at all to do that. All of my goals have been met, and I'm happy :)&lt;/p&gt;
&lt;p&gt;Now this task is out of the way, I'll be continuing work on my &lt;a href=&quot;http://buffered.io/series/web-development-with-erlang/&quot;&gt;Erlang blog series&lt;/a&gt;. I'm looking forward to having the next post done and ready for your critique.&lt;/p&gt;
&lt;p&gt;For those of you considering other blogging platforms which suit different workflows better than the mainstream options, be sure to check &lt;a href=&quot;http://blogofile.com/&quot;&gt;Blogofile&lt;/a&gt; out. It's a great system, and worth the effort of diving into. I'm happy to answer questions if you have any.&lt;/p&gt;
&lt;p&gt;Until next time!&lt;/p&gt;</content:encoded>
	<dc:date>2011-02-16T01:44:05+00:00</dc:date>
</item>
<item rdf:about="http://www.themarkphillips.com//2011/02/03/Why-Do-People-Watch-Code-Survey-Results-Edition">
	<title>themarkphillips: Why Do People &quot;Watch&quot; Code? Survey Results Edition</title>
	<link>http://www.themarkphillips.com//2011/02/03/Why-Do-People-Watch-Code-Survey-Results-Edition.html</link>
	<content:encoded>&lt;p class=&quot;date&quot;&gt;&lt;i&gt;&lt;strong&gt;February 2, 2011&lt;/strong&gt;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;A few weeks ago I dashed off a post called &quot;&lt;a href=&quot;http://www.themarkphillips.com/2011/01/20/Why-Do-People-Watch-Code.html&quot;&gt;Why Do People &quot;Watch&quot; Code? A Short Survey For Open Source Developers&lt;/a&gt;.&quot; I had been spending some time attempting to pin down the significance of GitHub Watchers. Specifically, I was 	struggling with how much emphasis should be put on the increase (or decrease) in project watchers when attempting to calculate the growth of &lt;a href=&quot;http://wiki.basho.com&quot;&gt;Riak's&lt;/a&gt; open source community.&lt;/p&gt;
&lt;p&gt;Instead of guessing, I resolved to ask developers two simple questions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;When do you typically start Watching/Following a repo?&lt;/li&gt;
&lt;li&gt;Why do you choose to start Watching/Following a given repo?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;At the time of publishing this post, I have received exactly 400 responses[1]. This is not an insignificant number and I take this to be an adequate sample size to draw a few conclusions. So, what did I find?&lt;/p&gt;
&lt;h3&gt;1. When do you typically start Watching/Following a repo?&lt;/h3&gt;
&lt;table id=&quot;stats&quot; cellpadding=&quot;5&quot;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&quot;response&quot;&gt;Available Responses&lt;/th&gt; &lt;th class=&quot;total&quot;&gt;Total Responses&lt;/th&gt; &lt;th class=&quot;percentage&quot;&gt;% of Total&lt;/th&gt;
&lt;/tr&gt;
&lt;tr class=&quot;columns&quot;&gt;
&lt;td&gt;When a piece of code seems interesting even though I may not have immediate use for it&lt;/td&gt;
&lt;td class=&quot;total&quot;&gt;311&lt;/td&gt;
&lt;td class=&quot;response&quot;&gt;78&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;columns&quot;&gt;
&lt;td&gt;When I clone it and start experimenting with it&lt;/td&gt;
&lt;td class=&quot;total&quot;&gt;39&lt;/td&gt;
&lt;td class=&quot;response&quot;&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;columns&quot;&gt;
&lt;td&gt;Only when I start using it in production&lt;/td&gt;
&lt;td class=&quot;total&quot;&gt;24&lt;/td&gt;
&lt;td class=&quot;response&quot;&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;columns&quot;&gt;
&lt;td&gt;Never voluntarily. I only start Watching something when forking a repo makes me a Watcher by default&lt;/td&gt;
&lt;td class=&quot;total&quot;&gt;11&lt;/td&gt;
&lt;td class=&quot;response&quot;&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;columns&quot;&gt;
&lt;td&gt;Other&lt;/td&gt;
&lt;td class=&quot;total&quot;&gt;15&lt;/td&gt;
&lt;td class=&quot;response&quot;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;2. Why do you choose to start Watching/Following a given repo?&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;(Respondents were asked to choose all that applied.)&lt;/em&gt;&lt;/p&gt;
&lt;table id=&quot;stats&quot; cellpadding=&quot;5&quot;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&quot;response&quot;&gt;Available Reponses&lt;/th&gt; &lt;th class=&quot;total&quot;&gt;Total Responses&lt;/th&gt; &lt;th class=&quot;percentage&quot;&gt;% of Total&lt;/th&gt;
&lt;/tr&gt;
&lt;tr class=&quot;columns&quot;&gt;
&lt;td&gt;I'm interested its progress and development&lt;/td&gt;
&lt;td class=&quot;total&quot;&gt;353&lt;/td&gt;
&lt;td class=&quot;response&quot;&gt;91&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;columns&quot;&gt;
&lt;td&gt;I'm using it in production&lt;/td&gt;
&lt;td class=&quot;total&quot;&gt;212&lt;/td&gt;
&lt;td class=&quot;response&quot;&gt;55&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;columns&quot;&gt;
&lt;td&gt;I like the author's code&lt;/td&gt;
&lt;td class=&quot;total&quot;&gt;183&lt;/td&gt;
&lt;td class=&quot;response&quot;&gt;47&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;columns&quot;&gt;
&lt;td&gt;Not sure. I just watch because I can&lt;/td&gt;
&lt;td class=&quot;total&quot;&gt;28&lt;/td&gt;
&lt;td class=&quot;response&quot;&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;columns&quot;&gt;
&lt;td&gt;I saw it on Hacker News&lt;/td&gt;
&lt;td class=&quot;total&quot;&gt;47&lt;/td&gt;
&lt;td class=&quot;response&quot;&gt;12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;columns&quot;&gt;
&lt;td&gt;I'm being paid to work on the code so I should probably keep an eye on it&lt;/td&gt;
&lt;td class=&quot;total&quot;&gt;44&lt;/td&gt;
&lt;td class=&quot;response&quot;&gt;11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;columns&quot;&gt;
&lt;td&gt;Other&lt;/td&gt;
&lt;td class=&quot;total&quot;&gt;56&lt;/td&gt;
&lt;td class=&quot;response&quot;&gt;15&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The responses to &quot;When do you start watching?&quot; are more or less in line with what I suspected. The overwhelming majority of people (78%)&amp;nbsp;watch a repo when they are &quot;interested.&quot; A good portion of this 78%  will probably come back to it and test drive the code when they have free time or actual use for it. But maybe they won't. In other words, &lt;em&gt;Have Interest, Will Watch.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;6% of people surveyed said they only watch when they are using something in production. That's a small number, but it's still useful. For example, in the case of &lt;a href=&quot;https://github.com/ry/node&quot;&gt;node.js&lt;/a&gt;, we can say that, based on people using GitHub alone, at least 277 people/organizations are running node.js in production somewhere. That number undoubtedly gets significantly larger when you take into account the approximately 463 people (or 10% based on the survey results) who started watching when they cloned the repo to start experimenting. (There will also be more production users who come from the &quot;Interest&quot; and &quot;Fork&quot; constituencies.)&lt;/p&gt;
&lt;p&gt;The &quot;Why&quot; responses are a bit more interesting, if only because participants had the ability to select multiple reasons. Again, &quot;interest&quot; takes the top spot, but we also see that people are watching a lot of times because they like the author's code (47% of total respondents). 56 people (or 15%) checked off &quot;Other&quot; as a reason for why they watch a repo. Nearly 20 of these involved using the watcher feature as a &quot;bookmark&quot; (with at least one person even equating it to Delicious).&lt;/p&gt;
&lt;h2&gt;What do these numbers mean for community growth?&lt;/h2&gt;
&lt;p&gt;It would appear that for community managers the &quot;watchers&quot; metric should be treated primarily as a sign of increased interest and popularity. Developers largely use it to bookmark projects in which they are interested. And perhaps that's what our social coding overlords at GitHub wanted it to be. (If that's the case, then it's a wonderful feature.) I have no doubt that an increase in watchers means an increase in users, but only 6% of people surveyed hold out until production usage to start watching. The path from interest to cloning to production usage is a complex one, &amp;nbsp;and knowing how many watchers convert to users (and potentially contribute to a project's community) is something that's extremely hard to pin down. I'll continue to keep an eye on Watchers, but I won't treat it as a primary indicator of community growth.&lt;/p&gt;
&lt;p&gt;Here's my advice to you, GitHub: make it easier for developers to declare that they are using code in production. Sure, this is for my own selfish community manager-centric needs, but other people will find it valuable, too. This might be as simple as just adding a &quot;Production User&quot; option to the right of &quot;Watcher&quot; and &quot;Fork&quot; buttons. Or maybe it's more complex than that. However you implement it, I think it would be a fantastic addition...&lt;/p&gt;
&lt;p&gt;Thanks to everyone who participated. I found this data immensely valuable. I hope you did, too.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://twitter.com/pharkmillups&quot;&gt;Mark&amp;nbsp;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[1] &lt;a href=&quot;https://spreadsheets.google.com/ccc?key=0AhdTgCqQts98dFlEYVNWVWkwS1hsSktRLV9HTFg0eHc&amp;hl=en&quot;&gt;Raw Survey Data&lt;/a&gt;&lt;/p&gt;</content:encoded>
	<dc:date>2011-02-03T08:00:00+00:00</dc:date>
</item>
<item rdf:about="http://www.themarkphillips.com//2011/01/20/Why-Do-People-Watch-Code">
	<title>themarkphillips: Why Do People &quot;Watch&quot; Code?</title>
	<link>http://www.themarkphillips.com//2011/01/20/Why-Do-People-Watch-Code.html</link>
	<content:encoded>&lt;p class=&quot;date&quot;&gt;&lt;i&gt;&lt;strong&gt;January 20, 2011&lt;/strong&gt;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;As community manager for various open source projects at &lt;a href=&quot;http://www.basho.com&quot;&gt;Basho&lt;/a&gt;, I spend a lot of time thinking about community growth. Questions like &quot;How fast is &lt;a href=&quot;http://www.themarkphillips.com/wiki.basho.com&quot;&gt;Riak&lt;/a&gt; growing compared to similar projects in the space?&quot; and &quot;What metrics should be weighted more when calculating growth rates?&quot; keep me up at night (no joke).&lt;/p&gt;
&lt;p&gt;Lately I've been thinking about how to best use the various stats that are easily gleaned from &lt;a href=&quot;http://www.themarkphillips.com/github.com&quot;&gt;GitHub&lt;/a&gt; repositories (which is the canonical home for &lt;a href=&quot;http://github.com/basho&quot;&gt;all of Basho's code&lt;/a&gt;). Among the available repo-specific metrics are the number of &quot;Watchers&quot; and the number of &quot;Forks.&quot; I keep an eye on these two stats quite compulsively and record their ups and downs on a weekly basis. (You can see a list of the most watched GitHub repositories &lt;a href=&quot;https://github.com/popular/watched&quot;&gt;here&lt;/a&gt; and a list of the most forked repositories &lt;a href=&quot;https://github.com/popular/forked&quot;&gt;here&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Forks are much easier to use than Watchers when talking about growth; though what it means to &quot;fork&quot; a project has changed drastically over the past several years, when someone forks your code it implies, among other things, that they intend to spend time working with and on it (and perhaps even contribute!). But what about Watchers? What does it mean when one starts watching a repo? What level of commitment does it take to start watching a repo and what does that mean for the growth of said project? Without a doubt Watcher growth is analogous to popularity growth, but what does that mean for community growth (read: &lt;strong&gt;actual use and participation in development&lt;/strong&gt;)?&lt;/p&gt;
&lt;p&gt;I poked around a bit (and even talked to a friend at GitHub briefly) but couldn't seem to find any data or explanation around why or what causes people to start watching repos on GH. So, I threw together this simple survey (&lt;strong&gt;&lt;em&gt;scroll down&lt;/em&gt;&lt;/strong&gt;) for anyone who is using GitHub and/or BitBucket. (BitBucket also displays Forks and has the concept of &quot;Followers&quot; which I take to be analogous to Watchers.)&lt;/p&gt;
&lt;p&gt;I understand there is some overlap between &quot;When&quot; and &quot;Why&quot;, but I though it worthwhile to ask them both anyways.&lt;/p&gt;
&lt;p&gt;Thanks for your participation. I should take you all of 30 seconds...&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://twitter.com/pharkmillups&quot;&gt;Mark&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;(&lt;strong&gt;Update: &lt;/strong&gt;&lt;em&gt;&lt;a href=&quot;http://news.ycombinator.com/item?id=2126011&quot;&gt;Here's the Hacker News comment thread based on this post.&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Loading...&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;</content:encoded>
	<dc:date>2011-01-20T08:00:00+00:00</dc:date>
</item>
<item rdf:about="http://seancribbs.com/tech/2011/01/01/happy-birthday-ripple/">
	<title>Sean Cribbs - Digital Renaissance Man: Happy Birthday, Ripple</title>
	<link>http://seancribbs.com/tech/2011/01/01/happy-birthday-ripple/</link>
	<content:encoded>&lt;p&gt;About one year ago (Jan 5 to be exact), I started work on &lt;a href=&quot;https://github.com/seancribbs/ripple&quot;&gt;Ripple&lt;/a&gt;, the Ruby language driver for &lt;a href=&quot;http://wiki.basho.com/&quot;&gt;Riak&lt;/a&gt;.  What an amazing year!  Next to Erlang and Java, it is probably the most used language driver for Riak, has 50 forks and nearly 300 watchers on &lt;a href=&quot;https://github.com/&quot;&gt;Github&lt;/a&gt;.  As tribute to the year, I&amp;#8217;ve used &lt;a href=&quot;http://code.google.com/p/codeswarm&quot;&gt;codeswarm&lt;/a&gt; &lt;a href=&quot;http://sams-rants.blogspot.com/2010/02/codeswarm-01-on-os-x-106-with-git-repo.html&quot;&gt;and iMovie&lt;/a&gt; to make a visualization of Ripple&amp;#8217;s progress over the past year.&lt;/p&gt;
&lt;p&gt;High points:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;First week of February, I spent all week in Boston at Basho&amp;#8217;s homebase working with the developers, so lots of commits and files piled in.&lt;/li&gt;
	&lt;li&gt;Ripple was opened to the public on February 10, right after &lt;a href=&quot;http://twitter.com/argv0&quot;&gt;Andy&lt;/a&gt; and I were interviewed on &lt;a href=&quot;http://twitter.com/#!/changelogshow&quot;&gt;The Changelog&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;February 22 saw the first outside contributor, &lt;a href=&quot;http://rigelgroupllc.com/&quot;&gt;John Lynch&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;In April, &lt;a href=&quot;http://twitter.com/adamachine&quot;&gt;Adam Hunter&lt;/a&gt; spiked out embedded associations.&lt;/li&gt;
	&lt;li&gt;In early May, while I was at &lt;a href=&quot;http://reddirtrubyconf.com/&quot;&gt;Red Dirt RubyConf&lt;/a&gt;, I split off the &lt;a href=&quot;http://rubygems.org/gems/riak-client&quot; title=&quot;riak-client&quot;&gt;basic client&lt;/a&gt; from the &lt;a href=&quot;http://rubygems.org/gems/ripple&quot; title=&quot;ripple&quot;&gt;object mapper&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;A bunch of new contributors sent patches in June and July.&lt;/li&gt;
	&lt;li&gt;0.8.0 was released on August 31 and was &lt;a href=&quot;http://seancribbs.com/tech/2010/08/31/ripple-0-8-is-full-of-good-stuff/&quot;&gt;chock full of cool new features&lt;/a&gt;, including session stores, Rails 3 final support, and linked associations.&lt;/li&gt;
	&lt;li&gt;In mid November, &lt;a href=&quot;https://github.com/aphyr&quot;&gt;Kyle Kingsbury&lt;/a&gt; released riak-client from the shackles of ActiveSupport.&lt;/li&gt;
	&lt;li&gt;Later in November, I made &lt;a href=&quot;https://github.com/duff&quot;&gt;Duff Omelia&lt;/a&gt; and Adam Hunter committers to the project. A few weeks later, Duff helped me implement better testing support.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enjoy the video (&lt;em&gt;as I write this, it is still converting&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://vimeo.com/18348419&quot;&gt;Ripple 1-year Birthday Video&lt;/a&gt; from &lt;a href=&quot;http://vimeo.com/seancribbs&quot;&gt;Sean Cribbs&lt;/a&gt; on &lt;a href=&quot;http://vimeo.com&quot;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;</content:encoded>
	<dc:date>2011-01-01T15:51:24+00:00</dc:date>
	<dc:creator>Sean Cribbs</dc:creator>
</item>
<item rdf:about="http://www.themarkphillips.com//2010/12/08/Whats-Missing-in-the-NoSQL-Space">
	<title>themarkphillips: What's Missing in the NoSQL Space</title>
	<link>http://www.themarkphillips.com//2010/12/08/Whats-Missing-in-the-NoSQL-Space.html</link>
	<content:encoded>&lt;p class=&quot;date&quot;&gt;&lt;i&gt;&lt;strong&gt;December 08, 2010&lt;/strong&gt;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;The NoSQL space is awash in commentary and publications. &lt;a href=&quot;http://www.nosqlweekly.com/&quot;&gt;Seriously&lt;/a&gt;, &lt;a href=&quot;http://www.nosqldatabases.com/&quot;&gt;it's&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;http://nosql.mypopescu.com/&quot;&gt;getting&lt;/a&gt; &lt;a href=&quot;http://nosqlpedia.com/&quot;&gt;crowded.&lt;/a&gt; This is a very good thing. It means that there is enough interest and usage of these technologies to necessitate regular reporting. However, it's time to take this coverage a bit deeper.&lt;/p&gt;
&lt;p&gt;We need to close the gap between very high-level (and sometimes &quot;sponsored&quot;) blog posts, NoSQL Wikis, and immensely-valuable but dense academic papers. Without a doubt they all have their place, but result in a lot of valuable knowledge going unaddressed. Most developers can either rattle off the buzzwords and newest features or can recite the code and design principles verbatim (and those that fall into the latter category are few and far between). What's worse is that a lot of times how a database works is misunderstood until it's too late and something breaks in production, something that could have been prevented with more knowledge of how a given DB is supposed to function.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So What's Missing?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Highly-technical, side-by-side behavior comparisons. Start writing about what is happening under the hood of each of these DBs and how they stack up in relation to their peers. For example, it's easy to say, &quot;CouchDB uses MVCC for versioning whereas Riak uses vector clocks&quot; but what does that mean in practice and how could that affect your query pattern under load?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Here are some more examples:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Data Distribution and Replication&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Riak, Cassandra and Voldemort are often categorized as &quot;Dynamo Clones.&quot; Many people cite simple, built-in replication and masterless data distribution as the distinguishing features for this class of NoSQL DBs. But they each do it differently and build in various control mechanisms. Put the different approaches and design principles side-by-side for all these databases and walk your readers through what happens when data is written, read, or deleted in an X node cluster. What happens when you bring up or take down a new server?  Redis, MongoDB and others all have their own approach to data distribution. What does their code say will happen? How should you plan for this?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. MapReduce and Other Querying&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Riak, MongoDB, CouchDB and others push MapReduce as a query method. And, not surprisingly, they all do it differently. Put their MapReduce implementations side-by-side and walk readers through what it is and how it can be used. And be sure to compare it to Hadoop's MapReduce. This differentiation is a biggie.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Data Durability&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Databases should offer you some guarantee that, once written, your data will persist to something (preferably a disk) and be safe and free of corruption in the event of failures. Write an overview of how each database handles durability and how this might impact your choice. Is each database even built for durable writes out of the box? What are the backend storage options and what are their pros and cons?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. Data Versioning and Consistency&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;What mechanisms are there in each database for version control? Riak uses vector clocks. CouchDB uses MVCC. MongoDB &quot;is more of a traditional update-in-place store.&quot; Examine the code from each database that handles versioning and give some details on how this should be accounted for in applications.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. Interfaces, APIs and Data Formats&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Cassandra employs Thrift. Riak uses both HTTP and Protocol Buffers for APIs. MongoDB uses a Wire Protocol and BSON. The list goes on and on. Write a post that compares API design. Talk about what different data formats each DB will store and how that will impact your application design. How mature is the client code for a given language? What is the state of the documentation for their respective clients?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6. Operations&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;How easy is it to back up and restore a node? Does each DB even offer this functionality? Is there support for backing up an entire cluster? Is there a full-fledged and robust suite of command line tools? How easy is it to add storage capacity? Or reduce cluster size to save money when running on Amazon or Rackspace? What are the &quot;gotchas&quot;? And, once again, how should you plan for the state of this functionality in your application?&lt;/p&gt;
&lt;p&gt;And this list is just a start. (This took me about 10 minutes of thinking to compile). &lt;strong&gt;&lt;em&gt;Also, huge bonus points will be awarded and traffic spikes will occur if you take the time to include MySQL and/or PostgreSQL.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The bottom line is that these databases are maturing quickly and any developer worth their salt should now be in favor of the right tool for the job (and if you're still on the fence about putting something called &quot;Redis&quot; or &quot;CouchDB&quot; into production, you may want to reconsider your approach to selecting tools as you're missing out on some awesome technology that's solving real problems). These tool-hungry developers need a person or group of persons (that are not vendors or paid by vendors) to deliver deep technical commentary on a regular basis to help them make informed decisions about what DBs to test and deploy. You could be this person.&lt;/p&gt;
&lt;p&gt;Don't get me wrong, there is &lt;strong&gt;absolutely&lt;/strong&gt; no substitute for real testing. Test, retest, break something, and then test again. But technical writing that delves into behavioral comparisons for DB X, Y and Z according to the code and sanctioned documentation would save developers scores of time when researching and serve to educate the masses.&lt;/p&gt;
&lt;p&gt;If you take on this task, your blog/newsletter/website will be inundated with visitors, conference organizers everywhere will ask you to moderate panels, and developers, CTOs, VPs of Engineering (and maybe even analysts) everywhere will bookmark your posts. Most importantly, I will hug you. Actually, the only thing I can guarantee is that I will hug you, but this is undoubtedly a great opportunity to establish yourself as a technical authority on NoSQL DBs.&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Any takers?&amp;nbsp;&lt;/p&gt;</content:encoded>
	<dc:date>2010-12-08T08:00:00+00:00</dc:date>
</item>
<item rdf:about="http://buffered.io/2010/11/26/issue-with-google-reader/">
	<title>IJs Rants: Issue with Google Reader</title>
	<link>http://buffered.io/2010/11/26/issue-with-google-reader/</link>
	<content:encoded>&lt;p&gt;For some reason Google Reader has failed to update and include my latest &lt;a href=&quot;http://buffered.io/2010/10/13/webmachine-erlydtl-and-riak-part-3/&quot;&gt;Web Development in Erlang&lt;/a&gt; post. This is rather odd as every other RSS reader I have tested (including the one built-in to MS Outlook) has managed to parse and handle the post just fine. I have attempted to get in touch with the GReader team but I haven't had any luck so far in getting them to respond.&lt;/p&gt;
&lt;p&gt;Those of you who are using Google Reader and are interested in this post, please point your browser in &lt;a href=&quot;http://buffered.io/2010/10/13/webmachine-erlydtl-and-riak-part-3/&quot;&gt;this direction&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Apologies for the issue.&lt;/p&gt;</content:encoded>
	<dc:date>2010-11-26T14:58:05+00:00</dc:date>
</item>
<item rdf:about="http://buffered.io/2010/10/13/webmachine-erlydtl-and-riak-part-3/">
	<title>IJs Rants: Webmachine, ErlyDTL and Riak - Part 3</title>
	<link>http://buffered.io/2010/10/13/webmachine-erlydtl-and-riak-part-3/</link>
	<content:encoded>span.filename
{
  font-weight: bold;
  font-family: Consolas, Courier;
  font-size: 12px;
  text-align: right;
  display: block;
  margin: 0;
  padding: 3px;
  background-color: #e0e0ff;
}


&lt;p&gt;&lt;img src=&quot;http://buffered.io/uploads/2010/09/riak-logo.png&quot; alt=&quot;Riak Logo&quot; /&gt;For those of you who are new to the series, you may want to check out &lt;a href=&quot;http://buffered.io/2010/09/01/webmachine-erlydtl-and-riak-part-1/&quot; title=&quot;Wembachine, ErlyDTL and Riak - Part 1&quot;&gt;Part 1&lt;/a&gt; and &lt;a href=&quot;http://buffered.io/2010/09/12/webmachine-erlydtl-and-riak-part-2/&quot; title=&quot;Wembachine, ErlyDTL and Riak - Part 2&quot;&gt;Part 2&lt;/a&gt; before reading this post. It will help give you some context as well as introduce you to some of the jargon and technology that I'm using. If you've already read then, or don't want to, then please read on!&lt;/p&gt;
&lt;p&gt;This post builds on the previous two, but not without a few little modifications. If you're interested in following along step by step with your own version of the code running, then get yourself a copy of &lt;a href=&quot;https://bitbucket.org/OJ/csd/changeset/df62880d12a8&quot; title=&quot;Source code for Part 2&quot;&gt;this changeset&lt;/a&gt; before doing so.&lt;/p&gt;
&lt;p&gt;In this post we're going to cover:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A slight refactor of code structure to support the &quot;standard&quot; approach to building applications in Erlang using OTP.&lt;/li&gt;
&lt;li&gt;Building a small set of modules to talk to &lt;a href=&quot;http://www.basho.com/developers.html#Riak&quot; title=&quot;Riak&quot;&gt;Riak&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Creation of some &lt;a href=&quot;http://json.org/&quot; title=&quot;JavaScript Object Notation&quot;&gt;JSON&lt;/a&gt; helper functions for reading and writing data.&lt;/li&gt;
&lt;li&gt;Calling all the way from the &lt;a href=&quot;http://www.basho.com/developers.html#Webmachine&quot; title=&quot;Webmachine&quot;&gt;Webmachine&lt;/a&gt; front-end to Riak to extract data and display it in a browser using &lt;a href=&quot;http://github.com/evanmiller/erlydtl&quot; title=&quot;ErlyDTL&quot;&gt;ErlyDTL&lt;/a&gt; templates.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There are quite a few code snippets in this post as well as output from script executions and &lt;code&gt;bash&lt;/code&gt; sessions. To avoid confusion, all file listings reference the path to the file that is being modified relative to the root of the project folder.&lt;/p&gt;
&lt;p&gt;Be warned, this is a &lt;em&gt;long&lt;/em&gt; post :) Get yourself a &lt;em&gt;shmoke und a pancake&lt;/em&gt;, a glass of your favourite beverage and put some relaxing music on (instrumental is best).&lt;/p&gt;
&lt;p&gt;Are you ready? OK, here we go ... &lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;A Slight Refactor&lt;/h2&gt;
&lt;p&gt;I was ready to embark on this third post a while back but then I sat back and thought about how I might structure things if I were using another set of technologies. Usually I would put another layer between the web tier and the back-end database cluster as opposed to having the web tier talk to the database directly. It didn't make sense to me that this approach would be any different in Erlang.&lt;/p&gt;
&lt;p&gt;I had a chat to &lt;a href=&quot;http://twitter.com/sj_mackenzie&quot; title=&quot;Stewart Mackenzie on Twitter&quot;&gt;two&lt;/a&gt; &lt;a href=&quot;http://twitter.com/MatthewErbs&quot; title=&quot;Matt Erbs on Twitter&quot;&gt;blokes&lt;/a&gt; that I really respect to get their views, and then I fired off a question to the Basho guys (via the &lt;a href=&quot;irc://irc.freenode.com/riak&quot; title=&quot;Riak IRC on Freenode&quot;&gt;#riak IRC channel&lt;/a&gt;). The Basho lads even made the effort to respond to me via the &lt;a href=&quot;http://lists.basho.com/pipermail/riak-users_lists.basho.com/2010-September/001984.html&quot; title=&quot;Riak Recap&quot;&gt;Riak Recap&lt;/a&gt; as they weren't available at the time to answer me via IRC (thanks again &lt;a href=&quot;http://twitter.com/pharkmillups&quot; title=&quot;Mark Phillips on Twitter&quot;&gt;Mark&lt;/a&gt;). All three of them confirmed my thoughts. Here's what appeared in the recap which captures the question and response nicely:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q --- I have a Webmachine application which will be talking to Riak. I was going to put application and controller logic in that application and I am wondering if [I] should instead be creating a &quot;core&quot; OTP application with the business style logic in it and have the Webmachine app talk to that app which, in turn, talks to Riak? Is that the general approach that is taken [in Erlang applications]? (from TheColonial via #riak)&lt;/p&gt;
&lt;p&gt;A --- We recommend going with the latter approach. You're better off to create a core app that talks to Webmachine and Riak separately.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Perfect, that makes total sense. Therefore the following describes what I did to modify the code base that I had in order to support this set up. &lt;strong&gt;Any failure&lt;/strong&gt; in implementation, structure or understanding is totally my own and in no way reflects on the abilities and advice of those mentioned above who took the time to offer assistance.&lt;/p&gt;
&lt;p&gt;Moving on. What we want to end up with is three applications:&lt;/p&gt;
&lt;table cellspacing=&quot;0&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Application&lt;/th&gt;
      &lt;th&gt;Structure/Responsibility&lt;/th&gt;
      &lt;th&gt;Talks to&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Riak&lt;/td&gt;
      &lt;td&gt;Bomb-proof data storage and replication.&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;csd_core&lt;/td&gt;
      &lt;td&gt;An OTP application that provides an API to a set of logic that deals with the transformation of data from a client through to the database. It should keep the clients ignorant of the data storage medium. It should provide business logic that would be required for any client application to be able to talk to a `csd`/Riak back-end.&lt;/td&gt;
      &lt;td&gt;Riak&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;csd_web&lt;/td&gt;
      &lt;td&gt;Provide a nice, web-based interface for the user to experience the goal of the Code Smackdown application.&lt;/td&gt;
      &lt;td&gt;csd_core&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Given that we're going to be using this structure, the &quot;root&quot; folder should actually be fairly clean without any source. Instead, each &lt;code&gt;csd&lt;/code&gt;-related application should live in its own sub-folder under an &lt;code&gt;apps&lt;/code&gt; folder and the root should just contain the means to build it and start it. In essence what we'd like to see in the root folder is something like this:&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;oj@spawn-link ~/blog/csd $ ls -F
apps/  dev.haproxy.conf  Makefile  proxy.sh*  rebar*  rebar.config  start.sh*
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With that in mind, let's start the surgery.&lt;/p&gt;
&lt;h3 id=&quot;moving_csd_to_csd_web&quot;&gt;Moving csd to csd_web&lt;/h3&gt;
&lt;p&gt;There are two ways to approach this problem. The first is to do a &lt;strong&gt;find and replace&lt;/strong&gt;, making sure you cover off file names as well as module names, etc. The second is to simply &lt;strong&gt;recreate the web site from scratch&lt;/strong&gt;, copy over any missing files and make any other adjustments manually that may be required.&lt;/p&gt;
&lt;p&gt;I preferred the second approach, so that's what I did. First I recreated the web application, which is now called &lt;code&gt;csd_web&lt;/code&gt; in the &lt;code&gt;apps&lt;/code&gt; folder:&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;oj@spawn-link ~/blog/csd $ mkdir apps &amp;amp;&amp;amp; cd apps
oj@spawn-link ~/blog/csd/apps $ ~/blog/webmachine/scripts/new_webmachine.sh csd_web .
==&amp;gt; priv (create)
Writing /home/oj/blog/csd/apps/csd_web/README
Writing /home/oj/blog/csd/apps/csd_web/Makefile
Writing /home/oj/blog/csd/apps/csd_web/rebar.config
Writing /home/oj/blog/csd/apps/csd_web/rebar
Writing /home/oj/blog/csd/apps/csd_web/start.sh
Writing /home/oj/blog/csd/apps/csd_web/ebin/csd_web.app
Writing /home/oj/blog/csd/apps/csd_web/src/csd_web.erl
Writing /home/oj/blog/csd/apps/csd_web/src/csd_web_app.erl
Writing /home/oj/blog/csd/apps/csd_web/src/csd_web_sup.erl
Writing /home/oj/blog/csd/apps/csd_web/src/csd_web_resource.erl
Writing /home/oj/blog/csd/apps/csd_web/priv/dispatch.conf
oj@spawn-link ~/blog/csd/apps $ ls -F
csd_web/
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next I removed a few files which weren't going to be needed any more. I then copied over &lt;code&gt;rebar.config&lt;/code&gt;, the ErlyDTL templates and the &lt;code&gt;csd.app.src&lt;/code&gt; file (which we need to modify):&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;oj@spawn-link ~/blog/csd/apps $ cd csd_web
oj@spawn-link ~/blog/csd/apps/csd_web $ rm README rebar start.sh
oj@spawn-link ~/blog/csd/apps/csd_web $ cp ../../rebar.config .
oj@spawn-link ~/blog/csd/apps/csd_web $ cp -R ../../templates .
oj@spawn-link ~/blog/csd/apps/csd_web $ cp ../../src/csd.app.src ./src/csd_web.app.src
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I then edited the &lt;code&gt;csd_web.app.src&lt;/code&gt; file so that the names were updated (I tidied it up a little and added a version number too):&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;filename&quot;&gt;apps/csd_web/src/csd_web.app.src&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;%%-*- mode: erlang -*-&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csd_web&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;The Webmachine component of the Code Smackdown application.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vsn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;0.0.1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;modules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;registered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;applications&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;kernel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;stdlib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;crypto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mochiweb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;webmachine&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;csd_web_app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]}},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I then opened up &lt;code&gt;csd_web_resource.erl&lt;/code&gt; and made it look like the original &lt;code&gt;csd_resource.erl&lt;/code&gt; so that it called the ErlyDTL template:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;filename&quot;&gt;apps/csd_web/src/csd_web_resource.erl&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;csd_web_resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;

&lt;p&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;include_lib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;webmachine/include/webmachine.hrl&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;nf&quot;&gt;to_html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ReqData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sample_dtl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Slartibartfast&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]),&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ReqData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;csd_web&lt;/code&gt; is now ready to go. To build it, we need to go back up to the root &lt;code&gt;csd&lt;/code&gt; folder and adjust the &lt;code&gt;rebar.config&lt;/code&gt; so that it knows to look in the &lt;code&gt;apps&lt;/code&gt; sub-folder (thanks to &lt;a href=&quot;http://twitter.com/andrewtj&quot; title=&quot;AndrewTJ on Twitter&quot;&gt;Andrew&lt;/a&gt; for &lt;a href=&quot;http://lists.basho.com/pipermail/rebar_lists.basho.com/2010-October/000246.html&quot; title=&quot;Configuring the Rebar apps folder on Basho list&quot;&gt;pointing this out&lt;/a&gt;). We can also remove all the dependencies because that will be taken care of by &lt;code&gt;csd_web&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;filename&quot;&gt;rebar.config&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;%%-*- mode: erlang -*-&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub_dirs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;apps/csd_web&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next, I removed all the other left-over stuff in the root folder that wasn't required any more (including the startup script):&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;oj@spawn-link ~/blog/csd $ rm -rf README priv src templates start.sh
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I then modify the &lt;code&gt;Makefile&lt;/code&gt; so that it does a couple of other things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Includes a target which builds just the current applications &lt;em&gt;without&lt;/em&gt; building the dependencies (this will make builds much quicker most of the time).&lt;/li&gt;
&lt;li&gt;Includes a target which can start the web application, essentially replacing the original startup script. This target will be dependent on the previous target so that it is always up to date when running the application.&lt;/li&gt;
&lt;li&gt;Includes targets which can start/stop &lt;code&gt;HAproxy&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span class=&quot;filename&quot;&gt;Makefile&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;ERL ?= erl
APP = csd

.PHONY: deps

&lt;p&gt;all: deps
    @./rebar compile&lt;/p&gt;
&lt;p&gt;app:
    @./rebar compile skip_deps=true&lt;/p&gt;
&lt;p&gt;deps:
    @./rebar get-deps&lt;/p&gt;
&lt;p&gt;clean:
    @./rebar clean&lt;/p&gt;
&lt;p&gt;distclean: clean
    @./rebar delete-deps&lt;/p&gt;
&lt;p&gt;webstart: app
    exec erl -pa $(PWD)/apps/*/ebin -pa $(PWD)/deps/*/ebin -boot start_sasl -s reloader -s csd_web&lt;/p&gt;
&lt;p&gt;proxystart:
    @haproxy -f dev.haproxy.conf
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All that is left to do is start &lt;code&gt;haproxy&lt;/code&gt; and launch the application (make sure &lt;code&gt;Riak&lt;/code&gt; is running first). These commands need to be done in two different terminal windows. First, start the proxy (note the use of &lt;code&gt;sudo&lt;/code&gt; so that we can listen on port 80):&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;oj@spawn-link ~/blog/csd $ sudo make proxystart
[2] 1935
Available polling systems :
     sepoll : pref=400,  test result OK
      epoll : pref=300,  test result OK
       poll : pref=200,  test result OK
     select : pref=150,  test result OK
Total: 4 (4 usable), will use sepoll.
Using sepoll() as the polling mechanism.
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then make and start the web application. We have to do a full &lt;code&gt;make&lt;/code&gt; first time around so that all the dependencies are resolved:&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;oj@spawn-link ~/blog/csd $ make &amp;amp;&amp;amp; make webstart

... snip ...

&lt;p&gt;=PROGRESS REPORT==== 4-Apr-2011::21:04:18 ===
         application: csd_web
          started_at: nonode@nohost
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we should be able to hit &lt;a href=&quot;http://localhost/&quot; title=&quot;localhost web app&quot;&gt;localhost&lt;/a&gt; and see the ErlyDTL template rendered in all its awesome, black-and-white glory:&lt;/p&gt;
&lt;img src=&quot;http://buffered.io/uploads/2010/10/localhost-slartibartfast.png&quot; /&gt;

&lt;p&gt;Refactor complete. Now let's start work on our new OTP application which will be responsible for talking to Riak.&lt;/p&gt;
&lt;p&gt;If you need a break, now is the time to take it! Go freshen up, take a leak and refill your glass.&lt;/p&gt;
&lt;p&gt;Ready to go again? Here we go ...&lt;/p&gt;
&lt;h3 id=&quot;creating_the_csd_core_otp_application&quot;&gt;Creating the csd_core OTP Application&lt;/h3&gt;
&lt;p&gt;Creation of an OTP-compliant application is another job for &lt;a href=&quot;http://www.basho.com/developers.html#Rebar&quot; title=&quot;Rebar&quot;&gt;Rebar&lt;/a&gt; as it comes with a set of templates built-in. Unfortunately those template aren't 100% and hence don't do everything we need to do out of the box. But we shall use them as a starting point:&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;oj@spawn-link ~/blog/csd $ mkdir apps/csd_core &amp;amp;&amp;amp; cd apps/csd_core
oj@spawn-link ~/blog/csd/apps/csd_core $ ../../rebar create-app appid=csd_core
==&amp;gt; csd_core (create-app)
Writing src/csd_core.app.src
Writing src/csd_core_app.erl
Writing src/csd_core_sup.erl
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We have a very simple application shell set up, but we need to do a bit more work to get it ready. First, let's create our base &lt;code&gt;csd_core.erl&lt;/code&gt; module which is used to fire up our application. For this we will use &lt;code&gt;csd_web.erl&lt;/code&gt; (the one which is part of our Webmachine application) as a template. Note that I've shuffled things around and removed some things that are not relevant:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;filename&quot;&gt;apps/csd_core/src/csd_core.erl&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;%% @author OJ Reeves &amp;lt;oj@buffered.io&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;%% @copyright 2011 OJ Reeves&lt;/span&gt;

&lt;p&gt;&lt;span class=&quot;c&quot;&gt;%% @doc csd_core startup code&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;csd_core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;'OJ Reeves &amp;lt;oj@buffered.io&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;nf&quot;&gt;ensure_started&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;already_started&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c&quot;&gt;%% @spec start_link() -&amp;gt; {ok,Pid::pid()}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;%% @doc Starts the app for inclusion in a supervisor tree&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ensure_started&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crypto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;csd_core_sup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c&quot;&gt;%% @spec start() -&amp;gt; ok&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;%% @doc Start the csd_core server.&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ensure_started&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crypto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;csd_core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c&quot;&gt;%% @spec stop() -&amp;gt; ok&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;%% @doc Stop the csd_core server.&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;Res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;csd_core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;crypto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;Res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next up, edit &lt;code&gt;csd_core.app.src&lt;/code&gt; and add some application-specific information:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;filename&quot;&gt;apps/csd_core/src/csd_core.app.src&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csd_core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Core functionality for the Code Smackdown application.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vsn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;0.0.1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;registered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;applications&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;kernel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;stdlib&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;csd_core_app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]}},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We know that we'll be talking to Riak, so we need to make sure we've included the &lt;code&gt;riakc&lt;/code&gt; (Riak client) dependency. Though I haven't yet talked about it, we'll also be using Mochiweb's &lt;a href=&quot;https://github.com/mochi/mochiweb/blob/master/src/mochijson2.erl&quot; title=&quot;Mochiweb's json module&quot;&gt;mochijson2&lt;/a&gt; module to help with handling JSON data, so we shall add this as a dependency to the application. Bear in mind this is already a dependency for the web component of the application, so we're not actually adding a &lt;em&gt;new&lt;/em&gt; dependency to the overall application.&lt;/p&gt;
&lt;p&gt;We can do this by creating a &lt;code&gt;rebar.config&lt;/code&gt; in &lt;code&gt;apps/csd_core&lt;/code&gt; and editing it to contain the following:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;filename&quot;&gt;apps/csd_core/rebar.config&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;%%-*- mode: erlang -*-&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mochiweb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;1.5.1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;git://github.com/mochi/mochiweb&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;1.5.1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;riakc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;.*&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;git://github.com/basho/riak-erlang-client&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;HEAD&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then we need to tell &lt;code&gt;rebar&lt;/code&gt; to build this new application by adjusting the &lt;code&gt;rebar.config&lt;/code&gt; in the &lt;code&gt;csd&lt;/code&gt; root folder:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;filename&quot;&gt;rebar.config&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;%%-*- mode: erlang -*-&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub_dirs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;apps/csd_core&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;apps/csd_web&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we have enough to get the &lt;code&gt;csd_core&lt;/code&gt; application started, even though it doesn't do anything. We just need to adjust our &lt;code&gt;Makefile&lt;/code&gt; target so that it launches the &lt;code&gt;csd_core&lt;/code&gt; application as well:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;filename&quot;&gt;Makefile&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;ERL ?= erl
APP = csd

.PHONY: deps

&lt;p&gt;all: deps
    @./rebar compile&lt;/p&gt;
&lt;p&gt;app:
    @./rebar compile skip_deps=true&lt;/p&gt;
&lt;p&gt;deps:
    @./rebar get-deps&lt;/p&gt;
&lt;p&gt;clean:
    @./rebar clean&lt;/p&gt;
&lt;p&gt;distclean: clean
    @./rebar delete-deps&lt;/p&gt;
&lt;p&gt;webstart: app
    exec erl -pa $(PWD)/apps/*/ebin -pa $(PWD)/deps/*/ebin -boot start_sasl -s reloader -s csd_core -s csd_web&lt;/p&gt;
&lt;p&gt;proxystart:
    @haproxy -f dev.haproxy.conf
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then off we go:&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;oj@spawn-link ~/blog/csd $ make webstart
==&amp;gt; csd_core (compile)
Compiled src/csd_core_app.erl
Compiled src/csd_core_sup.erl
Compiled src/csd_core.erl

... snip ...

&lt;p&gt;=PROGRESS REPORT==== 4-Apr-2011::21:49:27 ===
         application: csd_core
          started_at: nonode@nohost&lt;/p&gt;
&lt;p&gt;... snip ...&lt;/p&gt;
&lt;p&gt;=PROGRESS REPORT==== 4-Apr-2011::21:49:27 ===
         application: csd_web
          started_at: nonode@nohost
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see we now have a system which contains both &lt;code&gt;csd_core&lt;/code&gt; and &lt;code&gt;csd_web&lt;/code&gt;. This is great, but &lt;code&gt;csd_core&lt;/code&gt; needs a lot more work. The intent for this application is to be an &lt;a href=&quot;http://en.wikipedia.org/wiki/Open_Telecom_Platform&quot; title=&quot;Open Telecom Platform&quot;&gt;OTP&lt;/a&gt; application which provides an API to the &lt;code&gt;csd&lt;/code&gt; logic and back-end database. This means we're going to need to get ourselves a &lt;a href=&quot;http://www.erlang.org/doc/design_principles/gen_server_concepts.html&quot; title=&quot;gen_server behaviour&quot;&gt;gen_server&lt;/a&gt; set up which can handle requests from various clients. Let's do that next.&lt;/p&gt;
&lt;p&gt;Thankfully &lt;code&gt;rebar&lt;/code&gt; comes with a simple template that we can use for creating the &lt;code&gt;gen_server&lt;/code&gt; behaviour, so we can invoke that from the command line and have it generate the shell for us:&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;oj@spawn-link ~/blog/csd/apps/csd_core $ ../../rebar create template=simplesrv srvid=csd_core_server
==&amp;gt; csd_core (create)
Writing src/csd_core_server.erl
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We now have a very dumb server ready to go, to make it start with the rest of the application we have to modify &lt;code&gt;csd_core_sup&lt;/code&gt;, the &lt;a href=&quot;http://www.erlang.org/doc/design_principles/sup_princ.html&quot; title=&quot;supervisor behaviour&quot;&gt;supervisor&lt;/a&gt; and tell it to fire up the server for us:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;filename&quot;&gt;apps/csd_core/src/csd_core_sup.erl&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;csd_core_sup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;

&lt;p&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;behaviour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;supervisor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c&quot;&gt;%% API&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c&quot;&gt;%% Supervisor callbacks&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c&quot;&gt;%% Helper macro for declaring children of supervisor&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CHILD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;permanent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c&quot;&gt;%% ===================================================================&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;%% API functions&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;%% ===================================================================&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;nf&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nn&quot;&gt;supervisor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;?MODULE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;?MODULE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c&quot;&gt;%% ===================================================================&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;%% Supervisor callbacks&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;%% ===================================================================&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;Server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;?CHILD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;csd_core_server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;Processes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;one_for_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Processes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With this in place we can now start our application again and we should see the new &lt;code&gt;csd_core_server&lt;/code&gt; appear in the start-up sequence:&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;oj@spawn-link ~/blog/csd $ make webstart

... snip ...

&lt;p&gt;=PROGRESS REPORT==== 4-Apr-2011::22:04:04 ===
          supervisor: {local,csd_core_sup}
             started: [{pid,&amp;lt;0.54.0&amp;gt;},
                       {name,csd_core_server},
                       {mfargs,{csd_core_server,start_link,[]}},
                       {restart_type,permanent},
                       {shutdown,5000},
                       {child_type,worker}]&lt;/p&gt;
&lt;p&gt;=PROGRESS REPORT==== 4-Apr-2011::22:04:04 ===
         application: csd_core
          started_at: nonode@nohost&lt;/p&gt;
&lt;p&gt;... snip ...
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The shell and structure of our application is now in place. We are finally ready to start talking to Riak!&lt;/p&gt;
&lt;p&gt;Again, now is the time to have a mini-break if you need one. Grab a &lt;em&gt;Shigar und a waffle&lt;/em&gt; and a cup of English Breakfast tea.&lt;/p&gt;
&lt;h2&gt;Preparing csd_core for Riak connectivity&lt;/h2&gt;
&lt;p&gt;Given that this is the first look at connecting to Riak, we're going to have to set up a little infrastructure to support our needs. As a result, the data itself won't be discussed much for fear of turning this post into something way more epic than originally intended.&lt;/p&gt;
&lt;p&gt;So in short, we're interested in storing the idea of a &lt;em&gt;code snippet&lt;/em&gt;. That is an entity which contains two opposing blobs of code which are being compared. That snippet will have a title. Down the track, more information will be associated with this snippet, such as the author, along with links to a set of comments and votes. For now we'll just focus on storing the bare essentials of the snippet.&lt;/p&gt;
&lt;h3 id=&quot;the_snippet&quot;&gt;The Snippet&lt;/h3&gt;
&lt;p&gt;As far as our Erlang code is concerned, our snippet is going to be a simple list of properties that we can interact with via the &lt;a href=&quot;http://www.erlang.org/doc/man/proplists.html&quot; title=&quot;proplists&quot;&gt;proplists&lt;/a&gt; module. This keeps things really simple. To demonstrate what our snippet will look like in code, here is the function that takes a Title, and the two code blobs (called Left and Right) and returns a &lt;code&gt;snippet&lt;/code&gt; instance. This code goes in a module called &lt;code&gt;csd_snippet&lt;/code&gt; defined in &lt;code&gt;src/csd_snippet.erl&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;filename&quot;&gt;apps/csd_core/src/csd_snippet.erl (part)&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nf&quot;&gt;to_snippet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;snippet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that the first part of the tuple is the atom &lt;code&gt;snippet&lt;/code&gt; which I am using to identify the layout of the contents in the second part of the tuple. Down the track we'll have more collections of data in the system than just snippets, and we may want to make sure that the caller doesn't accidentally pass in a &lt;code&gt;user&lt;/code&gt;, for example, to a function expecting a &lt;code&gt;snippet&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It is important at this point to note that, down the track, I will include a &lt;code&gt;key&lt;/code&gt; property in all of the data objects that are pushed to Riak. This property serves as the identifier for the object in Riak and is stored alongside the rest of the data so that it is easy to relate the in-memory instance back to the stored instance. This value, if not specified, will be inserted automatically when an item is saved via the API functions in &lt;code&gt;csd_core&lt;/code&gt;. More on this later.&lt;/p&gt;
&lt;h3 id=&quot;formatting_data_for_storage_in_riak&quot;&gt;Formatting Data for Storage in Riak&lt;/h3&gt;
&lt;p&gt;Riak is very flexible in that it will store whatever kind of information you give it. This is good because it means we can cater our data format to whatever needs we have.&lt;/p&gt;
&lt;p&gt;In our case, the &lt;em&gt;easiest&lt;/em&gt; option would be to store our Erlang terms as binary using [term_to_binary][] as we wouldn't have to think about &lt;em&gt;anything&lt;/em&gt; else. We could easily read the data using [binary_to_term][]. Done.&lt;/p&gt;
&lt;p&gt;This comes with a set of problems though. For example, if we wanted to &lt;a href=&quot;http://en.wikipedia.org/wiki/MapReduce&quot; title=&quot;map/reduce&quot;&gt;map/reduce&lt;/a&gt; using JavaScript we wouldn't find it easy to get the data into a format that we could use. Another example would be that the RESTful interface to Riak would be close to useless because &lt;strong&gt;any&lt;/strong&gt; non-Erlang client would have to somehow get the data into a meaningful format to work with.&lt;/p&gt;
&lt;p&gt;Instead of using binary and throwing Erlang terms straight into Riak, we're going to use &lt;a href=&quot;http://json.org/&quot; title=&quot;JavaScript Object Notation&quot;&gt;JSON&lt;/a&gt;. It's very easy to convert to and from JSON in many different languages, and it's very easy to read. We can also easily verify that the data is being stored correctly by querying Riak's RESTful interface directly using &lt;a href=&quot;http://curl.haxx.se/&quot; title=&quot;cURL homepage&quot;&gt;cURL&lt;/a&gt; or a browser.&lt;/p&gt;
&lt;p&gt;In order to store data in JSON format, we're going to enlist the help of &lt;a href=&quot;https://github.com/mochi/mochiweb/blob/master/src/mochijson2.erl&quot; title=&quot;Mochiweb's json module&quot;&gt;mochijson2&lt;/a&gt;, a library that comes with &lt;a href=&quot;https://github.com/mochi/mochiweb&quot; title=&quot;Mochiweb&quot;&gt;Mochiweb&lt;/a&gt; that makes it a &lt;em&gt;lot&lt;/em&gt; easier to deal with JSON than doing everything manually. Given that we're using Webmachine for the front-end (which itself relies on Mochiweb) we already have the dependency available.&lt;/p&gt;
&lt;p&gt;Unfortunately we can't just throw our data straight at this module and have it do everything for us. &lt;code&gt;mochijson2&lt;/code&gt; requires data to be in a certain format before it can encode it to JSON. When decoding &lt;em&gt;from&lt;/em&gt; JSON, it converts the data into the same format. Hence, we need the ability to convert our own data format to and from this intermediate data format so that &lt;code&gt;mochijson2&lt;/code&gt; can deal with it.&lt;/p&gt;
&lt;p&gt;We need two functions: &lt;code&gt;to_json()&lt;/code&gt; and &lt;code&gt;from_json()&lt;/code&gt;, and we shall define these in a helper module called &lt;code&gt;csd_json&lt;/code&gt;. This module will live in &lt;code&gt;csd_core&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;filename&quot;&gt;apps/csd_core/src/csd_json.erl (part)&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;csd_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from_json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;

&lt;p&gt;&lt;span class=&quot;nf&quot;&gt;to_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PropList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;to_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PropList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(_)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;nf&quot;&gt;to_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PropList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;IsStrFun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;list_to_binary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;mochijson2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_proplist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PropList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;IsStrFun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;nf&quot;&gt;from_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;from_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(_)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;nf&quot;&gt;from_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;IsStrFun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;to_proplist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;mochijson2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;IsStrFun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You're probably wondering why each of these functions requires the &lt;code&gt;IsStrFun&lt;/code&gt; parameter (if you're not, you're obviously an experienced Erlanger!). For those who don't know, strings in Erlang are actually lists of integers. This is fantastic as it makes it easy to manipulate strings as if they were lists, but it comes at a small price: it's not possible to determine the difference between a list of integers and a string.&lt;/p&gt;
&lt;p&gt;Why is this important? &lt;code&gt;mochijson2&lt;/code&gt; needs strings to be encoded as binaries, so we need a way to differentiate between integer lists and real strings. My original implementations of both the &lt;code&gt;to_json()&lt;/code&gt; and &lt;code&gt;from_json()&lt;/code&gt; functions attempted to figure out if certain fields were strings or not by looking at the content of the list. Not only was the code messy, but it wasn't foolproof. Instead, I made the decision to force the user to provide a callback function which will tell the JSON serialiser if the given property is a string or not. This callback takes a single parameter which is the name (in atom form) of the property and returns a boolean -- &lt;code&gt;true&lt;/code&gt; indicates that the value is a string, &lt;code&gt;false&lt;/code&gt; otherwise.&lt;/p&gt;
&lt;p&gt;In some cases we might just be happy to encode/decode every single value as a string. Hence, there is an overload to both &lt;code&gt;to_json()&lt;/code&gt; and &lt;code&gt;from_json()&lt;/code&gt; which caters for this case. The rest of the code which implments the conversion is listed below. Don't feel that you need to understand the code below, as it's really not the goal of this post. The full source to this module is included in the source link specified at the end of this post.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;filename&quot;&gt;apps/csd_core/src/csd_json.erl (part)&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nf&quot;&gt;from_proplist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|_],&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;IsStrFun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;is_tuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;lists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from_proplist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;IsStrFun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;from_proplist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PropName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ComplexProp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|_]},&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;IsStrFun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;is_tuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list_to_binary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;atom_to_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PropName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from_proplist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ComplexProp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;IsStrFun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;from_proplist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PropName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PropVal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;IsStrFun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list_to_binary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;atom_to_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PropName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PropName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PropVal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;IsStrFun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;

&lt;p&gt;&lt;span class=&quot;nf&quot;&gt;to_proplist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PropList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;IsStrFun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;is_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PropList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nn&quot;&gt;lists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_proplist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;IsStrFun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PropList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;to_proplist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PropName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ComplexProp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;_}},&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;IsStrFun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list_to_atom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;binary_to_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PropName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_proplist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ComplexProp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;IsStrFun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;to_proplist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PropName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PropVal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;IsStrFun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;PropAtom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list_to_atom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;binary_to_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PropName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PropAtom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PropAtom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PropVal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;IsStrFun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;nf&quot;&gt;to_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PropName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|_],&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;IsStrFun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;is_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;is_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nn&quot;&gt;lists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PropName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;IsStrFun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;to_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PropName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;IsStrFun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;is_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;IsStrFun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PropName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list_to_binary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;lists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PropName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;IsStrFun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;to_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(_,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;_)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;nf&quot;&gt;from_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PropName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;IsStrFun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;is_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nn&quot;&gt;lists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PropName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;IsStrFun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;from_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PropName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;IsStrFun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;is_binary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;IsStrFun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PropName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;binary_to_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;B&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;from_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(_,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;_)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We are now able to read and write data to and from JSON format. Now we need to use the Riak client to push that into our Riak cluster.&lt;/p&gt;
&lt;h3 id=&quot;setting_up_the_riak_client&quot;&gt;Setting up the Riak client&lt;/h3&gt;
&lt;p&gt;Basho have done a great job of creating a protocol buffer-based client for use with Riak. The interface is really simple to use. Despite that, we shall create a module which will deal with this for us. This gives us a single point of abstraction of Riak and a place where we can add extra support for our own needs without spreading Riak-specific code all over the source base.&lt;/p&gt;
&lt;p&gt;The first problem we need to resolve is: &lt;em&gt;what do we do with configuration?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This was a question I initially didn't know how to answer. After a bit of deliberation and a chat with a &lt;a href=&quot;http://twitter.com/mononcqc&quot; title=&quot;Ferd T-H on Twitter&quot;&gt;respected Erlang sifu&lt;/a&gt; (who has a &lt;a href=&quot;http://learnyousomeerlang.com/&quot; title=&quot;Learng you some erlang&quot;&gt;fantastic Erlang tutorial site&lt;/a&gt;) I decided to go with a module-based option.&lt;/p&gt;
&lt;p&gt;We have our Riak cluster hidden behind the &lt;code&gt;haproxy&lt;/code&gt; load balancer, and hence we have a single entry-point to connect to. If this entry-point changes, it changes for all of the clients, not just a single client. Therefore, I want the ability to manage a single set of connection information, but I want the ability to update it on the fly without having to restart the &lt;code&gt;csd_core&lt;/code&gt; application. This is Erlang, after all, and modifying code and configuration on-the-fly is extremely easy. We shall abuse that.&lt;/p&gt;
&lt;p&gt;We create a single module, &lt;code&gt;csd_riak_config.erl&lt;/code&gt;, to contain our configuration which is referenced at start-up. It looks like this:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;filename&quot;&gt;apps/csd_core/src/csd_riak_config.erl&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;csd_riak_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection_info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;

&lt;p&gt;&lt;span class=&quot;nf&quot;&gt;connection_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pretty simple stuff. Let's use this functionality in our &lt;code&gt;gen_server&lt;/code&gt;, and carry the configuration through from initialisation to all of the calls that will be made to the Riak server. This requires two simple modifications to the &lt;code&gt;csd_core_server&lt;/code&gt; module:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;filename&quot;&gt;apps/csd_core/src/csd_core_server.erl (part)&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nf&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;ConnInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;csd_riak_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
  &lt;span class=&quot;nn&quot;&gt;gen_server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;?SERVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;?MODULE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ConnInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]).&lt;/span&gt;

&lt;p&gt;&lt;span class=&quot;c&quot;&gt;% ...&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ConnInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ConnInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Confiuration is now loaded and is being passed to all of our &lt;code&gt;gen_server&lt;/code&gt; callbacks. Let's make use of it. &lt;code&gt;csd_snippet&lt;/code&gt; is the entry point for all snippet-related information, and one of the things that we are going to want to be able to do is write a snippet to Riak. So let's create a code-path that can do that.&lt;/p&gt;
&lt;h4 id=&quot;writing_data_to_riak&quot;&gt;Writing Data to Riak&lt;/h4&gt;
&lt;p&gt;The first point of call for a client is the OTP interface. Let's create an API call and a call handler to support saving snippets in &lt;code&gt;csd_core_server&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;filename&quot;&gt;apps/csd_core/src/csd_core_server.erl (part)&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;%% This is a simple function which invokes a call via the gen_sever&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;%% behaviour.&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;save_snippet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Snippet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nn&quot;&gt;gen_server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;?SERVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save_snippet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Snippet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;infinity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;

&lt;p&gt;&lt;span class=&quot;c&quot;&gt;%% Handle the case where a caller wants to save a snippet to Riak. We&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;%% create a connection to Riak and pass that into the snippet handler&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;%% along with the snippet that needs to be saved. We return the newly&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;%% saved snippet.&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;handle_call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save_snippet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Snippet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;From&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ConnInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;RiakPid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;csd_riak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ConnInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;SavedSnippet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;csd_snippet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RiakPid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Snippet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;SavedSnippet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ConnInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Of course, we will need to export the &lt;code&gt;save_snippet()&lt;/code&gt; function if we want to be able to call it.&lt;/p&gt;
&lt;p&gt;You'll notice that we're getting the connection information passed in as the state for the OTP call, and that we're using that to create a connection to Riak via the &lt;code&gt;csd_riak&lt;/code&gt; module. We shall cover this module in just a minute, but hopefully the interface to this function should make it relatively self-explanatory.&lt;/p&gt;
&lt;p&gt;You might be wondering &quot;Why are you creating the Riak client connection here instead of letting the &lt;code&gt;csd_snippet:save()&lt;/code&gt; function do it by itself. It's a good question. The reason I decided to create the connection as part of OTP call rather than in the data/helper modules is because down the track there will probably be a need to do multiple interactions with Riak in a single call. If we force each of the called modules, such as &lt;code&gt;csd_snippet&lt;/code&gt;, to establish their own connections then we'd probably have &lt;em&gt;multiple connections to Riak being created during a single client request&lt;/em&gt;. This isn't what I would like to see happen, so it made sense (in my view) to create the client connection once and reuse it across all modules that are invoked during the request.&lt;/p&gt;
&lt;p&gt;With that out of the way, we need to implement the &lt;code&gt;save()&lt;/code&gt; function in the &lt;code&gt;csd_snippet&lt;/code&gt; module. Brace yourself:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;filename&quot;&gt;apps/csd_core/src/csd_snippet.erl (part)&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RiakPid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Snippet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;snippet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;SnippetData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;proplists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;SnippetData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;undefined&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;Key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;csd_riak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;NewSnippetData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;SnippetData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;RiakObj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;csd_riak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;?BUCKET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_json_internal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NewSnippetData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;csd_riak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RiakPid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;RiakObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;snippet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;NewSnippetData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;ExistingKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;RiakObj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;csd_riak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RiakPid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;?BUCKET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ExistingKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;NewRiakObj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;csd_riak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RiakObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_json_internal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SnippetData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;csd_riak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RiakPid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;NewRiakObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;Snippet&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;On the surface this looks a little complicated, but it's actually very simple. As mentioned earlier in the post, we use a &lt;code&gt;key&lt;/code&gt; property to store the identifier of the object in Riak. This code supports this notion. It works as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Try to get the value of the &lt;code&gt;key&lt;/code&gt; from the given list of properties.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;If &lt;em&gt;not&lt;/em&gt; found ...&lt;/strong&gt;&lt;ol&gt;
&lt;li&gt;create a new key using the &lt;code&gt;new_key()&lt;/code&gt; function in the &lt;code&gt;csd_riak&lt;/code&gt; module (this will be covered shortly).&lt;/li&gt;
&lt;li&gt;Add the &lt;code&gt;key&lt;/code&gt; to the list of properties for the snippet.&lt;/li&gt;
&lt;li&gt;Create a new instance of a Riak object (more on this later) which contains the details of the snippet data to be written, along with the target bucket name and the key of the snippet.&lt;/li&gt;
&lt;li&gt;Save the Riak object to the Riak cluster using the specified Riak client connection (Pid), and for now assume that it succeeds.&lt;/li&gt;
&lt;li&gt;Return the new set of snippet data with the snippet's key included.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;If found ...&lt;/strong&gt;&lt;ol&gt;
&lt;li&gt;Load the existing data from the Riak cluster into a Riak object.&lt;/li&gt;
&lt;li&gt;Update the Riak object with the new data values passed into the function.&lt;/li&gt;
&lt;li&gt;Save the Riak object &lt;em&gt;back&lt;/em&gt; to the Riak cluster using the specified Riak client connection (Pid), and for now assume that it succeeds.&lt;/li&gt;
&lt;li&gt;Return the snippet back to the caller as is.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It's fairly basic functionality which does enough to cater for our needs at this point. Through this one function, we can write new snippet instances to Riak, and we can update them too.&lt;/p&gt;
&lt;p&gt;You'll also notice that another function is being called that hasn't been discussed: &lt;code&gt;to_snippet_internal()&lt;/code&gt;. Rather than try to explain this, let's see the code as it's quite easy to follow:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;filename&quot;&gt;apps/csd_core/src/csd_snippet.erl (part)&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;%% exported functions&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;to_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;snippet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;SnippetData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;to_json_internal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SnippetData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;

&lt;p&gt;&lt;span class=&quot;nf&quot;&gt;from_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SnippetJson&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;from_json_internal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SnippetJson&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c&quot;&gt;%% helper functions used internally.&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;to_json_internal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SnippetData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nn&quot;&gt;csd_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SnippetData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;nf&quot;&gt;from_json_internal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SnippetJson&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;snippet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;csd_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SnippetJson&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;nf&quot;&gt;is_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;is_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;is_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;is_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(_)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, these are helper functions which call the &lt;code&gt;csd_json&lt;/code&gt; functions to serialise/deserialise to/from JSON format. The &lt;code&gt;is_string()&lt;/code&gt; function is the one that is used to tell the JSON functionality which properties are strings and which are not. At the moment, all properties defined on the snippet are string properties. Bear in mind that the &lt;code&gt;key&lt;/code&gt; property, which is added automatically, is &lt;em&gt;not&lt;/em&gt; a string.&lt;/p&gt;
&lt;p&gt;All that is left is to see how &lt;code&gt;csd_riak&lt;/code&gt; deals with the underlying Riak connectivity. Prepare to be underwhelmed!&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;filename&quot;&gt;apps/csd_core/src/csd_riak.erl&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;%% @spec connect(connection_info()) -&amp;gt; pid()&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;%% @doc Create a connection to the specified Riak cluster and&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;%%      return the Pid associated with the new connection.&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;IP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;RiakPid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;riakc_pb_socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;IP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;RiakPid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;

&lt;p&gt;&lt;span class=&quot;c&quot;&gt;%% @spec create(binary, binary, json) -&amp;gt; riakc_obj()&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;%% @doc Create a new instance of a riak object using the&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;%%      parameters given. The riak object can then be&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;%%      persisted to a Riak node/cluster. This overload&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;%%      assumes that the data passed in is JSON and sets&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;%%      the MIME type to &amp;quot;application/json&amp;quot; for you.&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Bucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;JsonData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Bucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;JsonData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;application/json&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c&quot;&gt;%% @spec create(binary, binary, term(), string) -&amp;gt; riakc_obj()&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;%% @doc Create a new instance of a riak object using the&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;%%      parameters given. The riak object can then be&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;%%      persisted to a Riak node/cluster. This overload&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;%%      takes arbitrary data and requires the user to&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;%%      specify the mime type of the data that is being&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;%%      stored.&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Bucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;MimeType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;RiakObj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;riakc_obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Bucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;MimeType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;RiakObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c&quot;&gt;%% @spec fetch(pid(), binary, binary) -&amp;gt; riakc_obj()&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;%% @doc Fetches a riakc object from a Riak node/cluster&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;%%      using the connection given.&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RiakPid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Bucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;RiakObj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;riakc_pb_socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RiakPid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Bucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;RiakObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c&quot;&gt;%% @spec update(riakc_obj(), term()) -&amp;gt; riakc_obj()&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;%% @doc Updates the stored value for a riakc object with&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;%%      the new one specified.&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RiakObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;NewValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;NewRiakObj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;riakc_obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RiakObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;NewValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;NewRiakObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c&quot;&gt;%% @spec get_value(riakc_obj()) -&amp;gt; term()&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;%% @doc Retrieves the stored value from within the riakc&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;%%      object.&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;get_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RiakObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;riakc_obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RiakObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c&quot;&gt;%% @spec save(pid(), riakc_obj()) -&amp;gt; {ok, riakc_obj()} | {error | Reason}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;%% @doc Saves the given riak object to the specified Riak node/cluster.&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RiakPid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;RiakObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;riakc_pb_socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RiakPid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;RiakObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c&quot;&gt;%% @spec new_key() -&amp;gt; key()&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;%% @doc Generate an close-to-unique key that can be used to identify&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;%%      an object in riak. This implementation is blatantly borrowed&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;%%      (purloined) from the wriaki source (thanks basho!)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;new_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Yr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Mo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Dy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Hr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Mn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Sc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;erlang&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;universaltime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{_,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;_,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;new_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Yr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Mo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Dy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Hr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Mn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Sc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c&quot;&gt;%% @spec new_key(list()) -&amp;gt; key()&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;%% @doc Generate an close-to-unique key that can be used to identify&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;%%      an object in riak using the given list parameter as the stuff&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;%%      to hash.&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;new_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;Hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;erlang&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;phash2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;nn&quot;&gt;base64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hopefully the code in this module is fairly self-explanatory. It's a very simple API to follow which made it very easy to build. So with this in place, let's fire up the application, create a new snippet and see if it lands in the Riak store:&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;oj@spawn-link  ~/blog/csd $ make webstart

... snip ...

&lt;p&gt;=PROGRESS REPORT==== 4-Apr-2011::22:54:55 ===
         application: csd_web
          started_at: nonode@nohost&lt;/p&gt;
&lt;p&gt;1&amp;gt; Snippet = csd_snippet:to_snippet(
1&amp;gt; &amp;quot;Super composition!&amp;quot;,
1&amp;gt; &amp;quot;(.^) = (.) . (.)&amp;quot;,
1&amp;gt; &amp;quot;(.^) = fmap &lt;code&gt;fmap&lt;/code&gt; fmap&amp;quot;).
{snippet,[{title,&amp;quot;Super composition!&amp;quot;},
          {left,&amp;quot;(.^) = (.) . (.)&amp;quot;},
          {right,&amp;quot;(.^) = fmap &lt;code&gt;fmap&lt;/code&gt; fmap&amp;quot;}]}
2&amp;gt; SavedSnippet = csd_core_server:save_snippet(Snippet).&lt;/p&gt;
&lt;p&gt;PROGRESS REPORT==== 4-Apr-2011::22:57:13 ===
          supervisor: {local,inet_gethost_native_sup}
             started: [{pid,&amp;lt;0.103.0&amp;gt;},{mfa,{inet_gethost_native,init,[[]]}}]&lt;/p&gt;
&lt;p&gt;=PROGRESS REPORT==== 4-Apr-2011::22:57:13 ===
          supervisor: {local,kernel_safe_sup}
             started: [{pid,&amp;lt;0.102.0&amp;gt;},
                       {name,inet_gethost_native_sup},
                       {mfargs,{inet_gethost_native,start_link,[]}},
                       {restart_type,temporary},
                       {shutdown,1000},
                       {child_type,worker}]
{snippet,[{key,&amp;lt;&amp;lt;&amp;quot;B41kUQ==&amp;quot;&amp;gt;&amp;gt;},
          {title,&amp;quot;Super composition!&amp;quot;},
          {left,&amp;quot;(.^) = (.) . (.)&amp;quot;},
          {right,&amp;quot;(.^) = fmap &lt;code&gt;fmap&lt;/code&gt; fmap&amp;quot;}]}
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see from the above script dump, a new &lt;code&gt;key&lt;/code&gt; was generated for us and stored alongside the snippet (it's highlighted in bold). Verifying that the data has persisted is simple. We can hit any of the Riak nodes via its web interface. Let's take a look at &lt;strong&gt;http://localhost:8091/riak/snippet/B41kUQ==&lt;/strong&gt; (your URL will have a different key):&lt;/p&gt;
&lt;img src=&quot;http://buffered.io/uploads/2010/10/localhost-verify-write.png&quot; /&gt;

&lt;p&gt;Great stuff! For more detail, let's see what cURL has to say:&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;oj@spawn-link ~/blog/csd/ $ curl http://localhost:8091/riak/snippet/B41kUQ== -v
* About to connect() to localhost port 8091 (#0)
*   Trying ::1... Connection refused
*   Trying 127.0.0.1... connected
* Connected to localhost (127.0.0.1) port 8091 (#0)
&amp;gt; GET /riak/snippet/B41kUQ== HTTP/1.1
&amp;gt; User-Agent: curl/7.21.0 (x86_64-pc-linux-gnu) libcurl/7.21.0 OpenSSL/0.9.8o zlib/1.2.3.4 libidn/1.18
&amp;gt; Host: localhost:8091
&amp;gt; Accept: */*
&amp;gt; 
&amp;lt; HTTP/1.1 200 OK
&amp;lt; X-Riak-Vclock: a85hYGBgzGDKBVIsjOy7jmcwJTLmsTJ8tuc7zpcFAA==
&amp;lt; Vary: Accept-Encoding
&amp;lt; Server: MochiWeb/1.1 WebMachine/1.7.3 (participate in the frantic)
&amp;lt; Link: &amp;lt;/riak/snippet&amp;gt;; rel=&amp;quot;up&amp;quot;
&amp;lt; Last-Modified: Mon, 04 Apr 2011 13:13:23 GMT
&amp;lt; ETag: &amp;quot;6fw7c5v4IPAsf4B5hMHybc&amp;quot;
&amp;lt; Date: Mon, 04 Apr 2011 13:13:36 GMT
&amp;lt; Content-Type: application/json
&amp;lt; Content-Length: 107
&amp;lt; 
* Connection #0 to host localhost left intact
* Closing connection #0
{&amp;quot;key&amp;quot;:&amp;quot;B41kUQ==&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;Super composition!&amp;quot;,&amp;quot;left&amp;quot;:&amp;quot;(.^) = (.) . (.)&amp;quot;,&amp;quot;right&amp;quot;:&amp;quot;(.^) = fmap `fmap` fmap&amp;quot;}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see, it has not only serialised to JSON properly, but the MIME type has been set correctly as well.&lt;/p&gt;
&lt;p&gt;This is all well and good, but we need our code to be able to read from Riak as well. That's up next.&lt;/p&gt;
&lt;h4 id=&quot;reading_data_from_riak&quot;&gt;Reading Data from Riak&lt;/h4&gt;
&lt;p&gt;We've already covered off what happens at the bottom level when reading data from Riak (see the above code snippet for more info). To enable this functionality at the top level, we simply need to create a &lt;code&gt;gen_server&lt;/code&gt; call, handle it appropriately and expose a function in the &lt;code&gt;csd_snippet&lt;/code&gt; module. Let's start at the top level:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;filename&quot;&gt;apps/csd_core/src/csd_core_server.erl (part)&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;%% OTP API function to get a snippet based on the key&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;get_snippet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SnippetKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nn&quot;&gt;gen_server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;?SERVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_snippet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;SnippetKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;infinity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;

&lt;p&gt;&lt;span class=&quot;c&quot;&gt;%% handle the call and call the functionality from csd_snippet&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;handle_call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_snippet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;SnippetKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;From&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ConnInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;RiakPid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;csd_riak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ConnInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;Snippet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;csd_snippet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RiakPid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;SnippetKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Snippet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ConnInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code is a bit of a no-brainer. It's very similar to the writing code, but just a bit simpler. Let's see what the &lt;code&gt;csd_snippet:fetch()&lt;/code&gt; function looks like:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;filename&quot;&gt;apps/csd_core/src/csd_snippet.erl (part)&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RiakPid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;RiakObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;csd_riak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RiakPid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;?BUCKET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;SnippetJson&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;csd_riak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RiakObj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;from_json_internal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SnippetJson&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This code just pulls a Riak object out of the back-end, extracts is value and deserialises it from JSON to our Erlang &lt;code&gt;proplist&lt;/code&gt;. Very simple stuff.&lt;/p&gt;
&lt;p&gt;We should be able to build this and, via the Erlang console, verify that it functions:&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;3&amp;gt; Reloading csd_core_server ... ok.
3&amp;gt; csd_core_server:get_snippet(&amp;lt;&amp;lt;&amp;quot;B41kUQ==&amp;quot;&amp;gt;&amp;gt;).
{snippet,[{key,&amp;lt;&amp;lt;&amp;quot;B41kUQ==&amp;quot;&amp;gt;&amp;gt;},
          {title,&amp;quot;Super composition!&amp;quot;},
          {left,&amp;quot;(.^) = (.) . (.)&amp;quot;},
          {right,&amp;quot;(.^) = fmap `fmap` fmap&amp;quot;}]}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Works like a charm. Now, for the icing on the cake, let's get this rendering in a very simple template in our browser.&lt;/p&gt;
&lt;h3 id=&quot;end_to_end&quot;&gt;End to End&lt;/h3&gt;
&lt;p&gt;In order to gain access to our data in Riak from the web we need to create a new resource. This resource will respond to any URI of the form &lt;code&gt;/snippet/&amp;amp;lt;key&amp;amp;gt;&lt;/code&gt;. We shall call this resource &lt;code&gt;csd_web_snippet_resource&lt;/code&gt; and we'll be putting this in our web application. It looks like this:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;filename&quot;&gt;apps/csd_web/src/csd_web_snippet_resource.erl&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;%% @author OJ Reeves &amp;lt;oj@buffered.io&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;%% @copyright 2010 OJ Reeves&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;%% @doc Webmachine resource that handles snippet-related actions&lt;/span&gt;

&lt;p&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;csd_web_snippet_resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;'OJ Reeves &amp;lt;oj@buffered.io&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ni&quot;&gt;include_lib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;webmachine/include/webmachine.hrl&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;nf&quot;&gt;to_html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ReqData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;PathInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;wrq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ReqData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;SnippetKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PathInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;snippet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;SnippetData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;csd_core_server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_snippet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list_to_binary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SnippetKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;snippet_dtl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SnippetData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ReqData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, this code calls through to the &lt;code&gt;csd_core_server&lt;/code&gt; to extract the data from the back-end. The value that is used as a key for the snippet is one that is pulled from the URI via Webmachine's &lt;code&gt;wrq:path_info()&lt;/code&gt; function. This function extracts values from the URI based on the rules in &lt;code&gt;dispatch.conf&lt;/code&gt; and provides a &lt;a href=&quot;http://www.erlang.org/doc/man/dict.html&quot; title=&quot;Erlang dict&quot;&gt;dict&lt;/a&gt; which can be used to lookup the values.&lt;/p&gt;
&lt;p&gt;The code also uses a new ErlyDTL template called &lt;code&gt;snippet&lt;/code&gt;. We'd best add that to the &lt;code&gt;templates&lt;/code&gt; folder:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;filename&quot;&gt;apps/csd_web/templates/snippet.dtl&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Snippet View&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;{{ title }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Left: {{ left }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Right: {{ right }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, we just need to adjust &lt;code&gt;dispatch.conf&lt;/code&gt; to include the new route handler so that our code gets called:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;filename&quot;&gt;apps/csd_web/priv/dispatch.conf&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;%%-*- mode: erlang -*-&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{[],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csd_web_resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]}.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;snippet&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csd_web_snippet_resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]}.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note how &lt;code&gt;key&lt;/code&gt; is specified alongside &lt;code&gt;&quot;snippet&quot;&lt;/code&gt;. This means that the path following &lt;code&gt;snippet/&lt;/code&gt; in the URI will be associated with the &lt;code&gt;key&lt;/code&gt; atom in the &lt;code&gt;dict&lt;/code&gt; generated by &lt;code&gt;wrq:path_info()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We're ready to rock. Rebuild, then hit the right URL, &lt;strong&gt;http://localhost/snippet/B41kUQ==&lt;/strong&gt; (again, your key will be different), and you should get the following:&lt;/p&gt;
&lt;img src=&quot;http://buffered.io/uploads/2010/10/webmachine-to-riak.png&quot; /&gt;

&lt;h2&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;Thanks for sticking with me! As you can see there is a little bit of ground-work required if you're interested in producing some form of structure that you can reuse all over your application, but the effort is definitely worth it. Now we have something in place which we can use to store arbitrarily complex &lt;code&gt;proplists&lt;/code&gt; into Riak in JSON format, we have the ability to talk to Riak (read and write), and we have a proper application structure in place which we can build on.&lt;/p&gt;
&lt;p&gt;Please note that the mechanism implemented in this post is quite simple and doesn't cover all cases that will be required before the application is complete. In future posts, this implementation will change to support more of those cases, such as dealing with concurrent updates, handling versions, etc.&lt;/p&gt;
&lt;p&gt;Many thanks to those people who took the time out of their busy schedules to review my post before I shared it with the world. Those people shall remain nameless to protect them from any mistakes made in this post (which are solely my own).&lt;/p&gt;
&lt;p&gt;As always, comments and feedback is welcomed and greatly appreciated. As are suggestions on improvements, pitfalls and blatant mistakes :)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The code for Part 3 (this post) can be found &lt;a href=&quot;https://bitbucket.org/OJ/csd/src/55fec468488c&quot; title=&quot;Source code for Part 3&quot;&gt;on my Bitbucket account&lt;/a&gt;.&lt;/p&gt;</content:encoded>
	<dc:date>2010-10-13T11:31:58+00:00</dc:date>
</item>
<item rdf:about="http://buffered.io/2010/10/06/asp-net-mvc-2-random-sign-offs-and-tempdata-loss/">
	<title>IJs Rants: ASP.NET MVC 2, Random Sign-offs and TempData Loss</title>
	<link>http://buffered.io/2010/10/06/asp-net-mvc-2-random-sign-offs-and-tempdata-loss/</link>
	<content:encoded>&lt;p&gt;&lt;a title=&quot;MVC&quot; href=&quot;http://buffered.io/uploads/2010/10/mvc.png&quot; rel=&quot;lightbox[contentadvisor]&quot;&gt;&lt;img src=&quot;http://buffered.io/uploads/2010/10/mvc.png&quot; alt=&quot;MVC&quot; width=&quot;150&quot; /&gt;&lt;/a&gt;In the last few days I've been working on resolving issues in a production system which runs on &lt;a title=&quot;What is ASP.NET MVC&quot; href=&quot;http://www.asp.net/mvc/whatisaspmvc&quot;&gt;ASP.NET MVC 2&lt;/a&gt;. Most of the issues were actually really easy to resolve and the team of developers were able to fix them and deploy to production without too many problems.&lt;/p&gt;
&lt;p&gt;Unfortunately, as always, there was one problem in particular that had us scratching our heads and was causing some of us to lose sleep. All over the Internet there were posts of people describing similar symptoms yet none of them revealed a solid answer.&lt;/p&gt;
&lt;p&gt;The purpose of this post is to document the issue and the resolution in it's entirety. It's in story form rather than reference form because that's how I felt like writing it :) &lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;The Issue&lt;/h2&gt;
&lt;p&gt;First of all, the percentage of users that were experiencing this problem was relatively low, less than 1 in every 400. This is low enough to indicate that we were going to have one hell of a time finding the issue.&lt;/p&gt;
&lt;p&gt;So what was the issue?&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;entry-point&lt;/strong&gt; to the site was the &lt;strong&gt;sign-in&lt;/strong&gt; page. This is the first page that the user sees. In short, users would sign in to the site and be presented with the landing page in the authenticated area of the site. As soon as they attempted to click on &lt;em&gt;any&lt;/em&gt; link inside the authenticated area they were &lt;strong&gt;immediately sent back to the sign-in page&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;The Investigation&lt;/h2&gt;
&lt;p&gt;After adding some more logging functionality to the application and talking to one of our users, we were able to see some really odd behaviour. The user would sign-in, again they were presented with their landing page. Before the user clicked on anything else, we could see that the system had recorded that the browser had &lt;strong&gt;already invoked the sign-off functionality&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Not good. Thankfully our logging was able to point the finger at a particular action on the site which was causing the user to be signed off. For business and security reasons, the sign-in page had some code that detected if the user was already signed in and, if so, would immediately sign them off. The main driver was to prevent users from &lt;em&gt;thinking&lt;/em&gt; that they had signed off from the application and then walk away without realising that their session was still available.&lt;/p&gt;
&lt;p&gt;This didn't make sense. The user was clearly not returning to the sign-in page, but for some reason the system thought they were and hence was signing them off.&lt;/p&gt;
&lt;p&gt;Emulating this at the office was proving to be impossible. We weren't able to reproduce it in &lt;em&gt;any&lt;/em&gt; of our environments, and according to our help desk, none of the users claimed to be using any tools, plug-ins or add-ins which may be interfering with their sessions.&lt;/p&gt;
&lt;p&gt;We searched the &lt;a href=&quot;http://google.com/&quot;&gt;usual&lt;/a&gt; &lt;a href=&quot;http://stackoverflow.com/&quot;&gt;haunts&lt;/a&gt; for answers, but none came up. A post here and there would get our hopes up, but we would eventually have them dashed after realising that the resolution mentioned was something that was already place. Some of the common suggestions are:&lt;/p&gt;
&lt;ol&gt;
    &lt;li&gt;Make sure that the &lt;a title=&quot;Machine Key Explained&quot; href=&quot;http://msdn.microsoft.com/en-us/library/ff649308.aspx#paght000007_machinekeyexplained&quot;&gt;machine key&lt;/a&gt; is the same across all sites in the web farm.&lt;/li&gt;
    &lt;li&gt;Make sure that the &lt;a title=&quot;ASP.NET &amp; IIS Website Load Balancing&quot; href=&quot;http://knol.google.com/k/kishore-gorjala/asp-net-iis-website-load-balancing/3jdbfde3g5y2c/3&quot;&gt;IIS site identifier&lt;/a&gt; is the same across all sites in the web farm.&lt;/li&gt;
    &lt;li&gt;Make sure that the cookie path was set to &lt;code&gt;/&lt;/code&gt; instead of having a sub-path like &lt;code&gt;/mysite&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Make sure that the user's browser was accepting cookies.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While point 4 was indeed a problem for some users, it wasn't the golden bullet we were looking for.&lt;/p&gt;
&lt;p&gt;We spun the wheels for a few days trying to come up with potential reasons why this could be the case. One of the developers suggested that it could be an issue with applications that operate as download accelerators. This application might scrape the screen when the user has signed in, and in an effort to pre-cache the next potential click it &lt;a title=&quot;HTTP Request Methods&quot; href=&quot;http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods&quot;&gt;GET&lt;/a&gt;s each link that it finds on screen. It turns out that this wasn't, nor couldn't, be the issue: we were not including any links to the sign-on page anywhere in the authenticated area of the site.&lt;/p&gt;
&lt;h2&gt;The First Shot&lt;/h2&gt;
&lt;p&gt;We decided to take a shot in the dark and remove the functionality from the sign-in page which logs the users off. Instead, we present them with a notice which tells them that they are already signed-in. After deploying to production, our users were able to sign in! We were leaping for joy, though frustrated because we didn't know why this was a problem in the first place.&lt;/p&gt;
&lt;p&gt;Our joy was short-lived. The application itself provides a series of wizards that the user can utilise to perform certain tasks. &lt;em&gt;All&lt;/em&gt; of the users who had problems signing in were having unexpected errors shown when using the wizards. Something was still amiss.&lt;/p&gt;
&lt;p&gt;We were at a loss. So we decided to call in the cavalry: our poor users.&lt;/p&gt;
&lt;h2&gt;The Site Visit&lt;/h2&gt;
&lt;p&gt;We got in contact with one user, a lady who had been completely unable to interact with the site since its release, and she graciously accepted our request to pay her a visit and allow us to witness the failure in action. This proved to be a &lt;strong&gt;very&lt;/strong&gt; good move as you'll soon see.&lt;/p&gt;
&lt;p&gt;After the initial meet and greet, I was given access to our client's network. At first, I wanted to plug my own personal laptop in to the network to see if I could reproduce the problem without having to touch the client's machine. It wasn't to be, as  everything worked perfectly for me.&lt;/p&gt;
&lt;p&gt;I requested access to the client's machine and fired up her browser of choice (&lt;a title=&quot;Internet Explorer&quot; href=&quot;http://www.microsoft.com/windows/internet-explorer/default.aspx&quot;&gt;yuck&lt;/a&gt;). As soon as I hit the site, I was presented with a dialog asking for a password. Here is what it looked like:&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;The Content Advisor Prompt&quot; href=&quot;http://buffered.io/uploads/2010/10/content-advisor-prompt.png&quot; rel=&quot;lightbox[contentadvisor]&quot;&gt;&lt;img src=&quot;http://buffered.io/uploads/2010/10/content-advisor-prompt.png&quot; alt=&quot;The Content Advisor Prompt&quot; width=&quot;250&quot; /&gt;&lt;/a&gt;I had never seen this before, so I asked the client what it was. Her response:
&lt;blockquote&gt;Oh, that's the content advisor that my husband set up. We have that enabled on all our computers so that only me and my husband can get to certain websites.&lt;/blockquote&gt;
&lt;a title=&quot;Microsoft Content Advisor&quot; href=&quot;http://www.microsoft.com/windows/ie/using/howto/security/contentadv/config.mspx&quot;&gt;Content Advisor&lt;/a&gt;? Why had I never heard of this before? After literally &lt;em&gt;years&lt;/em&gt; of building production websites, I had never once encountered this beast. Yet here it was in front of me on screen, like a smart-arse teenager giving me the bird, and according to the dates on some of the articles on the web it has been around for quite a few years.&lt;/p&gt;
&lt;p&gt;I proceeded to sign in to the site and attempt to perform an action using the wizard. As expected, it failed miserably. I then asked the client to disable the Content Advisor to see if it made any difference.&lt;/p&gt;
&lt;p&gt;It did. The site performed &lt;em&gt;flawlessly&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;The Resolution&lt;/h2&gt;
&lt;p&gt;So the Content Advisor was causing problems. But how? What was it doing behind the scenes that was preventing our users from getting the quality experience that we'd worked so hard to deliver?&lt;/p&gt;
&lt;p&gt;Now that we had knowledge of the content advisor our queries to the Interwebs resulting in more revealing posts, such as one posted on &lt;a title=&quot;IE's Content Advisor, PICS Ratings and the ASP.NET Flakey of the Day&quot; href=&quot;http://www.hanselman.com/blog/IEsContentAdvisorPICSRatingsAndTheASPNETFlakeyOfTheDay.aspx&quot;&gt;Scott Hanselman's blog&lt;/a&gt;. Here are some key bits of information from that post:&lt;/p&gt;
&lt;blockquote&gt;... when Content Advisor is OFF, the interaction looks like this:

HTTP GET /somefile.aspx
RESPONSE 200
HTTP GET /somethingelse.aspx (we did a javascript.open)
RESPONSE 302 getthisfile.aspx
HTTP GET getthisfile.aspx
RESPONSE 200

But when &lt;strong&gt;Content Advisor is ON&lt;/strong&gt;, we see this:

HTTP GET /somefile.aspx
RESPONSE 200
HTTP GET /somethingelse.aspx (we did a javascript.open)
&lt;strong&gt;HTTP GET /
RESPONSE 200&lt;/strong&gt;
RESPONSE 302 getthisfile.aspx
HTTP GET getthisfile.aspx
RESPONSE 200

...

When the Content Advisor is ON, Internet Explorer will request '/' from a site anytime a new window is opened.&lt;/blockquote&gt;

&lt;p&gt;As we can see from the above quote, the Content Advisor hits the root of the site on the user's behalf in an effort to scrape &lt;a title=&quot;Platform for Internet Content Selection&quot; href=&quot;http://en.wikipedia.org/wiki/Platform_for_Internet_Content_Selection&quot;&gt;PICS&lt;/a&gt; information about the website.&lt;/p&gt;
&lt;p&gt;According to the last point in the above quote, this will happen any time a new window is opened. Unfortunately for us, it goes deeper than that: &lt;strong&gt;the Content Advisor makes the browser request '/' every single time an action is invoked if it can't find sufficient PICS information for the current URL&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Yes, it's shit, but that's the way it works.&lt;/p&gt;
&lt;p&gt;So any users which have the Content Advisor turned on will actually be hitting the site twice for every GET action they perform. This explains why the users were being signed off! Our sign-off code was being executed behind the scenes without the users being aware of it.&lt;/p&gt;
&lt;p&gt;But why was it causing unexpected errors when clients were using the wizard? To answer that, we need to know about a little feature of MVC called &lt;a title=&quot;TempData @ you've been HAACKED&quot; href=&quot;http://haacked.com/tags/TempData/default.aspx&quot;&gt;TempData&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For those who don't want to click the above link, TempData is a feature of ASP.NET MVC which allows information to be persisted across post-backs to the server. A classic example is when URI /Foo gets invoked, and the action results in a redirect to /Bar. But /Bar requires some data that got sent to /Foo, so the /Foo action stores that data in the TempData dictionary which allows /Bar to get access to it during processing. It's a nifty feature, and one that we use extensively.&lt;/p&gt;
&lt;p&gt;The key piece of information to remember about TempData is that it &lt;em&gt;only persists data across a single post-back&lt;/em&gt;. That means that if you post back to the server once, TempData is lost unless the target action &lt;strong&gt;explicitly requests for it to stick around&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This is the deal-breaker. If /Bar assumes that TempData contains information from /Foo when it fires up then /Bar is going to break if the information is &lt;em&gt;not&lt;/em&gt; there. Why would it not be there if a redirect happened? That's right, the f$%#ing Content Advisor!&lt;/p&gt;
&lt;p&gt;It turns out that every time the Content Advisor hits the root of the site, TempData is cleared. This is obvious in hindsight because the root URI is an &lt;a title=&quot;ASP.NET MVC Controller Overview&quot; href=&quot;http://www.asp.net/mvc/tutorials/asp-net-mvc-controller-overview-cs&quot;&gt;action&lt;/a&gt; just like any other anywhere in the whole site. That action gets invoked through the same means and comes with the same caveats ... including that of TempData getting cleared unless we ask it not to. So the chain of events looked like this:&lt;/p&gt;
&lt;ol&gt;
    &lt;li&gt;User invokes a wizard via a simple click.&lt;/li&gt;
    &lt;li&gt;Request is set to the server for /Foo&lt;/li&gt;
    &lt;li&gt;/Foo gets executed and stores information, &lt;code&gt;Baz&lt;/code&gt;, in TempData so that the next step in the wizard, /Bar, can get access to it.&lt;/li&gt;
    &lt;li&gt;/Foo returns page content to the user.&lt;/li&gt;
    &lt;li&gt;The browser receives the page content from the /Foo action and the Content Advisor notices a lack of PICS information in the HTTP headers and META tags.&lt;/li&gt;
    &lt;li&gt;The Content Advisor forces the browser to make a request to / in an attempt to find the missing PICS information.&lt;/li&gt;
    &lt;li&gt;The root site action is hit and it renders the sign-on page content.&lt;/li&gt;
    &lt;li&gt;At the end of page content generation, the TempData dictionary notices that no requests have been made to retain any of the information across another call, and hence &lt;strong&gt;all of the TempData information is lost&lt;/strong&gt;, including &lt;code&gt;Baz&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;The user click's &quot;Next&quot; in the wizard, which causes the browser to invoke the /Bar action on the server.&lt;/li&gt;
    &lt;li&gt;The server invokes /Bar and the first thing it does is attempt to pull &lt;code&gt;Baz&lt;/code&gt; out of TempData. &lt;code&gt;Baz&lt;/code&gt; ends up being null.&lt;/li&gt;
    &lt;li&gt;Game over, Red Rover.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are quite a few issues that were highlighted as a result, but the key one is this: &lt;em&gt;you can't assume that your users aren't using some form of Content Advisor which is hitting your server with unexpected requests&lt;/em&gt;. In our case, the resolution was simple. We just had to add a couple of lines to our root action:&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SignOn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsAuthenticated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// force the TempData dicionary to keep hold&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// of the information it has in case this&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// action is being hit by a Content Advisor.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TempData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Keep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// rest of the action code&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(...);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The first question you might ask is: why didn't you just add PICS data to your site to prevent the Content Advisors from behaving that way? The short answer is that you can't guarantee that the Content Advisors will adhere to the &quot;rules&quot;, especially given that there don't appear to be any.&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;Platform for Internet Content Selection&quot; href=&quot;http://en.wikipedia.org/wiki/Platform_for_Internet_Content_Selection&quot;&gt;PICS&lt;/a&gt; has already been replaced with &lt;a title=&quot;Protocol for Web Description Resources&quot; href=&quot;http://en.wikipedia.org/wiki/POWDER&quot;&gt;POWDER&lt;/a&gt;. But POWDER doesn't appear to be used anywhere, and there's very little information around on it. Attempting to support all possible half-baked standards would result in serving up a great deal more content for the sake of a very small subset of users who actually use Content Advisors. It made much more sense to just persist TempData across one more call.&lt;/p&gt;
&lt;p&gt;Bear in mind that while the Content Advisor is built-in to the Internet Options area in Windows, it's not specific to Internet Explorer. Both Chrome and Safari are affected by the Content Advisor if it is enabled!&lt;/p&gt;
&lt;p&gt;So for anyone out there who is building, or has built, a public-facing website using ASP.NET MVC please bear this in mind. Keep an eye on your TempData usage, make sure that your root action persists your TempData if required, and avoid having that same action sign off your users.&lt;/p&gt;
&lt;p&gt;I hope this helps someone :) Comments and feedback greatly appreciated.&lt;/p&gt;</content:encoded>
	<dc:date>2010-10-06T13:39:03+00:00</dc:date>
</item>
<item rdf:about="http://www.themarkphillips.com//2010/09/23/Using-Open-Source-to-Promote-Sustainable-Farming">
	<title>themarkphillips: Using Open Source to Promote Sustainable Farming</title>
	<link>http://www.themarkphillips.com//2010/09/23/Using-Open-Source-to-Promote-Sustainable-Farming.html</link>
	<content:encoded>&lt;p class=&quot;date&quot;&gt;&lt;i&gt;&lt;strong&gt;September 23, 2010&lt;/strong&gt;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;One of the inevitable and immensely positive side effects of being the Community Manager at &lt;a href=&quot;http://basho.com&quot;&gt;Basho Technologies&lt;/a&gt; has been taking a keen interest in other open source projects championed by members of our community. One such member is &lt;a href=&quot;http://twitter.com/frostbytten&quot;&gt;Chris Villalobos&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;I first had the pleasure of speaking with Chris some months back after he let it leak that he used Riak to build a distributed event registration system for his church (about which I quickly coerced him into &lt;a href=&quot;http://blog.basho.com/2010/04/20/riak-in-production---a-distributed-event-registration-system-written-in-erlang/&quot;&gt; writing a blog post&lt;/a&gt;). Chris has since changed jobs and is now an open source developer working at the University of Florida.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The University of Florida is one of eight universities that make up the &lt;a href=&quot;http://seclimate.org/&quot;&gt;Southeast Climate Consortium&lt;/a&gt;&amp;nbsp;(SECC), whose mission &quot;is to use advances in climate sciences...to provide scientifically sound information and decision support tools for agricultural ecosystems, forests and other terrestrial ecosystems, and coastal ecosystems of the Southeastern USA.&quot; Chris is now working on the &lt;a href=&quot;http://open.agroclimate.org/wp/&quot;&gt;Open AgroClimate Project&lt;/a&gt; which is an extension of the SECC. Open AgroClimate is helping farmers and other providers in the Southeast USA, South America, and soon the world, manage their farming resources more effectively given differing climate conditions using very specialized and soon-to-be open source software.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;I interviewed Chris about Open AgroClimate and, more specifically, his role and how he is working to open source these valuable climate risk tools that have the potential to help farmers the world over.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;My questions are in bold. Chris' responses are in standard text.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What is the&amp;nbsp;&lt;span&gt;Southeast Climate Consortium&lt;/span&gt;&amp;nbsp;and how does it relate to Open AgroClimate?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Southeast Climate Consortium has been around for about four years with the purpose of creating climate risk tools to help farmers local to the Southeast US. They started a website called &lt;a href=&quot;http://agroclimate.org/&quot;&gt;AgroClimate&lt;/a&gt; which is a collection of software tools built to help local producers manage their resources, such as crops, and assess their risks. It's a project that started as an outreach from different agricultural providers in the Southeast wanting to know things like rainfall patterns and how crops were affected by the area's climate.&lt;/p&gt;
&lt;p&gt;To go back a bit further, what they did was to take the work of professors and PhD students in the area of agriculture and wrap code around it to make it actually work. There had been much work in the field which aimed to promote better crop growth through the study of historical weather patterns. They are now building out more crop-specific tools that take into account, for example, how weather patterns will affect their upcoming crop. The result of this work is primarily the interactive tools accessible through the the AgroClimate site.&lt;/p&gt;
&lt;p&gt;What I'm working on is known as Open AgroClimate, which is an extension of the AgroClimate project with the emphasis on open sourcing these tools to expand their usage and development. The SECC made the decision to open source these tools last year. They want to get bigger than their current scope in the Southeast and they need more contributors to make it grow. They use &lt;a href=&quot;http://www.r-project.org/&quot;&gt;R-Scripts&lt;/a&gt;&amp;nbsp;extensively in the tools and had seen it succeed as an open source project and reasoned, &quot;Why can't we do it?&quot; Not much has been done outside of just saying, &quot;Let's open source it.&quot; And, so, I was hired because I am passionate about open source. I've been focusing on that aspect for a few months now.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What exactly are these tools and how will they benefit from being open source?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The tools are different software programs - currently various, continuously-run algorithms in the form of PHP scripts - that use historical data from different weather stations to calculate weather patterns and then determine how a given weather pattern will affect a different crop in a given area. For example, &lt;a href=&quot;http://agroclimate.org/tools/drought/&quot;&gt;The Drought Tools&lt;/a&gt; show you the risk of drought in your area based on various factors; the &lt;a href=&quot;http://agroclimate.org/tools/climateRisk/&quot;&gt;Climate Risk Tool&lt;/a&gt; shows you what your current climate situation is and how you should account for it moving forward; another example is the &lt;a href=&quot;http://agroclimate.org/tools/strawberry/&quot;&gt;Strawberry Disease Tool.&lt;/a&gt; This will show farmers how large a chance their strawberries have to get a disease based on the area they are in and what pesticides they've already sprayed. It will also make recommendations on what to do next to hopefully ensure high strawberry yield.&lt;/p&gt;
&lt;p&gt;At the moment, these tools (of which there are about ten) are focused strictly on the areas covered by the SECC. We want to expand to other areas. For example, a person in Texas wants to use it to help with cotton growth. By virtue of the tools being open source, he can take these algorithms and the different formulas we are using, plug in his weather data, and modify it for cotton.&lt;/p&gt;
&lt;p&gt;We want to take it to other countries, too. Individuals in Brazil and Paraguay are currently interested in using the software. In order to to do that, however, we needed a better development platform. So I put in a lot of time to switch us to the WordPress development platform, which makes it relatively easy for an entry level user to manage. And, by making the source open and accessible, the tools will be easier to adapt to their needs. This is what I'm spending the majority of my time on.&lt;/p&gt;
&lt;p&gt;My long-term plan is to expand this to as many countries as possible. I see this having a huge impact in third world countries. Most of these countries have the data lying around but they have no way to apply it in a useful manner to help their farmers grow more efficiently. If, however, a local farmer in Ethiopia were able to access a municipal website and see when it was best to plant a given crop, this would make their practices much more sustainable. And obviously, the more open we make the tools, code, and project itself, the easier it is to spread the usage.&lt;/p&gt;
&lt;p&gt;It's a large project and I don't know of any other agricultural climate risk type tools that are open source. This should be able to be implemented in any country, and we feel compelled to make it work as advertised, in an open nature, as there aren't many projects doing anything like this with as much potential and scope.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What language are the tools actually written in?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It's primarily in PHP. We are also using R-scripts to so some of the data analysis and graphics on the backend, which, at the moment are specific to what the SECC is doing. But we are going to use our R scripts to guide others and release this code, alongside the PHP code, entirely open source. I'm also hoping to standardize on jQuery and WordPress for platform development as it's easy for an end user to setup and configure.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What hurdles are you running into?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The bureaucratic nature of academia makes it hard to get decisions made in a timely manner on a project like this. The largest hurdle at the moment, for instance, is simply settling on which license to use. From what I understand, the question of which license to use has been in the doldrums for about a year now. The first thing I did when I arrived was to gather the appropriate approvals to expedite the process such that, at the moment, the license issue is being reviewed by the final committee. What this means is that we should have a decision within the coming weeks.&lt;/p&gt;
&lt;p&gt;Intellectual Property is a problem, too. We are coming from the university/academic background, so IP issues are delicate. As I mentioned before, the tools are based on the thesis work of various PhD students. It can be difficult to get people to understand that we are taking what was once their thesis and simply wrapping the appropriate code around it to make it more functional.&lt;/p&gt;
&lt;p&gt;Getting people used to open source tools for development has also been a hurdle. Something as simple as Git or Mercurial, which someone like me is quite accustomed to, is unfamiliar to a lot of people. I'm spending my time training a lot of people. Remember, the code is partly being written by scientists and students, not career developers. This also lends itself to code which could be a lot cleaner. As a result, I've been working with our developers to refactor our various code bases before it's released.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So, unfortunately, you're still working on actually open sourcing the code. What will the final license be?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I want to use the &lt;a href=&quot;http://en.wikipedia.org/wiki/BSD_License&quot;&gt;BSD License&lt;/a&gt;. The &lt;a href=&quot;http://en.wikipedia.org/wiki/MIT_License&quot;&gt;MIT License&lt;/a&gt; does offer the amount of openness we are looking for, but due to the academic nature of the tools and the code, I would really prefer the language used in the BSD's &quot;Non-endorsement&quot; clause. As for the &lt;a href=&quot;http://en.wikipedia.org/wiki/GPL&quot;&gt;GPL&lt;/a&gt;, for our purposes it's too limiting. I want people to be able to roll this into a commercial product if they desire to do so. Just as long as there is proper attribution, we are fine with it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Where will the project be hosted?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As of right now, we are planning on using GitHub when the license issue has been ironed out. One of the goals is to raise the number of contributors and awareness and GitHub has proven itself quite capable in that respect. We will also maintain our own repositories on our servers as well.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So Open AgroClimate will be providing the code to help farmers manage their crop risk. Where are these farmers getting the weather data?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Right now, the SECC is getting the data from organizations like the &lt;a href=&quot;http://www.weather.gov/&quot;&gt;NOAA/NWS&lt;/a&gt;, and University has connections with local weather extensions such as &lt;a href=&quot;http://fawn.ifas.ufl.edu/&quot;&gt;FAWN&lt;/a&gt; and &lt;a href=&quot;http://www.griffin.uga.edu/aemn/&quot;&gt;AEMN&lt;/a&gt;. Suffice it to say, there are many data sources.&lt;/p&gt;
&lt;p&gt;Unfortunately at the moment the code base is tailored to the needs of the SECC. One of the tools I am currently working on will enable what I am calling &quot;Plug and Play&quot; data usage. When complete, you'll be able to point your data source at it, whatever form it may be in (csv, excel, flatfile, json, etc.). And it's modular, so that if there isn't code already available that will connect your type of data, you (or another contributor) can write a connector, enabling you to parse the data and load it into the primary database where we can process and analyze it with the tools.&lt;/p&gt;
&lt;p&gt;Flexibility with data sources is a large component of the project, and it becomes more critical as we move forward because we really will need to be able to parse anything. A while back someone said, &quot;Let's just standardize on XML.&quot; You're going to tell me that some weather station in Paraguay is going to be storing their weather data in XML? Doubtful. So the ability to be flexible with data types will be essential to our expansion.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Are you actively recruiting data providers?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It's not a primary initiative. That will come as we start rolling out the infrastructure to places like Paraguay. They will be our first test. They have data sources and types that we've not yet encountered.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Besides an internet connection, what does a rural farmer in Paraguay need to know and do to use your tools?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Thankfully, the way it's set up right now, all the data that a farmer would need is coming from weather stations. End users need only specify where they are and they're off and running. This is how it works with the risk planning tools. In the case of the strawberry planning tool, you input what you've already done to the crop, and it shows you what your risk of disease is based on various factors. It will also make recommendations on what pesticides to use or not to use. So, in essence, they only need to input information that they are likely to already know about their land and farming practices.&lt;/p&gt;
&lt;p&gt;For some of the tools we actually have a mobile application that works on various smart phone platforms. It's less detailed but it's still quite useful. And we already know of farmers who take their cell phones into the fields with them to use while they are farming.&lt;/p&gt;
&lt;p&gt;I should also note that one of the primary tenets is &quot;Don't Develop in Isolation.&quot; We encourage developers to work with the farmers (if possible) when developing these tools such that if the farmers can't figure out how to use them, it needs to be changed. That is where our heart is. Not all scientists or developers think like end users.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How many people are contributing at the moment?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;At the University of Florida there are about six. We also have some in Brazil, and several throughout the universities that compose the SECC.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Once all the tools are officially open sourced and more accessible, what types of contributors are you looking for?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Let's see...basic tool developers would be one type. The front end interfaces need writing and converting into different crops like cotton and corn. Support for using different data calculation methods would be great, too. We also need database and backend developers. We are using MySQL currently to store the data but would love to have support for other DBs if they were needed and more useful. We also need people to write the code that makes it possible for any data source to be plugged into one of the tools for analysis. That's the &quot;Plug and Play&quot; code I mentioned before.&lt;/p&gt;
&lt;p&gt;Graphics designers would also be a huge win for us, especially as we move towards other demographics. At the moment we are working with one template which has served us well but having more options would be optimal.&lt;/p&gt;
&lt;p&gt;Finally, translators are needed. We would like people to be able to see these tools in their locale, and because of the internationalization support of WordPress, it is very possible. The tools currently under development and going forward will use .po/.mo files for translation purposes.&lt;/p&gt;
&lt;p&gt;Needless to say, there is a lot of room for contribution, so we want to talk to anyone and everyone who is interested.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Speaking of contributors, what is the best way for a developer to get involved right now?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Right now, the best way for people to get involved is to stay informed of the progress via the &lt;a href=&quot;http://open.agroclimate.org/wp/listserv/&quot;&gt;mailing lists&lt;/a&gt; and &lt;a href=&quot;http://open.agroclimate.org/bb/&quot;&gt;forums&lt;/a&gt; on the Open AgroClimate site. They are admittedly sparse at the moment, but as we come closer to starting the engines for a release, they will be the hub of communication for the project.&lt;/p&gt;</content:encoded>
	<dc:date>2010-09-23T07:00:00+00:00</dc:date>
</item>
<item rdf:about="http://buffered.io/2010/09/12/webmachine-erlydtl-and-riak-part-2/">
	<title>IJs Rants: Webmachine, ErlyDTL and Riak - Part 2</title>
	<link>http://buffered.io/2010/09/12/webmachine-erlydtl-and-riak-part-2/</link>
	<content:encoded>span.filename
{
  font-weight: bold;
  font-family: Consolas, Courier;
  font-size: 12px;
  text-align: right;
  display: block;
  margin: 0;
  padding: 3px;
  background-color: #e0e0ff;
}


&lt;p&gt;&lt;img src=&quot;http://buffered.io/uploads/2010/09/riak-logo.png&quot; alt=&quot;Riak Logo&quot; /&gt;In &lt;a href=&quot;http://buffered.io/2010/09/01/webmachine-erlydtl-and-riak-part-1/&quot; title=&quot;Wembachine, ErlyDTL and Riak - Part 1&quot;&gt;Part 1&lt;/a&gt; of the series we covered the basics of getting the development environment up and running. We also looked at how to get a really simple ErlyDTL template rendering. If you haven't yet gone through Part 1, I suggest you do that now. If you have, read on!&lt;/p&gt;
&lt;p&gt;There are a few reasons this series is targeting this technology stack. One of them is &lt;strong&gt;uptime&lt;/strong&gt;. We're aiming to build a site that stays up as much as possible. Given that, one of the things that I missed in the previous post was setting up a &lt;a href=&quot;http://en.wikipedia.org/wiki/Load_balancing_(computing)&quot; title=&quot;Load balancing&quot;&gt;load balancer&lt;/a&gt;. Hence this post will attempt to fill that gap. &lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;Any serious web-based application will have load-balancing in play somewhere. While not essential during development, it's handy to have a similar set up in the hope that it exposes you to some potential issues you might face when the application reaches production.&lt;/p&gt;
&lt;p&gt;There are many high-quality load-balancing solutions out there to choose from. For this series, we shall be using &lt;a href=&quot;http://haproxy.1wt.eu/&quot; title=&quot;HAProxy&quot;&gt;HAProxy&lt;/a&gt;, which is a common choice amongst developers building scalable web applications. The rest of this post will cover how to set up HAProxy, verifying that the configuration is correct and confirming that it behaves appropriately when nodes in our cluster go down.&lt;/p&gt;
&lt;p&gt;Please note the goal is to demonstrate how HAProxy &lt;em&gt;can&lt;/em&gt; be configured. When deploying to your production environments please make sure the configuration matches your needs.&lt;/p&gt;
&lt;h3 id=&quot;haproxy_installation&quot;&gt;HAProxy installation&lt;/h3&gt;
&lt;p&gt;Let's start by pulling down the latest stable version of HAProxy's source, extracting it and building it. Here's a sample log of what you should expect:&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;oj@nix ~/blog $ wget http://haproxy.1wt.eu/download/1.4/src/haproxy-1.4.14.tar.gz

... snip ...

&lt;p&gt;oj@nix ~/blog $ tar -xzf haproxy-1.4.14.tar.gz &lt;/p&gt;
&lt;p&gt;... snip ...
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At this point we've got the source and we're ready to make. HAProxy requires a parameter in order to build, and this parameter varies depending on your target system:&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;oj@nix ~/blog $ cd haproxy-1.4.14
oj@nix ~/blog/haproxy-1.4.14 $ make

Due to too many reports of suboptimized setups, building without
specifying the target is no longer supported. Please specify the
target OS in the TARGET variable, in the following form:

&lt;p&gt;make TARGET=xxx&lt;/p&gt;
&lt;p&gt;Please choose the target among the following supported list :&lt;/p&gt;
&lt;p&gt;linux26, linux24, linux24e, linux22, solaris
   freebsd, openbsd, cygwin, custom, generic&lt;/p&gt;
&lt;p&gt;Use &amp;quot;generic&amp;quot; if you don't want any optimization, &amp;quot;custom&amp;quot; if you
want to precisely tweak every option, or choose the target which
matches your OS the most in order to gain the maximum performance
out of it. Please check the Makefile in case of doubts.
make: *** [all] Error 1
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;According to &lt;a href=&quot;http://en.wikipedia.org/wiki/Uname&quot; title=&quot;uname&quot;&gt;uname&lt;/a&gt;, I'm running Linux Kernel 2.6:&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;oj@nix ~/blog/haproxy-1.4.14 $ uname -r
2.6.31-21-generic
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As a result, I'll be passing in &lt;strong&gt;linux26&lt;/strong&gt;. Make sure you specify the correct option depending on which system you are running. We'll be building it &lt;em&gt;and&lt;/em&gt; installing it so that it can be called from anywhere:&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;oj@nix ~/blog/haproxy-1.4.14 $ make TARGET=linux26

... snip ...

&lt;p&gt;oj@nix ~/blog/haproxy-1.4.14 $ sudo make install&lt;/p&gt;
&lt;p&gt;... snip ...
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Simple! We now need to create a configuration for HAProxy which we can use during development. Not surprisingly, HAProxy can be run as a daemon, but it can also be invoked from the command line with a configuration passed as a parameter. For our development, we'll be executing from the command line as this will give us feedback/output on what's going on.&lt;/p&gt;
&lt;p&gt;Let's create a file called &lt;code&gt;dev.haproxy.conf&lt;/code&gt; inside our application directory so that it can be included in our source:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;filename&quot;&gt;dev.haproxy.conf&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# start with the global settings which will&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# apply to all sections in the configuration.&lt;/span&gt;
global
  &lt;span class=&quot;c&quot;&gt;# specify the maximum connections across the board&lt;/span&gt;
  maxconn 2048
  &lt;span class=&quot;c&quot;&gt;# enable debug output&lt;/span&gt;
  debug

&lt;span class=&quot;c&quot;&gt;# now set the default settings for each sub-section&lt;/span&gt;
defaults
  &lt;span class=&quot;c&quot;&gt;# stick with http traffic&lt;/span&gt;
  mode http
  &lt;span class=&quot;c&quot;&gt;# set the number of times HAProxy should attempt to&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# connect to the target&lt;/span&gt;
  retries 3
  &lt;span class=&quot;c&quot;&gt;# specify the number of connections per front and&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# back end&lt;/span&gt;
  maxconn 1024
  &lt;span class=&quot;c&quot;&gt;# specify some timeouts (all in milliseconds)&lt;/span&gt;
  timeout connect 5000
  timeout client 50000
  timeout server 50000

&lt;p&gt;&lt;span class=&quot;c&quot;&gt;########### Webmachine Configuration ###################&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c&quot;&gt;# here is the first of the front-end sections.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# this is where we specify our webmachine instances.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# in our case we start with just one instance, but&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# we can add more later&lt;/span&gt;
frontend webfarm
  &lt;span class=&quot;c&quot;&gt;# listen on port 80 across all network interfaces&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;bind&lt;/span&gt; *:80
  &lt;span class=&quot;c&quot;&gt;# by default, point at our backend configuration&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# which lists our webmachine instances (this is&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# configured below in another section)&lt;/span&gt;
  default_backend webmachines&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c&quot;&gt;# this section indicates how the connectivity to&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# all the instances of webmachine should work.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Again, for dev there is only one instance, but&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# in production there would be more.&lt;/span&gt;
backend webmachines
  &lt;span class=&quot;c&quot;&gt;# we'll specify a round-robin configuration in&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# case we add nodes down the track.&lt;/span&gt;
  balance roundrobin
  &lt;span class=&quot;c&quot;&gt;# enable the &amp;quot;X-Forware-For&amp;quot; header so that&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# we can see the client's IP in Webmachine,&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# not just the proxy's address&lt;/span&gt;
  option forwardfor
  &lt;span class=&quot;c&quot;&gt;# later down the track we'll be making the use&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# of cookies for various reasons. So we'll&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# enable support for this while we're here.&lt;/span&gt;
  cookie SERVERID insert nocache indirect
  &lt;span class=&quot;c&quot;&gt;# list the servers who are to be balanced&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# (just the one in the case of dev)&lt;/span&gt;
  server Webmachine1 127.0.0.1:8000&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c&quot;&gt;########### Riak Configuration ###################&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c&quot;&gt;# We are yet to touch Riak so far, but given that&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# this post is going to cover the basics of&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# connectivity, we'll cover off the configuration&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# now so we don't have to do it later.&lt;/span&gt;
frontend dbcluster
  &lt;span class=&quot;c&quot;&gt;# We'll be using protocol buffers to talk to&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# Riak, so we will change from the default mode&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# and use tcp instead&lt;/span&gt;
  mode tcp
  &lt;span class=&quot;c&quot;&gt;# we're only interested in allowing connections&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# from internal sources (so that we don't expose&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# ourselves to the web. so we shall only listen&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# on an internal interface on port 8080&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;bind &lt;/span&gt;127.0.0.1:8080
  &lt;span class=&quot;c&quot;&gt;# Default to the riak cluster configuration&lt;/span&gt;
  default_backend riaks&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c&quot;&gt;# Here is the magic bit which load balances across&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# our three instances of riak which are clustered&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# together&lt;/span&gt;
backend riaks
  &lt;span class=&quot;c&quot;&gt;# again, make sure we specify tcp instead of&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# the default http mode&lt;/span&gt;
  mode tcp
  &lt;span class=&quot;c&quot;&gt;# use a standard round robin approach for load&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# balancing&lt;/span&gt;
  balance roundrobin
  &lt;span class=&quot;c&quot;&gt;# list the three servers as optional targets&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# for load balancing - these are what we set&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# up during Part 1. Add health-checking as&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# well so that when nodes go down, HAProxy&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# can remove them from the cluster&lt;/span&gt;
  server Riak1 127.0.0.1:8081 check
  server Riak2 127.0.0.1:8082 check
  server Riak3 127.0.0.1:8083 check
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the configuration above the &lt;code&gt;backend riaks&lt;/code&gt; section has three server nodes. Each one of them has the &lt;code&gt;check&lt;/code&gt; option specified. This enables health-checking on the same address and port that the server instance is bound to. If you decided that you didn't want to do health-checking in this manner you easily enable health-checking over HTTP, as Riak has a built-in URI which can be used to validate the state of the node. Change the &lt;code&gt;backend riaks&lt;/code&gt; section in the configuration to look like this:&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# Here is the magic bit which load balances across&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# our three instances of riak which are clustered&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# together&lt;/span&gt;
backend riaks
  &lt;span class=&quot;c&quot;&gt;# again, make sure we specify tcp instead of&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# the default http mode&lt;/span&gt;
  mode tcp
  &lt;span class=&quot;c&quot;&gt;# use a standard round robin approach for load&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# balancing&lt;/span&gt;
  balance roundrobin
  &lt;span class=&quot;c&quot;&gt;# enable HTTP health checking using the GET method&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# on the URI &amp;quot;/ping&amp;quot;. This URI is part of Riak and&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# can be used to determine if the node is up.&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# We specify that we want to use the GET action, and&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# use the URI &amp;quot;/ping&amp;quot; - this is the RESTful health&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# check URI that comes as part of Riak.&lt;/span&gt;
  option httpchk GET /ping
  &lt;span class=&quot;c&quot;&gt;# list the three servers as optional targets&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# for load balancing - these are what we set&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# up during Part 1. Add health-checking as&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# well so that when nodes go down, HAProxy&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# can remove them from the cluster.&lt;/span&gt;

&lt;p&gt;&lt;span class=&quot;c&quot;&gt;# change the health-check address of the node to 127.0.0.0:8091&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# which is the REST interface for the first Riak node&lt;/span&gt;
  server Riak1 127.0.0.1:8081 check addr 127.0.0.1 port 8091&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c&quot;&gt;# change the health-check address of the node to 127.0.0.0:8092&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# which is the REST interface for the second Riak node&lt;/span&gt;
  server Riak2 127.0.0.1:8082 check addr 127.0.0.1 port 8092&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;c&quot;&gt;# change the health-check address of the node to 127.0.0.0:8093&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# which is the REST interface for the third Riak node&lt;/span&gt;
  server Riak3 127.0.0.1:8083 check addr 127.0.0.1 port 8093
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To make sure this is functioning correctly, we need to open two consoles and change our working directory to our &lt;code&gt;csd&lt;/code&gt; application (for those who have forgotten, &lt;code&gt;csd&lt;/code&gt; is the application we're building - it was mentioned in &lt;a href=&quot;http://buffered.io/2010/09/01/webmachine-erlydtl-and-riak-part-1/&quot; title=&quot;Wembachine, ErlyDTL and Riak - Part 1&quot;&gt;Part 1&lt;/a&gt;). In console 1:&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;oj@nix ~/blog/csd $ sudo haproxy -f dev.haproxy.conf -d
Available polling systems :
     sepoll : pref=400,  test result OK
      epoll : pref=300,  test result OK
       poll : pref=200,  test result OK
     select : pref=150,  test result OK
Total: 4 (4 usable), will use sepoll.
Using sepoll() as the polling mechanism.
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This indicates that HAProxy is up and running and waiting for connections. Let's get Webmachine fired up in console 2:&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;oj@nix ~/blog/csd $ ./start.sh

... snip ...

&lt;p&gt;=PROGRESS REPORT==== 4-Apr-2011::23:39:27 ===
         application: csd
          started_at: nonode@nohost
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now Webmachine is fired up with our application running. We should be able to hit our page, this time at &lt;a href=&quot;http://localhost/&quot; title=&quot;localhost&quot;&gt;localhost&lt;/a&gt;, and see exactly what we saw at the end of &lt;a href=&quot;http://buffered.io/2010/09/01/webmachine-erlydtl-and-riak-part-1/&quot; title=&quot;Wembachine, ErlyDTL and Riak - Part 1&quot;&gt;Part 1&lt;/a&gt;.&lt;/p&gt;
&lt;img src=&quot;http://buffered.io/uploads/2010/09/haproxy-validation.png&quot; /&gt;

&lt;h3 id=&quot;verification_of_haproxy_configuration&quot;&gt;Verification of HAProxy configuration&lt;/h3&gt;
&lt;p&gt;On the surface it appears that we haven't broken anything. We also need to make sure that any communication with Riak that we have down the track is also functioning. So let's validate that now.&lt;/p&gt;
&lt;p&gt;First, we have to make sure that Riak is running. If you have followed &lt;a href=&quot;http://buffered.io/2010/09/01/webmachine-erlydtl-and-riak-part-1/&quot; title=&quot;Wembachine, ErlyDTL and Riak - Part 1&quot;&gt;Part 1&lt;/a&gt; already and your Riak cluster is running then you're good to go. If not, please read &lt;a href=&quot;http://buffered.io/2010/09/01/webmachine-erlydtl-and-riak-part-1/&quot; title=&quot;Wembachine, ErlyDTL and Riak - Part 1&quot;&gt;Part 1&lt;/a&gt; for information on how to install Riak and configure it to run as a cluster of 3 nodes.&lt;/p&gt;
&lt;p&gt;Next, let's create 3 new connections and use the &lt;a href=&quot;https://github.com/basho/riak-erlang-client/blob/master/src/riakc_pb_socket.erl#L181&quot; title=&quot;riakc_pb_socket:get_server_info/1&quot;&gt;get_server_info/1&lt;/a&gt; function to find out which node we are connected to. To do this, we'll need to use an Erlang console which has all the Riak dependencies ready to go. It just so happens that when we fired up our Webmachine instance, we got an Erlang console for free. Simply hit the &lt;code&gt;enter&lt;/code&gt; key and you'll be given a prompt. Notice that when we connect to Riak using the &lt;a href=&quot;https://github.com/basho/riak-erlang-client/blob/master/src/riakc_pb_socket.erl#L97&quot; title=&quot;riakc_pb_socket:start_link/2&quot;&gt;start_link/2&lt;/a&gt; function, we are passing in the IP address and port of the load-balanced cluster instead of one of the running Riak nodes:&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;C1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;riakc_pb_socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;

&lt;p&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PROGRESS&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;REPORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;====&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Apr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2011&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;41&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt;
          &lt;span class=&quot;nn&quot;&gt;supervisor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inet_gethost_native_sup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
             &lt;span class=&quot;nn&quot;&gt;started&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;148&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mfa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inet_gethost_native&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[[]]}}]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PROGRESS&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;REPORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;====&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Apr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2011&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;41&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt;
          &lt;span class=&quot;nn&quot;&gt;supervisor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kernel_safe_sup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
             &lt;span class=&quot;nn&quot;&gt;started&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;147&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                       &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inet_gethost_native_sup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                       &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mfargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inet_gethost_native&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[]}},&lt;/span&gt;
                       &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;restart_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temporary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                       &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shutdown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                       &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;worker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;146&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;riakc_pb_socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_server_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;C1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dev1@127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server_version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;0.12.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]}&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;C2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;riakc_pb_socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;151&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;riakc_pb_socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_server_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;C2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dev2@127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server_version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;0.12.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]}&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;C3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;riakc_pb_socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;154&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;riakc_pb_socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_server_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;C3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dev3@127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server_version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;0.12.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]}&lt;/span&gt;
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So we can see that the load balancer has allocated three different connections, each to a different node in the cluster. This is a good sign. So let's kill off one of the nodes:&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;oj@nix ~/blog/riak/dev $ dev2/bin/riak stop
ok
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In a very short period of time, you should see output in the HAProxy console which looks something like this:&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;[WARNING] 253/235636 (11824) : Server riaks/Riak2 is DOWN, reason: Layer4 connection problem, info: &amp;quot;Connection refused&amp;quot;, check duration: 0ms.
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The load balancer noticed that the node has died. Let's make sure it no longer attempts to allocate connections to &lt;code&gt;dev2&lt;/code&gt;. Note that we call &lt;a href=&quot;http://www.erlang.org/documentation/doc-5.2/doc/getting_started/getting_started.html&quot; title=&quot;Getting started&quot;&gt;f()&lt;/a&gt; in our console before running the same script again, as this forces the shell to forget about any existing variable bindings:&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;C1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;riakc_pb_socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1951&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;riakc_pb_socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_server_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;C1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dev1@127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server_version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;0.12.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]}&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;C2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;riakc_pb_socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1954&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;riakc_pb_socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_server_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;C2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dev3@127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server_version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;0.12.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]}&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;C3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;riakc_pb_socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1957&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;riakc_pb_socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_server_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;C3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dev1@127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server_version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;0.12.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As we hoped, &lt;code&gt;dev2&lt;/code&gt; is nowhere to be seen. Let's fire it up again:&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;oj@nix ~/blog/riak/dev $ dev2/bin/riak start
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; It isn't necessary to tell the node to rejoin the cluster. This happens automatically. Thanks to Siculars (see comment thread) for pointing that out.&lt;/p&gt;
&lt;p&gt;HAProxy's console will show you that it has re-established a connection to &lt;code&gt;dev2&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;[WARNING] 253/235852 (11824) : Server riaks/Riak2 is UP, reason: Layer7 check passed, code: 200, info: &amp;quot;OK&amp;quot;, check duration: 1ms.
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As a final test, let's make sure we see that node get connections when we attempt to connect:&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;&lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;C1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;riakc_pb_socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4203&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;riakc_pb_socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_server_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;C1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dev3@127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server_version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;0.12.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]}&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;C2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;riakc_pb_socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4206&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;riakc_pb_socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_server_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;C2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dev1@127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server_version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;0.12.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]}&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;C3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;riakc_pb_socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4209&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;riakc_pb_socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_server_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;C3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,[{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dev2@127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server_version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;0.12.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;wrapping_up&quot;&gt;Wrapping up&lt;/h3&gt;
&lt;p&gt;Excellent. Now that we've got our load-balancer set up in development, we're ready to dive into connecting to Riak from our &lt;code&gt;csd&lt;/code&gt; application. That will be the topic for the next post in this series.&lt;/p&gt;
&lt;p&gt;As always, comments and feedback are welcome and greatly appreciated. Suggestions on improvements and pointers on mistakes would be awesome. To anyone out there who has put HAProxy into production, we would love to hear your comments on your configuration!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The code for Part 2 (this post) can be found &lt;a href=&quot;https://bitbucket.org/OJ/csd/src/df62880d12a8&quot; title=&quot;Source Code for Part 2&quot;&gt;on my Bitbucket account&lt;/a&gt;.&lt;/p&gt;</content:encoded>
	<dc:date>2010-09-13T03:15:25+00:00</dc:date>
</item>
<item rdf:about="http://buffered.io/2010/09/01/webmachine-erlydtl-and-riak-part-1/">
	<title>IJs Rants: Webmachine, ErlyDTL and Riak - Part 1</title>
	<link>http://buffered.io/2010/09/01/webmachine-erlydtl-and-riak-part-1/</link>
	<content:encoded>span.filename
{
  font-weight: bold;
  font-family: Consolas, Courier;
  font-size: 12px;
  text-align: right;
  display: block;
  margin: 0;
  padding: 3px;
  background-color: #e0e0ff;
}


&lt;p&gt;&lt;img src=&quot;http://buffered.io/uploads/2010/09/riak-logo.png&quot; alt=&quot;Riak Logo&quot; /&gt;It has been a long time coming, but the first post is finally here! This is the first in a series of post, as &lt;a href=&quot;http://buffered.io/2009/10/31/the-future-is-erlang/&quot; title=&quot;The Future is Erlang&quot;&gt;promised a while ago&lt;/a&gt;, covering off web development using &lt;a href=&quot;http://erlang.org/&quot; title=&quot;Erlang&quot;&gt;Erlang&lt;/a&gt;. This post is the ubiquitous &quot;get up and running&quot; post, which aims to get your environment set up so that you can dive in to development. The next post will detail how to handle a basic end-to-end web request.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://buffered.io/uploads/2010/09/Erlang_logo.png&quot; width=&quot;150&quot; /&gt;First up, a few things we need to be aware of before we begin:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The information in this post has only been verified on Linux (&lt;a href=&quot;http://linuxmint.com/&quot; title=&quot;Linux Mint&quot;&gt;Mint&lt;/a&gt; to be exact). It &lt;em&gt;should&lt;/em&gt; work just fine on Mac OSX. I'm almost certain that it &lt;em&gt;won't&lt;/em&gt; work on a Windows machine. So if you're a Windows developer, you'll have to wait for another post down the track which covers off how to get your environment ready to rock.&lt;/li&gt;
&lt;li&gt;We'll be downloading, building and installing &lt;a href=&quot;http://erlang.org/&quot; title=&quot;Erlang&quot;&gt;Erlang&lt;/a&gt;, &lt;a href=&quot;http://github.com/evanmiller/erlydtl&quot; title=&quot;ErlyDTL&quot;&gt;ErlyDTL&lt;/a&gt;, &lt;a href=&quot;http://www.basho.com/developers.html#Riak&quot; title=&quot;Riak&quot;&gt;Riak&lt;/a&gt; and &lt;a href=&quot;http://www.basho.com/developers.html#Webmachine&quot; title=&quot;Webmachine&quot;&gt;Webmachine&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.basho.com/developers.html#Rebar&quot; title=&quot;Rebar&quot;&gt;Rebar&lt;/a&gt; is the tool we'll be using to handle builds, but I won't be covering it in any depth.&lt;/li&gt;
&lt;li&gt;You will need the latest versions of both &lt;a href=&quot;http://hg-scm.com/&quot; title=&quot;Mercurial&quot;&gt;Mercurial&lt;/a&gt; and &lt;a href=&quot;http://git-scm.com/&quot; title=&quot;Git&quot;&gt;Git&lt;/a&gt; so make sure they're downloaded and installed before you follow this article.&lt;/li&gt;
&lt;li&gt;We'll be doing &lt;em&gt;some&lt;/em&gt; interaction with Riak via &lt;a href=&quot;http://curl.haxx.se/&quot; title=&quot;cURL and libcurl&quot;&gt;curl&lt;/a&gt;, so make sure you have it downloaded and installed as well.&lt;/li&gt;
&lt;li&gt;This is intended to be a step-by-step guide targeted at those who are very new to web development in Erlang. This may not be the most ideal set up, nor the best way of doing certain things. I am hoping that those people who are more experienced than I will be able to provide feedback and guidance in areas where I am lacking.&lt;/li&gt;
&lt;li&gt;Over the course of this series I'll be attempting to build an Erlang version of the &lt;a href=&quot;http://bitbucket.org/OJ/codesmackdown&quot; title=&quot;Code Smackdown&quot;&gt;Code Smackdown&lt;/a&gt; site that I've been working on here and there with a &lt;a href=&quot;http://secretgeek.net/&quot; title=&quot;secretGeek&quot;&gt;mate of mine&lt;/a&gt;. You'll see that the sample application we're working on is called &quot;csd&quot; for obvious reasons.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;OK, let's get into it. First up, Erlang. &lt;!--more--&gt;&lt;/p&gt;
&lt;h3 id=&quot;installing_erlang_r14b02&quot;&gt;Installing Erlang R14B02&lt;/h3&gt;
&lt;p&gt;Download and installation is fairly simple. Right now we're not worried about enabling all of the features of Erlang, such as interfacing with Java and providing support for GTK. So the boilerplate functionality is enough. Here are the steps to follow:&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;oj@nix ~/blog $ wget http://erlang.org/download/otp_src_R14B02.tar.gz

... snip ...

&lt;p&gt;oj@nix ~/blog $ tar -xzf otp_src_R14B02.tar.gz 
oj@nix ~/blog $ cd otp_src_R14B02/
oj@nix ~/blog/otp_src_R14B02 $ ./configure &lt;/p&gt;
&lt;p&gt;... snip ...&lt;/p&gt;
&lt;p&gt;oj@nix ~/blog/otp_src_R14B02 $ make&lt;/p&gt;
&lt;p&gt;... snip ...&lt;/p&gt;
&lt;p&gt;oj@nix ~/blog/otp_src_R14B02 $ sudo make install&lt;/p&gt;
&lt;p&gt;... snip ...
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Done! Let's confirm that it has been set up correctly:&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;oj@nix ~/blog $ erl
Erlang R14B02 (erts-5.8.3) [source] [64-bit] [smp:2:2] [rq:2] [async-threads:0] [hipe] [kernel-poll:false]

Eshell V5.8.3  (abort with ^G)
1&amp;gt; q().
ok
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Excellent. Next let's get Riak going.&lt;/p&gt;
&lt;h3 id=&quot;installing_riak_014&quot;&gt;Installing Riak 0.14&lt;/h3&gt;
&lt;p&gt;Considering the power of the software you are about to set up, it is absolutely insane how easy it is to get it running. If any of you have tried to get &lt;a href=&quot;http://couchdb.apache.org/&quot; title=&quot;CouchDB&quot;&gt;CouchDB&lt;/a&gt; running you'll no doubt have experienced a few quirks and a bit of pain getting it rolling. Not so with Riak. As mentioned at the start of the article, make sure you have a recent version of &lt;a href=&quot;http://hg-scm.com/&quot; title=&quot;Mercurial&quot;&gt;Mercurial&lt;/a&gt; and &lt;a href=&quot;http://git-scm.com/&quot; title=&quot;Git&quot;&gt;Git&lt;/a&gt; installed.&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;oj@nix ~/blog$ hg --version
Mercurial Distributed SCM (version 1.7.3)
(see http://mercurial.selenic.com for more information)

Copyright (C) 2005-2010 Matt Mackall and others
This is free software; see the source for copying conditions. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

&lt;p&gt;oj@nix ~/blog$ git --version
git version 1.7.3.5&lt;/p&gt;
&lt;p&gt;oj@nix ~/blog $ git clone git://github.com/basho/riak
Cloning into riak...
remote: Counting objects: 10812, done.
remote: Compressing objects: 100% (3468/3468), done.
remote: Total 10812 (delta 7217), reused 10469 (delta 7020)
Receiving objects: 100% (10812/10812), 8.83 MiB | 729 KiB/s, done.
Resolving deltas: 100% (7217/7217), done.&lt;/p&gt;
&lt;p&gt;oj@nix ~/blog $ cd riak
oj@nix ~/blog/riak $ make
./rebar get-deps
==&amp;gt; rel (get-deps)
==&amp;gt; riak (get-deps)
Pulling cluster_info from {git,&amp;quot;git://github.com/basho/cluster_info&amp;quot;,
                               {branch,&amp;quot;master&amp;quot;}}
Cloning into cluster_info...
Pulling luwak from {git,&amp;quot;git://github.com/basho/luwak&amp;quot;,{branch,&amp;quot;master&amp;quot;}}
Cloning into luwak...
Pulling riak_kv from {git,&amp;quot;git://github.com/basho/riak_kv&amp;quot;,{branch,&amp;quot;master&amp;quot;}}
Cloning into riak_kv...
Pulling riak_err from {git,&amp;quot;git://github.com/basho/riak_err&amp;quot;,
                           {branch,&amp;quot;master&amp;quot;}}
Cloning into riak_err...
==&amp;gt; cluster_info (get-deps)
==&amp;gt; riak_kv (get-deps)
Pulling riak_core from {git,&amp;quot;git://github.com/basho/riak_core&amp;quot;,
                            {branch,&amp;quot;master&amp;quot;}}
Cloning into riak_core...
Pulling riakc from {git,&amp;quot;git://github.com/basho/riak-erlang-client&amp;quot;,
                        {tag,&amp;quot;riakc-1.0.2&amp;quot;}}
Cloning into riakc...
Pulling luke from {git,&amp;quot;git://github.com/basho/luke&amp;quot;,{tag,&amp;quot;luke-0.2.3&amp;quot;}}
Cloning into luke...
Pulling erlang_js from {git,&amp;quot;git://github.com/basho/erlang_js&amp;quot;,
                            {tag,&amp;quot;erlang_js-0.5.0&amp;quot;}}
Cloning into erlang_js...
Pulling bitcask from {git,&amp;quot;git://github.com/basho/bitcask&amp;quot;,{branch,&amp;quot;master&amp;quot;}}
Cloning into bitcask...
Pulling ebloom from {git,&amp;quot;git://github.com/basho/ebloom&amp;quot;,{branch,&amp;quot;master&amp;quot;}}
Cloning into ebloom...
Pulling eper from {git,&amp;quot;git://github.com/dizzyd/eper.git&amp;quot;,{branch,&amp;quot;master&amp;quot;}}
Cloning into eper...
==&amp;gt; riak_core (get-deps)
Pulling protobuffs from {git,&amp;quot;git://github.com/basho/erlang_protobuffs&amp;quot;,
                             {tag,&amp;quot;protobuffs-0.5.1&amp;quot;}}
Cloning into protobuffs...
Pulling basho_stats from {git,&amp;quot;git://github.com/basho/basho_stats&amp;quot;,&amp;quot;HEAD&amp;quot;}
Cloning into basho_stats...
Pulling riak_sysmon from {git,&amp;quot;git://github.com/basho/riak_sysmon&amp;quot;,
                              {branch,&amp;quot;master&amp;quot;}}
Cloning into riak_sysmon...
Pulling webmachine from {git,&amp;quot;git://github.com/basho/webmachine&amp;quot;,
                             {tag,&amp;quot;webmachine-1.8.0&amp;quot;}}
Cloning into webmachine...
==&amp;gt; protobuffs (get-deps)
==&amp;gt; basho_stats (get-deps)
==&amp;gt; riak_sysmon (get-deps)
==&amp;gt; webmachine (get-deps)
Pulling mochiweb from {git,&amp;quot;git://github.com/basho/mochiweb&amp;quot;,
                           {tag,&amp;quot;mochiweb-1.7.1&amp;quot;}}
Cloning into mochiweb...
==&amp;gt; mochiweb (get-deps)
==&amp;gt; riakc (get-deps)
==&amp;gt; luke (get-deps)
==&amp;gt; erlang_js (get-deps)
==&amp;gt; ebloom (get-deps)
==&amp;gt; bitcask (get-deps)
==&amp;gt; eper (get-deps)
==&amp;gt; luwak (get-deps)
Pulling skerl from {git,&amp;quot;git://github.com/basho/skerl&amp;quot;,{tag,&amp;quot;skerl-1.0.1&amp;quot;}}
Cloning into skerl...
==&amp;gt; skerl (get-deps)
==&amp;gt; riak_err (get-deps)
./rebar compile
==&amp;gt; cluster_info (compile)
Compiled src/cluster_info_ex.erl&lt;/p&gt;
&lt;p&gt;... snip ...
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I snipped a lot of the make output for obvious reasons. Let's build a few development nodes of Riak and cluster them together as indicated in the &lt;a href=&quot;https://wiki.basho.com/display/RIAK/The+Riak+Fast+Track&quot; title=&quot;Riak Fast Track&quot;&gt;Riak Fast Track&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;oj@nix ~/blog/riak $ make devrel
mkdir -p dev
(cd rel &amp;amp;&amp;amp; ../rebar generate target_dir=../dev/dev1 overlay_vars=vars/dev1_vars.config)
==&amp;gt; rel (generate)
mkdir -p dev
(cd rel &amp;amp;&amp;amp; ../rebar generate target_dir=../dev/dev2 overlay_vars=vars/dev2_vars.config)
==&amp;gt; rel (generate)
mkdir -p dev
(cd rel &amp;amp;&amp;amp; ../rebar generate target_dir=../dev/dev3 overlay_vars=vars/dev3_vars.config)
==&amp;gt; rel (generate)

oj@nix ~/blog/riak $ cd dev
oj@nix ~/blog/riak/dev $ dev1/bin/riak start
oj@nix ~/blog/riak/dev $ dev2/bin/riak start
oj@nix ~/blog/riak/dev $ dev3/bin/riak start
oj@nix ~/blog/riak/dev $ dev2/bin/riak-admin join dev1
Sent join request to dev1

&lt;p&gt;oj@nix ~/blog/riak/dev $ dev3/bin/riak-admin join dev1
Sent join request to dev1&lt;/p&gt;
&lt;p&gt;oj@nix ~/blog/riak/dev $ curl -H &amp;quot;Accept: text/plain&amp;quot; http://127.0.0.1:8091/stats
{
  ... snip ...&lt;/p&gt;
&lt;p&gt;&amp;quot;nodename&amp;quot;: &amp;quot;dev1@127.0.0.1&amp;quot;,
    &amp;quot;connected_nodes&amp;quot;: [
    &amp;quot;dev2@127.0.0.1&amp;quot;,
    &amp;quot;dev3@127.0.0.1&amp;quot;
  ],&lt;/p&gt;
&lt;p&gt;... snip ...&lt;/p&gt;
&lt;p&gt;&amp;quot;ring_members&amp;quot;: [
    &amp;quot;dev1@127.0.0.1&amp;quot;,
    &amp;quot;dev2@127.0.0.1&amp;quot;,
    &amp;quot;dev3@127.0.0.1&amp;quot;
  ],
  &amp;quot;ring_num_partitions&amp;quot;: 64,
  &amp;quot;ring_ownership&amp;quot;: &amp;quot;[{'dev3@127.0.0.1',21},{'dev2@127.0.0.1',21},{'dev1@127.0.0.1',22}]&amp;quot;,&lt;/p&gt;
&lt;p&gt;... snip ...
}
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As we can see from the curl output, we now have a 3-node Riak cluster up and running. Those three nodes have the following traits:
&lt;table border=&quot;1&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Protobuf Port&lt;/th&gt;
      &lt;th&gt;HTTP Port&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;dev1@127.0.0.1&lt;/td&gt;
      &lt;td&gt;8081&lt;/td&gt;
      &lt;td&gt;8091&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;dev2@127.0.0.1&lt;/td&gt;
      &lt;td&gt;8082&lt;/td&gt;
      &lt;td&gt;8092&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;dev3@127.0.0.1&lt;/td&gt;
      &lt;td&gt;8083&lt;/td&gt;
      &lt;td&gt;8093&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
We can talk to any of these nodes and they will replicate their data to the other nodes. Nifty! Now that we have a Riak cluster running for development, let's get Webmachine ready.&lt;/p&gt;
&lt;h3 id=&quot;installing_webmachine_08&quot;&gt;Installing Webmachine 0.8&lt;/h3&gt;
&lt;p&gt;Again, the process is very simple:&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;oj@nix ~/blog $ git clone git://github.com/basho/webmachine
loning into webmachine...
remote: Counting objects: 1183, done.
remote: Compressing objects: 100% (484/484), done.
remote: Total 1183 (delta 735), reused 1063 (delta 668)
Receiving objects: 100% (1183/1183), 1.17 MiB | 294 KiB/s, done.
Resolving deltas: 100% (735/735), done.

oj@nix ~/blog $ cd webmachine/
oj@nix ~/blog/webmachine $ make
==&amp;gt; webmachine (get-deps)
Pulling mochiweb from {git,&amp;quot;git://github.com/mochi/mochiweb&amp;quot;,{tag,&amp;quot;1.5.1&amp;quot;}}
Cloning into mochiweb...
==&amp;gt; mochiweb (get-deps)
==&amp;gt; mochiweb (compile)
Compiled src/mochiglobal.erl
Compiled src/mochiweb_sup.erl

&lt;p&gt;... snip ...
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, Webmachine sits on top of the &lt;a href=&quot;http://github.com/mochi/mochiweb&quot; title=&quot;Mochiweb&quot;&gt;Mochiweb&lt;/a&gt; web server.&lt;/p&gt;
&lt;p&gt;To create our own application which sits on top of Webmachine, we can utilise the &lt;code&gt;new_webmachine.sh&lt;/code&gt; script. So let's do that to create our Code Smackdown (csd) site:&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;oj@nix ~/blog/webmachine $ scripts/new_webmachine.sh
usage: new_webmachine.sh name [destdir]
oj@nix ~/blog/webmachine $ scripts/new_webmachine.sh csd ..
==&amp;gt; priv (create)
Writing /home/oj/blog/csd/README
Writing /home/oj/blog/csd/Makefile
Writing /home/oj/blog/csd/rebar.config
Writing /home/oj/blog/csd/rebar
Writing /home/oj/blog/csd/start.sh
Writing /home/oj/blog/csd/src/csd.app.src
Writing /home/oj/blog/csd/src/csd.erl
Writing /home/oj/blog/csd/src/csd_app.erl
Writing /home/oj/blog/csd/src/csd_sup.erl
Writing /home/oj/blog/csd/src/csd_resource.erl
Writing /home/oj/blog/csd/priv/dispatch.conf
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Webmachine generates a fully functional website out of the box. So we should be able to build it, fire it up and see it in action:&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;oj@nix ~/blog/webmachine $ cd ../csd
oj@nix ~/blog/csd $ make
==&amp;gt; csd (get-deps)
Pulling webmachine from {git,&amp;quot;git://github.com/basho/webmachine&amp;quot;,&amp;quot;HEAD&amp;quot;}
Cloning into webmachine...
==&amp;gt; webmachine (get-deps)
Pulling mochiweb from {git,&amp;quot;git://github.com/mochi/mochiweb&amp;quot;,{tag,&amp;quot;1.5.1&amp;quot;}}
Cloning into mochiweb...
==&amp;gt; mochiweb (get-deps)
==&amp;gt; mochiweb (compile)
Compiled src/mochiglobal.erl

... snip ...

&lt;p&gt;oj@nix ~/blog/csd $ ./start.sh
Erlang R14B02 (erts-5.8.3) [source] [64-bit] [smp:2:2] [rq:2] [async-threads:0] [hipe] [kernel-poll:false]&lt;/p&gt;
&lt;p&gt;... snip ...&lt;/p&gt;
&lt;p&gt;PROGRESS REPORT==== 3-Apr-2011::22:38:36 ===
          supervisor: {local,csd_sup}
             started: [{pid,&amp;lt;0.76.0&amp;gt;},
                       {name,webmachine_mochiweb},
                       {mfargs,
                           {webmachine_mochiweb,start,
                               [[{ip,&amp;quot;0.0.0.0&amp;quot;},
                                 {port,8000},
                                 {log_dir,&amp;quot;priv/log&amp;quot;},
                                 {dispatch,[{[],csd_resource,[]}]}]]}},
                       {restart_type,permanent},
                       {shutdown,5000},
                       {child_type,worker}]&lt;/p&gt;
&lt;p&gt;=PROGRESS REPORT==== 3-Apr-2011::22:38:36 ===
         application: csd
          started_at: nonode@nohost
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The application is now up and running. As you can see from the output, our csd application has been fired up and is listening on port 8000. Let's fire it up in a web browser to see if it works.&lt;/p&gt;
&lt;img src=&quot;http://buffered.io/uploads/2010/09/wm_default.png&quot; /&gt;

&lt;p&gt;It's alive! We're almost done. Before we finish up, let's get set up our build to include some dependencies.&lt;/p&gt;
&lt;h3 id=&quot;adding_erlydtl_and_riak_client_dependencies&quot;&gt;Adding ErlyDTL and Riak Client Dependencies&lt;/h3&gt;
&lt;p&gt;Rebar makes this bit a walk in the park (thanks &lt;a href=&quot;http://dizzyd.com/&quot; title=&quot;Gradual Epiphany&quot;&gt;Dave&lt;/a&gt;, you rock!). Just make sure you stop your Webmachine node before continuing by typing &lt;code&gt;q().&lt;/code&gt; into your Erlang console.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;rebar.config&lt;/code&gt; file is what drives rebar's dependency mechanism. We need to open this file and add the entries we need to include in our application. Webmachine's &lt;code&gt;start.sh&lt;/code&gt; script by default includes all of the dependencies on start up, so after modifying the configuration, we don't have to do anything else (other than use the library of course).&lt;/p&gt;
&lt;p&gt;Open up &lt;code&gt;rebar.config&lt;/code&gt; in your &lt;a href=&quot;http://www.vim.org/&quot; title=&quot;VIM&quot;&gt;favourite editor&lt;/a&gt;, it should look something like this:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;filename&quot;&gt;rebar.config&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;%%-*- mode: erlang -*-&lt;/span&gt;

&lt;p&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;webmachine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;1.8.*&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;git://github.com/basho/webmachine&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;HEAD&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}]}.&lt;/span&gt;
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Edit the file so that it includes both ErlyDTL and the Riak Client:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;filename&quot;&gt;rebar.config&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;%%-*- mode: erlang -*-&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;webmachine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;1.8.*&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;git://github.com/basho/webmachine&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;HEAD&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;riakc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;.*&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;git://github.com/basho/riak-erlang-client&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;HEAD&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;erlydtl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;0.6.1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;git://github.com/OJ/erlydtl.git&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;HEAD&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You'll notice that the &lt;code&gt;erlydtl&lt;/code&gt; reference points at my own fork of the ErlyDTL project. This is because I have made it compile cleanly with rebar so that any dependent projects are also able to be build with rebar. Feel free to use your own fork if you like, but mine is there if you can't be bothered :)&lt;/p&gt;
&lt;p&gt;Save the file and build!&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;oj@nix ~/blog/csd $ make
==&amp;gt; mochiweb (get-deps)
==&amp;gt; webmachine (get-deps)
==&amp;gt; csd (get-deps)
Pulling riakc from {git,&amp;quot;git://github.com/basho/riak-erlang-client&amp;quot;,&amp;quot;HEAD&amp;quot;}
Cloning into riakc...
Pulling erlydtl from {git,&amp;quot;git://github.com/OJ/erlydtl.git&amp;quot;,&amp;quot;HEAD&amp;quot;}
Cloning into erlydtl...
==&amp;gt; riakc (get-deps)
Pulling protobuffs from {git,&amp;quot;git://github.com/basho/erlang_protobuffs&amp;quot;,
                             {tag,&amp;quot;protobuffs-0.5.1&amp;quot;}}
Cloning into protobuffs...
==&amp;gt; protobuffs (get-deps)
==&amp;gt; erlydtl (get-deps)
==&amp;gt; mochiweb (compile)
==&amp;gt; webmachine (compile)
==&amp;gt; protobuffs (compile)
Compiled src/pokemon_pb.erl
Compiled src/protobuffs_parser.erl

... snip ...
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Dependencies sorted. For the final part of this blog post, we'll include a basic ErlyDTL template and use it to render the page so we can see how it works.&lt;/p&gt;
&lt;h3 id=&quot;rendering_an_erlydtl_template&quot;&gt;Rendering an ErlyDTL Template&lt;/h3&gt;
&lt;p&gt;Rebar has built-in support for the compilation of ErlyDTL templates. It can be configured to behave how you want it to, but out of the box it...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;... looks for &lt;code&gt;*.dtl&lt;/code&gt; files in the &lt;code&gt;./templates&lt;/code&gt; folder&lt;/li&gt;
&lt;li&gt;... compiles each of the found templates into a module called &lt;code&gt;filename_dtl&lt;/code&gt; (eg. &lt;code&gt;base.dtl&lt;/code&gt; becomes the module base_dtl)&lt;/li&gt;
&lt;li&gt;... puts the module beam files into the &lt;code&gt;ebin&lt;/code&gt; directory&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Very handy. Let's create a very simple template by creating a &lt;code&gt;templates&lt;/code&gt; folder, and editing a new file in that folder called &lt;code&gt;sample.dtl&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;filename&quot;&gt;templates/sample.dtl&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&lt;/span&gt;Hello from inside ErlyDTL. You passed in {{ param }}.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then open up &lt;code&gt;src/csd_resource.erl&lt;/code&gt; and search for the &lt;code&gt;to_html()&lt;/code&gt; function. It should look like this:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;filename&quot;&gt;src/csd_resource.erl&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nf&quot;&gt;to_html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ReqData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;Hello, new world&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ReqData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Modify it to look like this:&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;filename&quot;&gt;src/csd_resource.erl&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nf&quot;&gt;to_html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ReqData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sample_dtl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Slartibartfast&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ReqData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For now, don't worry about the content of this file. I will cover this off in a future post.&lt;/p&gt;
&lt;p&gt;In the past, we had to manually modify &lt;code&gt;ebin/csd.app&lt;/code&gt; to include the template that we've just created. Thankfully, &lt;code&gt;rebar&lt;/code&gt; has been updated so that it generates the &lt;code&gt;ebin/csd.app&lt;/code&gt; file from the &lt;code&gt;src/csd.app.src&lt;/code&gt; file automatically when the application is built. &lt;code&gt;rebar&lt;/code&gt; adds the required modules from the &lt;code&gt;src&lt;/code&gt; folder &lt;em&gt;and&lt;/em&gt; includes the templates from the &lt;code&gt;templates&lt;/code&gt; folder. Therefore, with our template and module ready to go, all we need to do is build and run:&lt;/p&gt;
&lt;div class=&quot;pygments_murphy&quot;&gt;&lt;pre&gt;oj@nix ~/blog/csd $ make
==&amp;gt; mochiweb (get-deps)
==&amp;gt; webmachine (get-deps)
==&amp;gt; protobuffs (get-deps)
==&amp;gt; riakc (get-deps)
==&amp;gt; erlydtl (get-deps)
==&amp;gt; csd (get-deps)
==&amp;gt; mochiweb (compile)
==&amp;gt; webmachine (compile)
==&amp;gt; protobuffs (compile)
==&amp;gt; riakc (compile)
==&amp;gt; erlydtl (compile)
==&amp;gt; csd (compile)
Compiled src/csd_resource.erl
Compiled templates/sample.dtl

oj@nix ~/blog/csd $ ./start.sh 
Erlang R14B02 (erts-5.8.3) [source] [64-bit] [smp:2:2] [rq:2] [async-threads:0] [hipe] [kernel-poll:false]

&lt;p&gt;... snip ...&lt;/p&gt;
&lt;p&gt;** Found 0 name clashes in code paths &lt;/p&gt;
&lt;p&gt;... snip ...&lt;/p&gt;
&lt;p&gt;=PROGRESS REPORT==== 3-Apr-2011::22:54:50 ===
         application: csd
          started_at: nonode@nohost
&lt;/p&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice how ErlyDTL outputs some information to indicate that no template names have clashed with any other modules.&lt;/p&gt;
&lt;p&gt;The application is now running, let's see what it looks like:&lt;/p&gt;
&lt;img src=&quot;http://buffered.io/uploads/2010/09/wm_erlydtl.png&quot; /&gt;

&lt;h3 id=&quot;the_end&quot;&gt;The End&lt;/h3&gt;
&lt;p&gt;We now have a working environment in which to do our development. In the next post, I'll cover some of the basics required to get Webmachine talking to Riak via &lt;a href=&quot;http://en.wikipedia.org/wiki/Protocol_Buffers&quot; title=&quot;Protocol Buffers&quot;&gt;Protocol Buffers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Feedback and criticism welcome!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The code for Part 1 (this post) can be found &lt;a href=&quot;https://bitbucket.org/OJ/csd/src/716be7603ad7&quot; title=&quot;Source Code for Part 1&quot;&gt;on my Bitbucket account&lt;/a&gt;.&lt;/p&gt;</content:encoded>
	<dc:date>2010-09-02T04:29:54+00:00</dc:date>
</item>
<item rdf:about="http://seancribbs.com/tech/2010/08/31/ripple-0-8-is-full-of-good-stuff/">
	<title>Sean Cribbs - Digital Renaissance Man: Ripple 0.8 is Full of Good Stuff</title>
	<link>http://seancribbs.com/tech/2010/08/31/ripple-0-8-is-full-of-good-stuff/</link>
	<content:encoded>&lt;p&gt;It&amp;#8217;s been a while since I&amp;#8217;ve blogged about a release of Ripple, in fact, it&amp;#8217;s been a long time since I&amp;#8217;ve &lt;em&gt;released&lt;/em&gt; Ripple. So this post is going to dig into &lt;a href=&quot;http://rubygems.org/gems/ripple/versions/0.8.0&quot;&gt;Ripple 0.8&lt;/a&gt; (released today, August 31) and catch you up on what has happened since 0.7.1 (and 0.5 if you don&amp;#8217;t follow the &lt;a href=&quot;http://github.com/seancribbs/ripple&quot;&gt;Github project&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The major features, which I&amp;#8217;ll describe in more detail below, are:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Supports Riak 0.12 features&lt;/li&gt;
	&lt;li&gt;Runs on Rails 3 (non-prerelease)&lt;/li&gt;
	&lt;li&gt;Adds Linked associations&lt;/li&gt;
	&lt;li&gt;Adds session stores for Rack and Rails 3 apps&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Riak 0.12 Features&lt;/h2&gt;
&lt;p&gt;The biggest changes here were some bucket-related features. First of all, you can &lt;strong&gt;define default quorum parameters for requests on a per-bucket basis&lt;/strong&gt;, exposed as bucket properties. Riak 0.12 also allows you to specify &amp;#8220;symbolic&amp;#8221; quorums, that is, &amp;#8220;all&amp;#8221; (N replies), &amp;#8220;quorum&amp;#8221; (N/2 + 1 replies), or &amp;#8220;one&amp;#8221; (1 reply). &lt;a href=&quot;http://seancribbs.github.com/ripple/Riak/Bucket.html&quot;&gt;&lt;code&gt;Riak::Bucket&lt;/code&gt;&lt;/a&gt; has support for these new properties and exposes them as &lt;code&gt;attr_accessor&lt;/code&gt;-like methods. This is a big time saver if you need to tune your quorums for different use-cases or N-values.&lt;/p&gt;
&lt;p&gt;Second, &lt;strong&gt;keys are not listed by default&lt;/strong&gt;. There used to be a big flashing warning sign on &lt;a href=&quot;http://seancribbs.github.com/ripple/Riak/Client.html#bucket-instance_method&quot;&gt;&lt;code&gt;Riak::Client#bucket&lt;/code&gt;&lt;/a&gt; that encouraged you to pass &lt;code&gt;:keys =&amp;gt; false&lt;/code&gt;. In Ripple 0.8 that&amp;#8217;s the default, but it&amp;#8217;s also explicit so that if you use the latest gem on Riak 0.11 or earlier, you should get the same behavior.&lt;/p&gt;
&lt;h2&gt;Runs on Rails 3&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;ve been pushing for Rails 3 ever since Ripple was conceived, but now that the &lt;em&gt;actual&lt;/em&gt; release of Rails 3 is out, it&amp;#8217;s an easier sell. Thanks to all the &lt;a href=&quot;http://github.com/seancribbs/ripple/blob/master/CONTRIBUTORS.textile&quot;&gt;contributors&lt;/a&gt; who helped me keep Ripple up-to-date with the latest prereleases.&lt;/p&gt;
&lt;h2&gt;Linked associations&lt;/h2&gt;
&lt;p&gt;These are &lt;strong&gt;&lt;span class=&quot;caps&quot;&gt;HOT&lt;/span&gt;&lt;/strong&gt;, and were the missing features that held me back from saying &amp;#8220;Yes, you should use Ripple in your app.&amp;#8221; The underlying concepts take some time to understand (the upcoming link-walking page to the &lt;a href=&quot;http://wiki.basho.com/display/RIAK/The+Riak+Fast+Track&quot;&gt;Fast Track&lt;/a&gt; will help), but you actually have a lot more freedom than foreign keys. Here&amp;#8217;s some examples (with a little detail of how they work):&lt;/p&gt;
&lt;p&gt;You&amp;#8217;ll notice only &lt;code&gt;one&lt;/code&gt; and &lt;code&gt;many&lt;/code&gt; in the above examples. From the beginning, I&amp;#8217;ve eschewed creating the &lt;code&gt;belongs_to&lt;/code&gt; macro because I think it has the wrong semantics for how linked associations work (links are all on the origin side). It&amp;#8217;s more like you &amp;#8220;point to one of&amp;#8221; or &amp;#8220;point to many of&amp;#8221;. Minor point, but often it&amp;#8217;s the language you choose that frames how you think about things.&lt;/p&gt;
&lt;h2&gt;Session stores&lt;/h2&gt;
&lt;p&gt;Outside the Ruby-sphere, web session storage is one of Riak&amp;#8217;s most popular use-cases. Both &lt;a href=&quot;http://mochimedia.com/&quot;&gt;Mochi&lt;/a&gt; and &lt;a href=&quot;http://wikia.com/&quot;&gt;Wikia&lt;/a&gt; are using it for this. Now, it&amp;#8217;s really easy to do the same for your Rails or Sinatra app.&lt;/p&gt;
&lt;p&gt;For Sinatra, Padrino and other pure Rack apps, use &lt;code&gt;Riak::SessionStore&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;For Rails 3, use &lt;code&gt;Ripple::SessionStore&lt;/code&gt;:&lt;/p&gt;
&lt;h2&gt;Roadmap&lt;/h2&gt;
&lt;p&gt;If you&amp;#8217;re curious what&amp;#8217;s coming next in Ripple, or to provide feedback on the direction, be sure to check out the &lt;a href=&quot;http://github.com/seancribbs/ripple/issues&quot;&gt;issue tracker&lt;/a&gt;.  As always, questions can be sent direct to me (&lt;code&gt;sean AT basho DOT com&lt;/code&gt;) or to the &lt;a href=&quot;http://lists.basho.com/mailman/listinfo/riak-users_lists.basho.com&quot;&gt;riak-users mailing list&lt;/a&gt;. Documentation is available on &lt;a href=&quot;http://seancribbs.github.com/ripple&quot;&gt;Github Pages&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Cheers!&lt;/p&gt;</content:encoded>
	<dc:date>2010-08-31T22:48:07+00:00</dc:date>
	<dc:creator>Sean Cribbs</dc:creator>
</item>
<item rdf:about="http://www.themarkphillips.com//2010/08/20/What-I-Learned-from-Organizing-the-First-Riak-Meetup">
	<title>themarkphillips: What I Learned From Organizing The First Riak Meetup</title>
	<link>http://www.themarkphillips.com//2010/08/20/What-I-Learned-from-Organizing-the-First-Riak-Meetup.html</link>
	<content:encoded>&lt;p class=&quot;date&quot;&gt;&lt;i&gt;&lt;strong&gt;August 20, 2010&lt;/strong&gt;&lt;/i&gt;&lt;/p&gt;
	
&lt;p&gt;A Community Manager for an open source project has a laundry-list lot of responsibilities (&quot;wears a lot of hats,&quot; if you will), and this list only gets longer when you work at a startup. Recently, I had the opportunity to try my hand at event planning. As some of you might have known, Basho just organized and held the first&amp;nbsp;&lt;a href=&quot;http://www.meetup.com/San-Francisco-Riak-Meetup/&quot;&gt;Riak San Francisco Meetup&lt;/a&gt; which was originally &lt;a href=&quot;http://blog.basho.com/2010/07/19/basho-west-and-the-riak-one-year-anniversary/&quot;&gt;announced on the Basho Blog.&lt;/a&gt; It was very well-attended (drawing more than 100 people), the presentations and talks were informative and valuable, and the caliber of Riak (and non-Riak) discussion was exceptional. All told, I would argue it was a huge success.&lt;/p&gt;
&lt;p&gt;I had never planned an event of this size before, so I had to figure out how to do it on the fly. What I learned was that, while it's nowhere near as complex and challenging as writing a distributed database in Erlang, it does take some considerable time, effort, and precision.&lt;/p&gt;
&lt;p&gt;If you read my last post entitled &lt;a href=&quot;http://www.themarkphillips.com/2010/07/17/Why-I-Write-the-Riak-Recap-Every-Day.html&quot;&gt;Why I Write the Riak Recap Every Day&lt;/a&gt;, you may recall that I deal in what I consider to be mainly commonsense and simple but useful insights and advice. This post falls into that category. Hopefully those looking to plan an event can learn from this and perhaps offer some tips and tricks that I might have overlooked.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Goals and Vision:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;First things first: What's the point of the event and what are you trying to accomplish? For me, it was initially about starting a monthly Riak developer meetup. The significance quickly grew when we decided to make it also about our arrival in San Francisco and the one-year anniversary of Riak being open-sourced. So, our vision and goals became two-fold:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Establish a monthly Riak developer meetup to educate, promote, and exchange ideas&lt;/li&gt;
&lt;li&gt;Show developers, technologists, and executives that Riak is a rock-solid project with a strong community growing around it. People should leave with a firm understanding of what Riak is, who is using it, and why they should want to get involved.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You should have have a well-articulated vision for the event. It doesn't have to be a novel. A few lines will do. Once you know the point of the meetup or event, you can then set about planning appropriately.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Organization&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To actually organize the event and track attendance and RSVPs, I chose &lt;a href=&quot;http://meetup.com&quot;&gt;Meetup&lt;/a&gt;. The price for hosting the page for six months was cheap, and that was before the 50% discount I received. (Try this: go through the motions to set up your group's page and then leave the site before actually buying anything. I did this accidentally and then happened to receive an email a day later saying, &quot;Hey, we noticed you almost bought something. Would 50% off make it worth your while?&quot; Not sure if it's an automated email but it might be worth a try.)&lt;/p&gt;
&lt;p&gt;Why did I choose it? No real reason except that it was cheap, and, to be honest, the &lt;a href=&quot;http://www.meetup.com/San-Francisco-Redis-Meetup/&quot;&gt; Redis Meetup&lt;/a&gt; looked like it was quite successful, so I figured it wasn't a bad model from which to borrow. I spoke with a few people who weren't too psyched about using the site for organizing the meetup, but I think I'll stick with it. The &quot;Review&quot; and &quot;Ideas&quot; features have already proven useful, too, and I'm looking forward to seeing more out of these as we start to hold more meetings.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Location&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In San Francisco, there is no shortage of rentable spaces to accommodate a developer event. After some exploration and deliberation (using Yelp to start things off), I ended up choosing the &lt;a href=&quot;http://www.111minnagallery.com/&quot;&gt;111 Minna Gallery.&lt;/a&gt; In addition to being a highly-regarded, non-traditional venue, it made sense based on our attendance target and vision/goals.&lt;/p&gt;
&lt;p&gt;Was it expensive? Yes and no. If you need a turnkey event space (complete with bar, bartenders, security, sound system, coat check, etc.) then yes. But there are cheaper options in the SOMA area if you're looking to do something on a smaller, less expensive scale. (For future Riak meetups I'll probably look into renting out &lt;a href=&quot;http://citizenspace.us/&quot;&gt;Citizen Space&lt;/a&gt;.) That said, if you can afford it and need the space, definitely consider 111 Minna. It exceeds its reputation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Food and Drink&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Enlisting the services of a caterer was crucial for us. There is no way we were going to furnish food for more than 100 people without the help of some professionals. We also wanted to impress our guests, and my cooking was not going to help Basho's reputation.&lt;/p&gt;
&lt;p&gt;I jumped on Yelp, made a list of 10 potential vendors based on reviews and location, and started soliciting estimates based on my requirements. Most vendors were quick to respond with prices and sample menus.  As expected, there was a huge variance in prices proposed, so you'll have to look around a bit to find someone that suits your budget. In the end, I chose a company called &lt;a href=&quot;http://www.forkandspoonproductions.com/index_flash.htm&quot;&gt;Fork &amp;amp; Spoon.&lt;/a&gt;&amp;nbsp;If you can forgive them for their heavy Flash usage and the auto-play music, I would highly recommend them. The food quality and quantity were amazing, and the level of customization was top notch. I worked with Clementine Berk, Director of Corporate Events, who was more than happy to accommodate multiple requests and was excellent&amp;nbsp;overall.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Pro Tip: Don't forget the vegans. This should go without saying, but have at least one vegan item available.(We had two.)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;As for providing drinks, if the venue permits, you should have a cash bar at the very least. Basho decided to go all out and provide an open bar, which (not surprisingly) was a huge hit. If you can afford it, buy the bar.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Small Details&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &quot;Small Details&quot; category will expand as your get further into planning and more needs present themselves. Here are a few that I encountered:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Projector: If you need one, make sure it's present. And show up and test it before the meeting happens. Make sure the actual projection fits on the screen and adjust in advance as necessary.&lt;/li&gt;
&lt;li&gt;Dongles and connectors: Talk to all your presenters and find out what type of laptop they will be using and have an array of dongles available (even if they are planning to bring them). Another way to do this is to have a dedicated, pre-tested laptop and have all presenters send their slides over in advance.&lt;/li&gt;
&lt;li&gt;Name Tags: I totally overlooked this detail and would have forgotten had I not been texted by a coworker 35 minutes before the event was to start. To avoid an eleventh hour sprint to Office Depot, grab a bunch of name tags and some Sharpies far in advance.&lt;/li&gt;
&lt;li&gt;Music: The Riak meetup was a two hour event, with about 60 minutes scheduled for talks and Q and A. For the other 60 minutes, I threw together a playlist that was played at low volume to keep things lively while people were chatting.&lt;/li&gt;
&lt;li&gt;Wifi: Make sure it's available (if you need it) and do your best to ensure the network name and password are visible.&lt;/li&gt;
&lt;li&gt;Photos: Definitely worthwhile having a photographer if you can afford it. And it's even more worthwhile if you happen to know a kick-ass photographer who is willing to attend and take photos for free. (Chances are that you know someone who can do it for you. We summoned the powers of the inimitable &lt;a href=&quot;http://twitter.com/kirindave&quot;&gt;@kirindave&lt;/a&gt; Make friends with him. He's quite talented!) &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;General Tips, Tricks and Regrets&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Budget is key. Establish this first and make all decisions based on what you can spend. You can plan all you want, but if you book the &lt;a href=&quot;http://www.moscone.com/&quot;&gt; Moscone Center&lt;/a&gt; only to realize you can't afford it, you've wasted time and effort.&lt;/li&gt;
&lt;li&gt;Ask for discounts. We are a startup and are on a tight budget. If you're in the same situation (or are at all frugal), it's more than reasonable to ask for a discount. I'm not advocating asking for a 50% reduction in price. That's just being an ass. But, something in the 10% area in exchange for making them the preferred vendor for future events is fair and mutually advantageous.&lt;/li&gt;
&lt;li&gt;The only thing I regret is not filming the talks. I have to admit that I almost totally overlooked this, and when I realized I should be video taping the proceedings for posterity, it was too late. There was also considerable interest in it being streamed live online. I'll be looking into this for the next installment of the meetup, too.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Based on Basho and Riak&amp;rsquo;s current trajectory, I don&amp;rsquo;t suspect it will be too long before we have the opportunity to plan an event of this size and importance again. This is exciting because, though stressful, it was an amazing learning experience and I have no doubt that we can do it better and more efficiently. The next Riak-related meetup I will have a hand in planning will be next month&amp;rsquo;s Riak Meetup in San Francico (details to be announced soon), and you should &lt;a href=&quot;http://www.meetup.com/San-Francisco-Riak-Meetup/&quot;&gt;join the group&lt;/a&gt; if haven&amp;rsquo;t done so already.&lt;/p&gt;
&lt;p&gt;Meetups are essential to the success of any project. Attendees (especially those from the VC and C-level ranks, of whom there were numerous at the Riak Meetup) will note not only the quality of your software, but also the way you organize and execute events. It pays to do it well.&lt;/p&gt;</content:encoded>
	<dc:date>2010-08-20T07:00:00+00:00</dc:date>
</item>
<item rdf:about="http://www.themarkphillips.com//2010/07/17/Why-I-Write-the-Riak-Recap-Every-Day">
	<title>themarkphillips: Why I Write the Riak Recap Every Day</title>
	<link>http://www.themarkphillips.com//2010/07/17/Why-I-Write-the-Riak-Recap-Every-Day.html</link>
	<content:encoded>&lt;p class=&quot;date&quot;&gt;&lt;i&gt;&lt;strong&gt;July 7, 2010&lt;/strong&gt;&lt;/i&gt;&lt;/p&gt;
	
&lt;p&gt;Firstly, if you're not familiar with Riak, it's an open source, scalable, kick-ass database that will make your day-to-day life as a developer/ops professional easier while making your users/customers happier. &lt;em&gt;If you're at all interested in database technology and distributed systems, go to the Riak Wiki and &lt;a href=&quot;http://wiki.basho.com/display/RIAK/The+Riak+Fast+Track&quot;&gt;check out the Fast Track.&lt;/a&gt; It's 45 minutes very well spent.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The Riak Recap is, by all accounts, a very small blip on the overall community radar screen. But, it's something that has worked quite well for Riak and those who follow it. I'll be the first to admit that its usefulness and success within our community was unexpected. I'm not sure why, &lt;a href=&quot;https://twitter.com/hobbyist/status/16169626885&quot;&gt;but developers seem to like it.&lt;/a&gt; It's for this reason that I thought it might be worth devoting a blog post to in the event that there are other communities and projects that might benefit. (And, I'm finishing off this post from the &lt;a href=&quot;http://www.communityleadershipsummit.com/&quot;&gt;Community Leadership Summit in Portland&lt;/a&gt;, so I'm feeling particularly pumped about sharing community tips, tricks, and ideas.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What is the Riak Recap?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Riak Recap is a daily email, sent to the &lt;a href=&quot;http://lists.basho.com/mailman/listinfo/riak-users_lists.basho.com&quot;&gt;Riak Mailing List&lt;/a&gt;, that details briefly all the worthwhile content and information generated about or pertaining to Riak &lt;em&gt;that was not sent across the mailing list.&lt;/em&gt; The concept is very simple and there is definitely nothing groundbreaking about it. &lt;a href=&quot;http://lists.basho.com/pipermail/riak-users_lists.basho.com/2010-May/001321.html&quot;&gt;This&lt;/a&gt; is what the typical Recap looks like.&lt;/p&gt;
&lt;p&gt;After becoming Community Manager at &lt;a href=&quot;http://basho.com&quot;&gt;Basho,&lt;/a&gt; I made it a habit to wake up, pour a cup of coffee, and read the IRC logs. (If you'd like to join me, you can read them at &lt;a href=&quot;http://irclogger.com/riak&quot;&gt;irclogger.com/riak&lt;/a&gt;). As with most projects, IRC, along with the mailing list, is where the bulk of regularly scheduled technical discussion is happening, so I thought it necessary to stay current on all that happened in the channel.&lt;/p&gt;
&lt;p&gt;Riak, comparatively speaking, is a young open source project (though it has been in production for years), and many developers are still learning about what it is and what it can do. This results in a slight imbalance between questions and answers. Sometimes a question would get asked and receive no response, stranded and destined to float forever in the IRC ether. It killed me when this happened. For a newcomer to a project, not getting a response to a question or idea could mean the difference between just downloading the software and actually using it in production. (And there is no shortage of solutions in the database space, so&amp;nbsp;we&amp;nbsp;cherish every user.)&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;So, the initial purpose of the Recap was to collect these orphaned questions, answer them, and send them off to the mailing list in the hopes that whomever asked would have their questions answered. Aside from questions, there are also incredibly valuable conversations that happen in an IRC room at all hours of the day. The problem is that at any given time only a fraction of your users will be lurking about in IRC. Why should the majority of your community be deprived of the knowledge and content generated when they aren't able to pay attention? This led me to literally start cutting and pasting interesting conversations into Gists and linking them from the Recap with a one or two line preamble telling people why they should read them. &lt;a href=&quot;http://gist.github.com/417326&quot;&gt;This is a great example.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In addition to orphaned questions and logged IRC conversation, I gradually added more content to the Recap and it now consists of anything and everything:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Links to new Riak-related repos on BitBucket and GitHub&lt;/li&gt;
&lt;li&gt;Interesting Tweets&lt;/li&gt;
&lt;li&gt;Pictures of Riak and Basho t-shirts and stickers in the wild&lt;/li&gt;
&lt;li&gt;Announcements about upcoming talks and presentations&lt;/li&gt;
&lt;li&gt;Slidedecks from presentations&lt;/li&gt;
&lt;li&gt;Link to blog posts&lt;/li&gt;
&lt;li&gt;Pointers to new wiki additions and documentation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In other words, any information source is fair game. It has even gotten to the point where people will send me things via email asking to have their blog post or new Riak driver included in the next Recap.&lt;/p&gt;
&lt;p&gt;Besides keeping everyone interested in Riak up-to-date, there are some other positive side effects of the Recap:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; &lt;strong&gt;Indexing and web searching purposes;&lt;/strong&gt; Everything that comes across the Riak mailing list gets indexed, Recaps included. We also &lt;a href=&quot;http://wiki.basho.com/display/RIAK/Riak+Recaps&quot;&gt;link all the recaps from the Riak Wiki.&lt;/a&gt; This increases the number of Riak resources and searchable content on the web.&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;Shows new (and existing) users that there actually is activity around the project;&lt;/strong&gt; A lot of times developers will evaluate not just the quality of an open source software project but also the activity level of the community supporting it. The activity is out there. The Recap brings it to them everyday.&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;Recognition;&lt;/strong&gt; It's well acknowledged that peer recognition and community notoriety are among the top reasons people participate in open source projects. A link to a new Riak driver with a thank you and some praise goes a long way to encourage more participation without being disingenuous.&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;It shows us where the holes in our documentations are;&lt;/strong&gt; If, for instance, users keep asking about a way to &quot;list keys&quot; in Riak, we know we need to address this better in our documentation.&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;Reporting all the questions shows that there are no stupid questions;&lt;/strong&gt; Want to scare a newcomer away from a project? Easy - make them feel like their questions are stupid or trivial. Just recently I showed a new comer to the #riak channel that their previous day's questions were to be included in the Recap. Their response: &quot;I thought I was being 'repetitive' with the questions.... it's nice knowing they're relevant.&quot;&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;Helps spread the word about Riak to those who &lt;em&gt;aren't&lt;/em&gt; on the mailing list;&lt;/strong&gt; At some point people started tweeting links to the Recap, thus enabling those not on the mailing list to learn about the project and stay current. (Mailing lists aren't for everyone.) &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ultimately (and somewhat sadly), the Riak Recap is probably not...scalable. The amount of activity in and around Riak is growing at a crazy rate and it will soon be hard to condense it all in a daily email. But, while it is still feasible, I believe writing it is worthwhile. I would encourage you to try something similar if you think it would help your project.&lt;/p&gt;</content:encoded>
	<dc:date>2010-07-17T07:00:00+00:00</dc:date>
</item>
<item rdf:about="http://www.themarkphillips.com//2010/07/01/Big-Table-in-the-house-of-Balmer">
	<title>themarkphillips: Big Table in the House of Balmer</title>
	<link>http://www.themarkphillips.com//2010/07/01/Big-Table-in-the-house-of-Balmer.html</link>
	<content:encoded>&lt;p class=&quot;date&quot;&gt;&lt;i&gt;&lt;strong&gt;July 1, 2010&lt;/strong&gt;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;The Boston Chapter of NoSQL Summer kicks off tonight at &lt;a href=&quot;http://microsoftcambridge.com/Events/NoSQLSummer/tabid/450/Default.aspx&quot;&gt;Microsoft's New England Research &amp;amp; Development Center.&lt;/a&gt; (A Big thanks needs to be given to &lt;a href=&quot;http://twitter.com/matthewpodwysocki&quot;&gt; Matthew Podwysocki&lt;/a&gt; and Leah Brunson for helping to lock down the meeting space for the summer.) &lt;a href=&quot;http://basho.com&quot;&gt;Basho&lt;/a&gt;, with some help from &lt;a href=&quot;http://twitter.com/steadicat&quot;&gt;Stefano&lt;/a&gt;&amp;nbsp;at&amp;nbsp;&lt;a href=&quot;https://cloudant.com&quot;&gt;Cloudant&lt;/a&gt;, took the reins and helped get this meeting off the ground, and after missing week one, we have about 20 onlookers queued up to attend tonight.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://nosqlsummer.org/&quot;&gt;NoSQL Summer,&lt;/a&gt; the brain child of the g&amp;eacute;nial &lt;a href=&quot;http://www.themarkphillips.com/%22http://twitter.com/timanglade&quot;&gt;Tim Anglade,&lt;/a&gt; is billed as a &quot;seasonal, worldwide reading club for databases, distributed systems &amp;amp; NOSQL-related scientific papers.&quot; What started as a 10 city experiment intended to bring a few curious developers and technologists up to speed with NoSQL Technologies has, in less than two months time, blown up into a global weekly meeting of the minds, currently comprised of almost participants in 31 cities on four continents. Awesome, to say the least!&lt;/p&gt;

&lt;p&gt;The inaugural Boston meeting will be lead by Daniel Einspanjer, a developer for Mozilla who has production experience with a whole host of databases. He is currently involved with production installations of (at the very least) &lt;a href=&quot;http://hbase.apache.org/&quot;&gt;Hbase&lt;/a&gt; and &lt;a href=&quot;http://wiki.basho.com&quot;&gt;Riak.&lt;/a&gt; Tonight's meeting with cover &lt;a href=&quot;http://nosqlsummer.org/paper/google-bigtable&quot;&gt;Google's Big Table Paper&lt;/a&gt;, the publication after which Hbase is modeled. Daniel has some serious NoSQL chops, so we are all looking forward to him dropping some theoretical and production knowledge on us. (If anyone in the Boston area wants to join us for next week, &lt;a href=&quot;http://groups.google.com/group/nosql-summer-boston&quot;&gt;register for the local mailing list&lt;/a&gt; to get involved.)&lt;/p&gt;

&lt;p&gt;Aside from educating the masses, the goal of the NoSQL Summer meetings is to annotate the papers being discussed. So, with any luck, some usable notes and insights will emerge from tonight's meeting. Stay tuned for those and other anecdotes from what will hopefully be the first of many insightful and worthwhile meetings here in Boston this summer. Who knows, perhaps Ballmer himself will make an appearance; he does have all this free time on his hands now that &lt;a href=&quot;http://gizmodo.com/5576764/microsoft-kills-kin&quot;&gt;the Kin is no more...&lt;/a&gt;&lt;/p&gt;</content:encoded>
	<dc:date>2010-07-01T07:00:00+00:00</dc:date>
</item>
<item rdf:about="http://buffered.io/2010/06/25/bfpg-june-meetup/">
	<title>IJs Rants: BFPG June Meetup</title>
	<link>http://buffered.io/2010/06/25/bfpg-june-meetup/</link>
	<content:encoded>&lt;p&gt;&lt;img src=&quot;http://buffered.io/uploads/2010/06/Home.png&quot; alt=&quot;Erlang Logo&quot; /&gt;The time has come for another meeting of the Functional Programming minds! This months &lt;a href=&quot;http://www.meetup.com/Brisbane-Functional-Programming-Group-BFG/calendar/12636552/&quot; title=&quot;June BFPG Meetup&quot;&gt;BFPG Meetup&lt;/a&gt;, starting 6pm Monday 28th, is the first one at our new venue: Microsoft HQ, Waterfront Place, Brisbane. For details on the location, take a look at the &lt;a href=&quot;http://bfpg.org/about/&quot; title=&quot;About BFPG&quot;&gt;BFPG about page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://buffered.io/uploads/2010/06/ruby.png&quot; alt=&quot;Erlang Logo&quot; /&gt;This month we have three speakers, and I am one of them! In my talk, &quot;Erlang - Why should you care?&quot;, I will be giving a fairly non-technical introduction to &lt;a href=&quot;http://erlang.org/&quot; title=&quot;Erlang&quot;&gt;Erlang&lt;/a&gt;. I'll be covering off the features of the language, some of its design goals and its history. I aiming to show that this language is not one that was spawned out of academia and that it has been applied in the real-world ever since its conception. If I have time, I'll also be giving a small demonstration of one of the neatest features of the technology.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://buffered.io/uploads/2010/06/haskell-logo-variation.png&quot; alt=&quot;Erlang Logo&quot; /&gt;
I'll be posting the slides and demonstration code here on this blog as well as &lt;a href=&quot;http://bfpg.org/&quot; title=&quot;BFPG&quot;&gt;BFPG's home&lt;/a&gt; after the meetup has taken place.&lt;/p&gt;
&lt;p&gt;Myself and my comrades, &lt;a href=&quot;http://adams.id.au/blog/&quot; title=&quot;Nosewheelie&quot;&gt;Tom&lt;/a&gt; and &lt;a href=&quot;http://blog.tmorris.net/&quot; title=&quot;Tony's blog&quot;&gt;Tony&lt;/a&gt;, will aim to provide a fun and interesting evening at our new venue. Based on the RSVPs so far, it looks like we are going to have one of the biggest turn-outs to date. This is probably due to the exposure we got during last month's &lt;a href=&quot;http://buffered.io/2010/05/22/dave-thomas-at-yow-nights-brisbane/&quot; title=&quot;Dave Thomas at YOW! Nights Brisbane&quot;&gt;talk by Dave Thomas&lt;/a&gt;. There are still plenty of spots left, so if you're keen to come along, &lt;a href=&quot;http://www.meetup.com/Brisbane-Functional-Programming-Group-BFG/calendar/12636552/&quot; title=&quot;Sign up for BFPG June 10&quot;&gt;go and sign up&lt;/a&gt;. Bring your friends, your friend's friends and your mum.&lt;/p&gt;
&lt;p&gt;I hope to see you there!
&lt;hr /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update (6th July 2010):&lt;/strong&gt; We had a fantastic turn-out of just short of 50 people (a record breaker for the group so far!). My talk seemed to be fairly well-received. No rotten tomatoes were thrown and the crowd seemed engaged through most of the talk. It felt good! I think many people wanted to see more code, but since that wasn't the focus of the talk they were a little disappointed. If people are keen for more Erlang goodness at future meetups, then I'll be happy to dive a little deeper.&lt;/p&gt;
&lt;p&gt;Here's a video of my talk:
&lt;p&gt;&lt;a href=&quot;http://vimeo.com/13566071&quot;&gt;OJ Reeves - Erlang - Why Should You Care&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;As promised, here are the slides:
&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://docs.google.com/leaf?id=0B4v3XvOkiwsCZjNhZTk3OTYtZTgxNy00MjBmLWJiZmYtMzZjMzU3N2E3MDgz&amp;hl=en&amp;authkey=CIaRg_sF&quot;&gt;PPTX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.google.com/a/buffered.io/fileview?id=0B4v3XvOkiwsCMjlhMWRjNGItYmZkOC00ODRlLTkzYTUtOTI3ZWZhY2MxOGYx&amp;hl=en&amp;authkey=CM7rtpEO&quot;&gt;PDF (Google Docs)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.google.com/a/buffered.io/present/edit?id=0AYv3XvOkiwsCZGdmamd0eGNfN2dnaDh3emhw&amp;hl=en&amp;authkey=CJKBg-MB&quot;&gt;PPT (Google Docs)&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;If you have issues reading the slide deck, or would like it in another format, then please &lt;a href=&quot;http://buffered.io/contact-me&quot;&gt;drop me a line&lt;/a&gt;.&lt;/p&gt;</content:encoded>
	<dc:date>2010-06-26T01:05:40+00:00</dc:date>
</item>
<item rdf:about="http://seancribbs.com/tech/2010/04/14/slides-from-boston-rb-introducing-riak-and-ripple/">
	<title>Sean Cribbs - Digital Renaissance Man: Slides from Boston.rb - &quot;Introducing Riak and Ripple&quot;</title>
	<link>http://seancribbs.com/tech/2010/04/14/slides-from-boston-rb-introducing-riak-and-ripple/</link>
	<content:encoded>&lt;div id=&quot;__ss_3720907&quot;&gt;&lt;strong&gt;&lt;a href=&quot;http://www.slideshare.net/seancribbs/introducing-riak-and-ripple&quot; title=&quot;Introducing Riak and Ripple&quot;&gt;Introducing Riak and Ripple&lt;/a&gt;&lt;/strong&gt;&lt;div&gt;View more &lt;a href=&quot;http://www.slideshare.net/&quot;&gt;presentations&lt;/a&gt; from &lt;a href=&quot;http://www.slideshare.net/seancribbs&quot;&gt;Sean Cribbs&lt;/a&gt;.&lt;/div&gt;&lt;/div&gt;</content:encoded>
	<dc:date>2010-04-14T09:51:16+00:00</dc:date>
	<dc:creator>Sean Cribbs</dc:creator>
</item>
<item rdf:about="http://seancribbs.com/tech/2010/02/10/introducing-ripple-0-5-you-got-your-riak-in-my-ruby/">
	<title>Sean Cribbs - Digital Renaissance Man: Introducing Ripple 0.5: &quot;You Got your Riak in my Ruby&quot;</title>
	<link>http://seancribbs.com/tech/2010/02/10/introducing-ripple-0-5-you-got-your-riak-in-my-ruby/</link>
	<content:encoded>&lt;p&gt;I&amp;#8217;ve teased and toyed with you over the last few days, and finally I&amp;#8217;m proud to announce the release of Ripple, a client library and object-mapper for &lt;a href=&quot;http://riak.basho.com/&quot;&gt;Riak&lt;/a&gt;, &lt;a href=&quot;http://basho.com/&quot;&gt;Basho Technologies&amp;#8217;&lt;/a&gt; distributed database.&lt;/p&gt;
&lt;p&gt;Since this is a first release, there are a few rough edges, but I think it&amp;#8217;s ready enough for the community to start using it.&lt;/p&gt;
&lt;h2&gt;Acknowledgments&lt;/h2&gt;
&lt;p&gt;Two awesome companies, &lt;a href=&quot;http://sonian.com/&quot;&gt;Sonian&lt;/a&gt; and &lt;a href=&quot;http://basho.com/&quot;&gt;Basho&lt;/a&gt;, enabled me to spend most of 6 weeks building this library.  Many kudos go to them for their financial support and technical direction on hard problems.&lt;/p&gt;
&lt;h2&gt;The Goods&lt;/h2&gt;
&lt;p&gt;For the impatient (or ecstatic) here&amp;#8217;s all the Ripple resources:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://github.com/seancribbs/ripple&quot;&gt;Github project&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Clone: &lt;code&gt;git clone git://github.com/seancribbs/ripple.git&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;Install: &lt;code&gt;gem install ripple&lt;/code&gt; (requires Rails 3 beta gems)&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://seancribbs.github.com/ripple&quot;&gt;Docs&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://github.com/seancribbs/ripple/issues&quot;&gt;Issue tracker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;How this project started&lt;/h2&gt;
&lt;p&gt;You&amp;#8217;ve already read roughly how I came to know about Riak in my &lt;a href=&quot;http://seancribbs.com/tech/2010/02/06/why-riak-should-power-your-next-rails-app/&quot;&gt;first post&lt;/a&gt;.  Here&amp;#8217;s the rest of the story.&lt;/p&gt;
&lt;p&gt;In November or December, &lt;a href=&quot;http://twitter.com/dysinger&quot;&gt;Tim Dysinger&lt;/a&gt;, VP Engineering at Sonian and all-around awesome guy, started expressing his interest in using Riak to back their Ruby apps. Since I was already interested in Riak, I pressed him for a contract to build the Ruby library now known as Ripple, and later Basho signed on as a co-sponsor.&lt;/p&gt;
&lt;h2&gt;More about the library&lt;/h2&gt;
&lt;p&gt;The feature list:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;A robust basic client, &lt;code&gt;Riak&lt;/code&gt;, with:
	&lt;ul&gt;
		&lt;li&gt;multiple &lt;span class=&quot;caps&quot;&gt;HTTP&lt;/span&gt; backends (curb, net/http)&lt;/li&gt;
		&lt;li&gt;sensible client defaults (local, default port)&lt;/li&gt;
		&lt;li&gt;bucket access and manipulation, including key-streaming&lt;/li&gt;
		&lt;li&gt;object reading, storing, deleting and reloading&lt;/li&gt;
		&lt;li&gt;automatic de-serialization of &lt;span class=&quot;caps&quot;&gt;JSON&lt;/span&gt;, &lt;span class=&quot;caps&quot;&gt;YAML&lt;/span&gt;, and Marshal (when given the right content type)&lt;/li&gt;
		&lt;li&gt;streaming &lt;span class=&quot;caps&quot;&gt;POST&lt;/span&gt;/&lt;span class=&quot;caps&quot;&gt;PUT&lt;/span&gt; bodies (when given an IO)&lt;/li&gt;
		&lt;li&gt;method-chained map-reduce job construction&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
	&lt;li&gt;A document-style modeling library, &lt;code&gt;Ripple&lt;/code&gt;, with:
	&lt;ul&gt;
		&lt;li&gt;ActiveModel 3.0 compatibility&lt;/li&gt;
		&lt;li&gt;Property/attribute definition with automatic type-casting&lt;/li&gt;
		&lt;li&gt;Bucket selection based on class name, with single-bucket inheritance (configurable)&lt;/li&gt;
		&lt;li&gt;Validations&lt;/li&gt;
		&lt;li&gt;Dirty-tracking&lt;/li&gt;
		&lt;li&gt;Simple finders &amp;#8211; all documents, by key&lt;/li&gt;
		&lt;li&gt;Reloading&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To use Ripple, you need Ruby 1.8.7 or later, and the ActiveModel and ActiveSupport gems from the &lt;a href=&quot;http://weblog.rubyonrails.org/2010/2/5/rails-3-0-beta-release&quot;&gt;Rails 3 beta release&lt;/a&gt;.  Rails 3 will be out very soon, so it might be good to go ahead and get your app ready for it.  More details about development and dependencies can be found in the &lt;a href=&quot;http://seancribbs.github.com/ripple&quot;&gt;&lt;span class=&quot;caps&quot;&gt;YARD&lt;/span&gt; documentation&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Usage notes&lt;/h2&gt;
&lt;ol&gt;
	&lt;li&gt;Ripple has &lt;strong&gt;two namespaces&lt;/strong&gt;. &lt;code&gt;require 'riak'&lt;/code&gt; to get just the basic client &amp;#8211; this should give you parity with the old &lt;code&gt;jiak.rb&lt;/code&gt; included in the Riak distribution, plus a lot more niceties. &lt;code&gt;require 'ripple'&lt;/code&gt; to get both the basic client and the (functional but incomplete) object-mapper library.&lt;/li&gt;
	&lt;li&gt;You&amp;#8217;ll need a working developer setup of &lt;a href=&quot;http://riak.basho.com/&quot;&gt;Riak 0.8&lt;/a&gt; or later.  If you have trouble installing, please ask for help on the &lt;a href=&quot;http://lists.basho.com/mailman/listinfo/riak-users_lists.basho.com&quot;&gt;mailing list&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;Some of the specs are failing on Ruby 1.9.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Known Issues&lt;/h2&gt;
&lt;ol&gt;
	&lt;li&gt;The object-mapper library is incomplete.  Most notably missing are associations, which is first on the list to be completed. Work-in-progress is available in the &lt;a href=&quot;http://github.com/seancribbs/ripple/tree/associations&quot;&gt;associations&lt;/a&gt; branch.&lt;/li&gt;
	&lt;li&gt;Using a streaming &lt;code&gt;all&lt;/code&gt; finder on a &lt;code&gt;Ripple::Document&lt;/code&gt; when using the &lt;code&gt;curb&lt;/code&gt; backend will render the client unusable because it attempts to request the key reusing the Curl::Easy handle that is doing the streaming.  This also affects &lt;code&gt;Riak::Bucket#keys&lt;/code&gt; with a streaming block, if the user decides to make requests to the server based on the yielded key.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Roadmap and future directions&lt;/h2&gt;
&lt;p&gt;The heat really turned up this week, partly thanks to my blog posts over the weekend and &lt;a href=&quot;http://thechangelog.com/&quot;&gt;the changelog podcast&lt;/a&gt;, so I felt compelled to release in an incomplete state. In addition to addressing the known issues above, these features are on the docket (all can be seen on the &lt;a href=&quot;http://github.com/seancribbs/ripple/issues&quot;&gt;Github issues tracker&lt;/a&gt;):&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Identity cache for buckets and keys &amp;#8211; think ActiveRecord&amp;#8217;s query cache and you&amp;#8217;ll know what I mean&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;ActiveSupport::Cache::Store&lt;/code&gt; implementation. This is mostly completed in a branch.&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;ActionController&lt;/code&gt; session store implementation. Just like the cache store, this should be simple to complete.&lt;/li&gt;
	&lt;li&gt;Wide-coverage integration tests and a testing harness. Some cucumber stories  would fit the bill here.&lt;/li&gt;
	&lt;li&gt;Support parallel backends like Curl::Multi or Typhoeus.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Thanks!&lt;/h2&gt;
&lt;p&gt;I really enjoyed building this and I hope you enjoy using it in your next Ruby project! &lt;strong&gt;Contributions are welcomed!&lt;/strong&gt;&lt;/p&gt;</content:encoded>
	<dc:date>2010-02-10T23:25:13+00:00</dc:date>
	<dc:creator>Sean Cribbs</dc:creator>
</item>

</rdf:RDF>
